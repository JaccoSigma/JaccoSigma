//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FDD3000_CanOpen"
	Revision           = "1.0"
	GUID               = "{59CCF72A-0BAB-4310-A955-4ABB82A6883B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(874,120)"
	Comment            = "class for FDD3000 drive over CanOpen.">
	<Channels>
		<Client Name="FDD3000_FileHandling1" Required="true" Internal="true"/>
		<Client Name="FDD3000AxisVis1" Required="true" Internal="true"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\FDD3000_CanOpen\FDD3000_CanOpen_Visu.vov"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="14.09.2020" Author="ZoePat" Company="Sigmatek" Description="first release version."/>
		<Dokumentation Revision="0.11" Date="07.09.2020" Author="ZoePat" Company="Sigmatek" Description="Activate Timeout for CAN communication in the FU."/>
		<Dokumentation Revision="0.10" Date="18.08.2020" Author="PieSte" Company="Sigmatek" Description="RC Version."/>
		<Dokumentation Revision="0.2" Date="05.08.2020" Author="PieSte" Company="Sigmatek" Description="VOV + Klasse weiterentwickelt."/>
		<Dokumentation Revision="0.1" Date="29.07.2020" Author="PieSte" Company="Sigmatek" Description="Newinst Property Online hinzugefügt."/>
	</RevDoku>
	<Network Name="FDD3000_CanOpen">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{9C171877-88E8-482B-9B31-86C525A43095}"
				Class      = "FDD3000_CanOpenInt"
				Position   = "(578,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="AccRate"/>
					<Server Name="ActDriveMode"/>
					<Server Name="ActSpeed"/>
					<Server Name="AsyncState"/>
					<Server Name="CanDisabled"/>
					<Server Name="ControllerIF"/>
					<Server Name="ControlWord"/>
					<Server Name="CurrentAtMaximumDeadTime"/>
					<Server Name="CurrentLoopKiGain"/>
					<Server Name="CurrentLoopKPGain"/>
					<Server Name="DataReady"/>
					<Server Name="DecRate"/>
					<Server Name="DeviceState"/>
					<Server Name="DriveError"/>
					<Server Name="DriveErrorStatus"/>
					<Server Name="DriveMode" Value="0"/>
					<Server Name="EmcyStatusByte0_3"/>
					<Server Name="EmcyStatusByte4_7"/>
					<Server Name="Enable"/>
					<Server Name="ErrorAlloc"/>
					<Server Name="ErrorQuit"/>
					<Server Name="ErrorSDO"/>
					<Server Name="FwVersionComm"/>
					<Server Name="FwVersionDrive"/>
					<Server Name="HwVersionComm"/>
					<Server Name="InputWord"/>
					<Server Name="LowFrequencyVoltageBoost"/>
					<Server Name="MaximumDeadTimeComp"/>
					<Server Name="MaxRefClamp"/>
					<Server Name="MinRefClamp"/>
					<Server Name="MotorRatedCurrent"/>
					<Server Name="MotorRatedFrequency"/>
					<Server Name="MotorRatedPowerFactor"/>
					<Server Name="MotorRatedSpeed"/>
					<Server Name="MotorRatedVoltage"/>
					<Server Name="Online"/>
					<Server Name="OPModeDrive"/>
					<Server Name="ProductCodeDrive"/>
					<Server Name="SaturationBreakpoint1"/>
					<Server Name="SaturationBreakpoint2"/>
					<Server Name="SaturationBreakpoint3"/>
					<Server Name="SaturationBreakpoint4"/>
					<Server Name="SerialNoDrive"/>
					<Server Name="Speed"/>
					<Server Name="StatorInductance"/>
					<Server Name="StatorResistance"/>
					<Server Name="StatusWord"/>
					<Server Name="STOInput"/>
					<Server Name="Stop"/>
					<Server Name="TransientInductance"/>
					<Client Name="ErrorSet"/>
					<Client Name="Index" Value="-1"/>
					<Client Name="MasterDevice"/>
					<Client Name="NewNMTState"/>
					<Client Name="Place" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SDOTable"/>
					<Client Name="toFDD3000FileHandling"/>
				</Channels>
			</Object>
			<Object
				Name           = "FDD3000_FileHandling1"
				GUID           = "{B9338272-F3C0-4049-B27B-FAC630BFE533}"
				Class          = "FDD3000_FileHandling"
				Position       = "(60,540)"
				Visualized     = "false"
				BackgroundTime = "250 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="coFileSys"/>
					<Client Name="coLinker"/>
					<Client Name="coSigCLib"/>
				</Channels>
			</Object>
			<Object
				Name       = "FDD3000AxisVis1"
				GUID       = "{B08D20D7-7E85-49CA-B0B7-B330AB4F4A8C}"
				Class      = "FDD3000AxisVis"
				Position   = "(540,3660)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="coFDD3000"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.DeviceState" Destination="_base.DeviceState" Vertices="(1516,210),(1344,210),"/>
			<Connection Source="this.ErrorQuit" Destination="_base.ErrorQuit" Vertices="(1516,270),(1344,270),"/>
			<Connection Source="this.CanDisabled" Destination="_base.CanDisabled" Vertices="(1516,330),(1344,330),"/>
			<Connection Source="this.DataReady" Destination="_base.DataReady" Vertices="(1516,390),(1344,390),"/>
			<Connection Source="this.AsyncState" Destination="_base.AsyncState" Vertices="(1516,450),(1344,450),"/>
			<Connection Source="this.ErrorSDO" Destination="_base.ErrorSDO" Vertices="(1516,510),(1344,510),"/>
			<Connection Source="this.ErrorAlloc" Destination="_base.ErrorAlloc" Vertices="(1516,570),(1344,570),"/>
			<Connection Source="this.EmcyStatusByte0_3" Destination="_base.EmcyStatusByte0_3" Vertices="(1516,630),(1344,630),"/>
			<Connection Source="this.EmcyStatusByte4_7" Destination="_base.EmcyStatusByte4_7" Vertices="(1516,690),(1344,690),"/>
			<Connection Source="this.ActDriveMode" Destination="_base.ActDriveMode" Vertices="(1516,750),(1344,810),"/>
			<Connection Source="this.StatusWord" Destination="_base.StatusWord" Vertices="(1516,810),(1344,870),"/>
			<Connection Source="this.ControlWord" Destination="_base.ControlWord" Vertices="(1516,870),(1344,930),"/>
			<Connection Source="this.DriveError" Destination="_base.DriveError" Vertices="(1516,930),(1344,990),"/>
			<Connection Source="this.DriveErrorStatus" Destination="_base.DriveErrorStatus" Vertices="(1516,990),(1344,1050),"/>
			<Connection Source="this.Enable" Destination="_base.Enable" Vertices="(1516,1050),(1344,1110),"/>
			<Connection Source="this.Speed" Destination="_base.Speed" Vertices="(1516,1110),(1344,1170),"/>
			<Connection Source="this.ActSpeed" Destination="_base.ActSpeed" Vertices="(1516,1170),(1344,1230),"/>
			<Connection Source="this.Stop" Destination="_base.Stop" Vertices="(1516,1230),(1344,1290),"/>
			<Connection Source="this.FwVersionDrive" Destination="_base.FwVersionDrive" Vertices="(1516,1590),(1344,1710),"/>
			<Connection Source="this.FwVersionComm" Destination="_base.FwVersionComm" Vertices="(1516,1650),(1344,1770),"/>
			<Connection Source="this.STOInput" Destination="_base.STOInput" Vertices="(1516,1290),(1344,1350),"/>
			<Connection Source="this.Online" Destination="_base.Online" Vertices="(1516,1410),(1344,1530),"/>
			<Connection Source="this.ProductCodeDrive" Destination="_base.ProductCodeDrive" Vertices="(1516,1470),(1344,1590),"/>
			<Connection Source="this.SerialNoDrive" Destination="_base.SerialNoDrive" Vertices="(1516,1530),(1344,1650),"/>
			<Connection Source="this.ControllerIF" Destination="_base.ControllerIF" Vertices="(1516,1770),(1344,1950),"/>
			<Connection Source="this.OPModeDrive" Destination="_base.OPModeDrive" Vertices="(1516,1830),(1344,2010),"/>
			<Connection Source="this.MaxRefClamp" Destination="_base.MaxRefClamp" Vertices="(1516,1890),(1344,2070),"/>
			<Connection Source="this.MinRefClamp" Destination="_base.MinRefClamp" Vertices="(1516,1950),(1344,2130),"/>
			<Connection Source="this.AccRate" Destination="_base.AccRate" Vertices="(1516,2010),(1344,2190),"/>
			<Connection Source="this.DecRate" Destination="_base.DecRate" Vertices="(1516,2070),(1344,2250),"/>
			<Connection Source="this.MotorRatedCurrent" Destination="_base.MotorRatedCurrent" Vertices="(1516,2130),(1344,2310),"/>
			<Connection Source="this.MotorRatedSpeed" Destination="_base.MotorRatedSpeed" Vertices="(1516,2190),(1344,2370),"/>
			<Connection Source="this.MotorRatedVoltage" Destination="_base.MotorRatedVoltage" Vertices="(1516,2250),(1344,2430),"/>
			<Connection Source="this.MotorRatedPowerFactor" Destination="_base.MotorRatedPowerFactor" Vertices="(1516,2310),(1344,2490),"/>
			<Connection Source="this.MotorRatedFrequency" Destination="_base.MotorRatedFrequency" Vertices="(1516,2370),(1344,2550),"/>
			<Connection Source="this.LowFrequencyVoltageBoost" Destination="_base.LowFrequencyVoltageBoost" Vertices="(1516,2430),(1344,2610),"/>
			<Connection Source="this.StatorResistance" Destination="_base.StatorResistance" Vertices="(1516,2490),(1344,2730),"/>
			<Connection Source="this.TransientInductance" Destination="_base.TransientInductance" Vertices="(1516,2550),(1344,2790),"/>
			<Connection Source="this.StatorInductance" Destination="_base.StatorInductance" Vertices="(1516,2610),(1344,2850),"/>
			<Connection Source="this.MaximumDeadTimeComp" Destination="_base.MaximumDeadTimeComp" Vertices="(1516,2670),(1344,2970),"/>
			<Connection Source="this.CurrentAtMaximumDeadTime" Destination="_base.CurrentAtMaximumDeadTime" Vertices="(1516,2730),(1344,3030),"/>
			<Connection Source="this.CurrentLoopKPGain" Destination="_base.CurrentLoopKPGain" Vertices="(1516,2790),(1344,3150),"/>
			<Connection Source="this.CurrentLoopKiGain" Destination="_base.CurrentLoopKiGain" Vertices="(1516,2850),(1344,3210),"/>
			<Connection Source="this.SaturationBreakpoint1" Destination="_base.SaturationBreakpoint1" Vertices="(1516,2910),(1344,3270),"/>
			<Connection Source="this.SaturationBreakpoint3" Destination="_base.SaturationBreakpoint3" Vertices="(1516,2970),(1344,3330),"/>
			<Connection Source="this.SaturationBreakpoint2" Destination="_base.SaturationBreakpoint2" Vertices="(1516,3030),(1344,3390),"/>
			<Connection Source="this.SaturationBreakpoint4" Destination="_base.SaturationBreakpoint4" Vertices="(1516,3090),(1344,3450),"/>
			<Connection Source="_base.MasterDevice" Destination="this.MasterDevice" Vertices="(578,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(578,270),(38,270),"/>
			<Connection Source="_base.Index" Destination="this.Index" Vertices="(578,330),(38,330),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(578,390),(38,390),"/>
			<Connection Source="this.HwVersionComm" Destination="_base.HwVersionComm" Vertices="(1516,1710),(1344,1830),"/>
			<Connection Source="_base.ErrorSet" Destination="this.ErrorSet" Vertices="(578,570),(38,510),"/>
			<Connection Source="this.FDD3000AxisVis1" Destination="FDD3000AxisVis1.ClassSvr"/>
			<Connection Source="FDD3000AxisVis1.coFDD3000" Destination="_base.ControllerIF" Vertices="(540,3750),(480,3750),(480,3810),(1110,3810),(1110,2040),(1344,1950),"/>
			<Connection Source="this.FDD3000_FileHandling1" Destination="FDD3000_FileHandling1.ClassSvr"/>
			<Connection Source="_base.toFDD3000FileHandling" Destination="FDD3000_FileHandling1.ClassSvr" Vertices="(578,630),(526,630),"/>
			<Connection Source="_base.NewNMTState" Destination="this.NewNMTState" Vertices="(578,450),(38,450),"/>
			<Connection Source="this.InputWord" Destination="_base.InputWord" Vertices="(1516,1350),(1344,1410),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using FDD3000_CanOpenInt

FDD3000_CanOpen : CLASS
: FDD3000_CanOpenInt
  //Servers:
  //Clients:
	FDD3000AxisVis1 	: CltChCmd_FDD3000AxisVis;
	FDD3000_FileHandling1 	: CltChCmd_FDD3000_FileHandling;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using FDD3000_FileHandling
#pragma using FDD3000AxisVis


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FDD3000_CanOpen::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_FDD3000_CANOPEN
1$UINT, 0$UINT, (SIZEOF(::FDD3000_CanOpen))$UINT, 
0$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2121253598), "FDD3000_CanOpen", //Class
TO_UDINT(555764090), "FDD3000_CanOpenInt", 1$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::FDD3000_CanOpen.FDD3000AxisVis1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3831537981), "FDD3000AxisVis1", TO_UDINT(1627670171), "FDD3000AxisVis", 1$UINT, 0$UINT, 
(::FDD3000_CanOpen.FDD3000_FileHandling1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2332185737), "FDD3000_FileHandling1", TO_UDINT(3011908429), "FDD3000_FileHandling", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_FDD3000_CanOpen 57

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FDD3000_CanOpen] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FDD3000_CanOpen::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= FDD3000_CanOpenInt::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _CanOpenBasicDS301::DeviceState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _CanOpenBasicDS301::DeviceState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_FDD3000_CanOpen;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	_CanOpenBasicDS301::DeviceState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _CanOpenBasicDS301::DeviceState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL FDD3000_CanOpen::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  //call baseclass  
  state :=  FDD3000_CanOpenInt::Background(EAX);
  
  //call file handling class
  if state = READY$UDINT then
    state :=  FDD3000_FileHandling1.Background(EAX);  
  end_if;  

END_FUNCTION
