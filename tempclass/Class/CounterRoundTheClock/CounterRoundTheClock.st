//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CounterRoundTheClock"
	Revision           = "0.0"
	GUID               = "{E16D2B16-B269-4F34-8FEE-13F59F258B7A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="AddValue" GUID="{531128FE-998F-41DE-A0EE-FFE8DB20B4A5}" Visualized="false" Initialize="true" DefValue="1" WriteProtected="false" Retentive="SRam"/>
		<Server Name="OnlyPos" GUID="{8BFBA8FE-3F42-434F-B554-D60C6CC5C547}" Visualized="false" Initialize="true" DefValue="1" WriteProtected="false" Retentive="SRam"/>
		<Server Name="Range" GUID="{2541905E-57ED-4A25-9436-DD366B2B7578}" Visualized="false" Initialize="true" DefValue="1000" WriteProtected="false" Retentive="SRam"/>
		<Server Name="Value" GUID="{91657890-A836-4327-A85C-B48F04927CEF}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
</Class>
*)
CounterRoundTheClock : CLASS
  //Servers:
	Value 	: SvrChCmd_DINT;
	Range 	: SvrCh_DINT;
	AddValue 	: SvrCh_DINT;
	OnlyPos 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Value::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CounterRoundTheClock::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_COUNTERROUNDTHECLOCK
0$UINT, 0$UINT, (SIZEOF(::CounterRoundTheClock))$UINT, 
4$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2197944936), "CounterRoundTheClock", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::CounterRoundTheClock.Value.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3928201860), "Value", 
(::CounterRoundTheClock.Range.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1691588857), "Range", 
(::CounterRoundTheClock.AddValue.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2291755411), "AddValue", 
(::CounterRoundTheClock.OnlyPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3628349862), "OnlyPos", 
//Clients:
END_FUNCTION


#define USER_CNT_CounterRoundTheClock 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CounterRoundTheClock] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CounterRoundTheClock::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_CounterRoundTheClock, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	Value.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Value.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Range.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Range.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AddValue.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF AddValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OnlyPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OnlyPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL CounterRoundTheClock::Value::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  If Range= 0 Then
    // No range so do all
    Value += AddValue;
  Else
    // Within a range
    If AddValue>= 0 Then
      // Count positive
      If Value< Abs( Range) Then
        // Range not reatched
        Value += AddValue;
      else
        // When reatched
        If OnlyPos= 1 Then
          // only positive is 0..range
          Value := 0;
        else
          // -range..0..range
          Value := 0-Abs( Range);
        end_if;
      end_If;
    Else
      // Count negative
      If OnlyPos= 1 Then
        // only positive is range..0
        If Value< 0 Then
          // 0 is not reatched
          Value += AddValue;
        else
          // 0 is reatched. range.. 0
          Value := Abs( Range);
        end_If;
      Else
        // range..0..-range
        If Value> 0-Abs( Range) Then
          // -range not reatched
          Value += AddValue;
        else
          // -range is reatched range..0..-range
          Value := Abs( Range);
        end_If;
      End_If;
    End_If;
  End_If;
  output := Value;

END_FUNCTION
