//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "checkDirectory"
	Revision           = "0.1"
	GUID               = "{E49A6F83-210B-4217-BB7B-4BCE7851CD9F}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(638,120)">
	<Channels>
		<Server Name="ChangeDetected" GUID="{1B9DA201-C234-4170-A845-34C5A846B24B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Counts up every time something happens in the directory (member variable)"/>
		<Client Name="_MultiTask" Required="false" Internal="false"/>
		<Client Name="SigCLib" Required="false" Internal="false"/>
		<Client Name="SigCLib_or_Multitask" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="SchAnd"/>
		<Dokumentation Revision="0.1" Date="2021-07-02" Author="SchAnd" Company="Sigmatek" Description="Corrected way of x86 task creation, reworked dirscan to keep cpu load manageable&#13;&#10;Showcase will only detect changes within first 256 entries in directory though!"/>
	</RevDoku>
</Class>
*)
checkDirectory : CLASS
	TYPE
	  taskcreation :  //! <Type Public="true" Name="taskcreation"/>
	  (
	    sigcl_thread_create2:=1,
	    multitask_createthread:=2
	  )$UDINT;
	END_TYPE
  //Servers:
	ChangeDetected 	: SvrChCmd_DINT;
  //Clients:
	SigCLib 	: CltChCmd_SigCLib;
	_MultiTask 	: CltChCmd__MultiTask;
	SigCLib_or_Multitask 	: CltCh_taskcreation_PTofCls_checkDirectory;
  //Variables:
		checksum 	: UDINT;
		directory : ARRAY [0..255] OF CHAR;

		dirContent : ARRAY [0..255] OF _DDE_INFO;

		noelements 	: USINT;
		dirscan_ssw 	: DINT;
		searchhandle 	: DINT;
		currentelement : ARRAY [0..255] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION dirscan;
	
	FUNCTION __CDECL GLOBAL scanthread_SigCLib
		VAR_INPUT
			pThis 	: ^void;
		END_VAR
		VAR_OUTPUT
			continue (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL GLOBAL scanthread_MultiTask
		VAR_INPUT
			pThis 	: ^void;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _MultiTask
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB checkDirectory::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CHECKDIRECTORY
0$UINT, 1$UINT, (SIZEOF(::checkDirectory))$UINT, 
1$UINT, 3$UINT, 0$UINT, 
TO_UDINT(1852761321), "checkDirectory", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::checkDirectory.ChangeDetected.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1848983211), "ChangeDetected", 
//Clients:
(::checkDirectory.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 37$UINT, 
(::checkDirectory._MultiTask.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2641766936), "_MultiTask", TO_UDINT(2641766936), "_MultiTask", 1$UINT, 1$UINT, 
(::checkDirectory.SigCLib_or_Multitask.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(341278407), "SigCLib_or_Multitask", 
END_FUNCTION


#define USER_CNT_checkDirectory 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_checkDirectory] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION checkDirectory::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_checkDirectory, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ChangeDetected.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ChangeDetected.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL checkDirectory::Init

  if _FirstScan then

    _strcpy(dest:=#directory[0], src:="c:\*");  // select a directory with < 256 elements inside
  
    if SigCLib_or_Multitask = sigcl_thread_create2 then  //Preferred
      sigclib_thread_create2(pfkt:=#scanthread_SigCLib(), priority:=8, time_us:=10000, pcookie:=this, name:="dirCheck_SigCLib");
    elsif SigCLib_or_Multitask = multitask_createthread then //Rather not use, stacksize unknown. 
      _MultiTask.CREATETHREAD(taskfunction0:=#scanthread_MultiTask(), priority0:=8, stackSize0:=4kb, flags0:=0, parameter0:=this, name0:="dirCheck_MultiTask");    
    end_if;
    
  end_if;
  
END_FUNCTION


FUNCTION checkDirectory::dirscan
  VAR
  	oldchks : udint;
  END_VAR

  case dirscan_ssw of
    0:
      noelements := 0;
      searchhandle := sigclib_findfirst(#directory[0], 0, 0, #dirContent[0], #currentelement[0], sizeof(currentelement));
      if searchhandle then
        dirscan_ssw += 1;
      end_if;  
    1:
      if(currentelement[0] <> 0 & _strcmp(str1:=#currentelement[0], str2:=".") <> 0 & _strcmp(str1:=#currentelement[0], str2:="..") <> 0) then
        noelements += 1; 
      end_if;
      if (sigclib_findnext(searchhandle, #dirContent[noelements], #currentelement[0], sizeof(currentelement)) <> 0 | noelements = 255) then //only check first 256 elements
        dirscan_ssw += 1;
      end_if;
    2:
      sigclib_findclose(searchhandle);
      searchhandle := 0;
      dirscan_ssw += 1;
    3:
      oldchks := checksum;
      checksum := sigclib_crc32(initval:=0, psrc:=#dirContent[0], length:=noelements*sizeof(_DDE_INFO));
      if checksum > 0 then
        dirscan_ssw := 0;
        if oldchks <> 0 & oldchks <> checksum then
          ChangeDetected += 1;
        end_if;  
      end_if;
      
  end_case;

END_FUNCTION


FUNCTION __CDECL GLOBAL checkDirectory::scanthread_SigCLib
	VAR_INPUT
		pThis 	: ^void;
	END_VAR
	VAR_OUTPUT
		continue 	: BOOL;
	END_VAR
  
  this := pThis$^checkDirectory;
  dirscan(); 
  continue := true;
  
END_FUNCTION


FUNCTION __CDECL GLOBAL checkDirectory::scanthread_MultiTask
	VAR_INPUT
		pThis 	: ^void;
	END_VAR

  this := pThis$^checkDirectory;

  while 1 do
    
    dirscan();
    
    _MultiTask.TASKDELAY(timeout0:=10);
    
  end_while;
  
END_FUNCTION
