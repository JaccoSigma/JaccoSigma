//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define FDD3000_PARAMETERSFILERAM_AMOUNT_SERVERS   21 //amount of servers of this class
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "FDD3000_ParametersFileRam"
	Revision           = "1.0"
	GUID               = "{6F0F168B-C7CB-493A-9E98-403C632E9265}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(810,600)">
	<Channels>
		<Server Name="AccRate" GUID="{7CFC01ED-95E3-461B-A553-C4C6CD37E032}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 02.011  Acceleration Rate 1 &#13;&#10;Short description: Defines the acceleration rate present in acceleration rate 1 as [0.0 s].&#13;&#10;"/>
		<Server Name="ClassSvr" GUID="{4A53D28D-218F-4F8A-B7C4-FB1FCA813655}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Has no function."/>
		<Server Name="CurrentAtMaximumDeadTime" GUID="{D7B5E856-52F4-4B1C-A5F0-24C6D9935209}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="OpenLoop Current At Maximum Deadtime Compensation (05.060)&#13;&#10;Short description Current at which maximum deadtime compensation is applied as [0.00 %]&#13;&#10;Read Only"/>
		<Server Name="CurrentLoopKiGain" GUID="{F737C78E-162B-41E7-ABFE-BD912AA90501}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A Current Loop Ki Gain 04.014&#13;&#10;Short description: Defines the current loop controller integral gain as [0.000]"/>
		<Server Name="CurrentLoopKPGain" GUID="{3CEFEBA7-E2F5-4670-987C-136248985BD1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A Current Loop Kp Gain 04.013&#13;&#10;Short description: Defines the current loop controller proportional gain as [0.00]."/>
		<Server Name="DecRate" GUID="{8375EBD1-FF23-4465-B9F7-568FEF771F7E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 02.021  Deceleration Rate 1 &#13;&#10;Short description: Defines the deceleration rate present in deceleration rate 1 as [0.0 s].&#13;&#10;"/>
		<Server Name="LowFrequencyVoltageBoost" GUID="{8D8C02E8-C453-44EC-A25D-20FF0BF6E926}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.015  Low Frequency Voltage Boost &#13;&#10;Short description: Defines the level of voltage boost &#13;&#10;at 0Hz when using a fixed V to F relationship as [0.0 %].  &#13;&#10;"/>
		<Server Name="MaximumDeadTimeComp" GUID="{4A3C5ED5-FB0D-4821-AE55-311A5AD4B42F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="OpenLoop Maximum Deadtime compensation 05.059&#13;&#10;Short description: Maximum Deadtime Compensation  as [0.000 µs]&#13;&#10;Read Only"/>
		<Server Name="MaxRefClamp" GUID="{A09D13DD-FADD-4CFA-87B7-C6C5F409A61E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 01.006  Maximum Reference Clamp &#13;&#10;Short description: Defines the maximum value for the reference as [0.00 Hz].&#13;&#10;"/>
		<Server Name="MinRefClamp" GUID="{E82F7DCF-46F5-4A6C-863D-B6C4622A3B6E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 01.007  Minimum Reference Clamp &#13;&#10;Short description: Defines the minimum value for the reference  as [0.00 Hz].&#13;&#10;"/>
		<Server Name="MotorRatedCurrent" GUID="{31DEF2BA-DE75-4580-8443-E179F29C8373}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.007  Motor Rated Current &#13;&#10;Short description: Set to the rated current rated of the motor as [0.00 A].&#13;&#10;"/>
		<Server Name="MotorRatedFrequency" GUID="{EC2B6EB6-987E-464A-BFAD-3F444AAE8F51}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.006  Motor Rated Frequency &#13;&#10;Short description: Set to the rated frequency of the motor as [0.00 Hz]. &#13;&#10;"/>
		<Server Name="MotorRatedPowerFactor" GUID="{EDD503A9-10AB-4383-9A9A-7594328AD815}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.010  Motor Rated Power Factor &#13;&#10;Short description: Set to the rated power factor of the motor as [0.00].  &#13;&#10;This value can be measured by the drive during a rotating autotune.&#13;&#10;"/>
		<Server Name="MotorRatedSpeed" GUID="{A864B820-61A3-4AE9-A891-915314B0AFAE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.008  Motor Rated Speed &#13;&#10;Short description: Set to the rated speed of the motor as [0.0 rpm]. &#13;&#10;"/>
		<Server Name="MotorRatedVoltage" GUID="{F131A5DE-E6C2-47C0-9843-C22C7F1B9940}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="Parameter 05.009  Motor Rated Voltage &#13;&#10;Short description: Set to the rated voltage of the motor as [V]. &#13;&#10;"/>
		<Server Name="SaturationBreakpoint1" GUID="{1A417EBC-829E-4DA6-91E7-9C0E1218679F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A motor saturation breakpoints Pr 05.029 &#13;&#10;Short description: Defines Saturation Breakpoint 1 within &#13;&#10;the saturation characteristic as [0.0 %]. &#13;&#10;"/>
		<Server Name="SaturationBreakpoint2" GUID="{0C0ADC1E-C733-4F33-9604-62B9FC18D260}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A motor saturation breakpoints Pr 05.062&#13;&#10;Short description: Defines Saturation Breakpoint 2 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="SaturationBreakpoint3" GUID="{D89A5503-D1D5-4193-B639-9921F996372F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A motor saturation breakpoints Pr 05.030&#13;&#10;Short description: Defines Saturation Breakpoint 3 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="SaturationBreakpoint4" GUID="{16F5D076-91A2-497B-A224-873FAAABAA17}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="RFC-A motor saturation breakpoints Pr 05.063&#13;&#10;Short description: Defines Saturation Breakpoint 4 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="StatorInductance" GUID="{F2EE823D-DD95-47C8-8088-ED869F5601F0}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="OpenLoop / RFC-A Stator Inductance 05.025&#13;&#10;Short description: Defines the inductance of the motor stator as [0.00 mH]."/>
		<Server Name="StatorResistance" GUID="{C01408FA-2AA9-4AE2-9DDA-4A9279B61EFB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="OpenLoop / RFC-A Stator Resistance 05.017&#13;&#10;Short description: Defines the resistance of the motor stator as [0.0000 ohm]"/>
		<Server Name="TransientInductance" GUID="{F2AA33BE-F816-4321-83CA-FDACE9C5E71D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File" Comment="OpenLoop / RFC-A Transient Inductance 05.024&#13;&#10;Short description: Defines the inducatance of the transient &#13;&#10;components in the motor stator as [0.000 mH] "/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="19"/>
			<SepChn Position="16"/>
			<SepChn Position="12"/>
			<SepChn Position="1"/>
		</Servers>
	</Separators>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="02.02.2021" Author="ZoePat" Company="Sigmatek" Description="first library version"/>
	</RevDoku>
</Class>
*)
FDD3000_ParametersFileRam : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	MaxRefClamp 	: SvrCh_DINT;
	MinRefClamp 	: SvrCh_DINT;
	AccRate 	: SvrCh_DINT;
	DecRate 	: SvrCh_DINT;
	MotorRatedCurrent 	: SvrCh_DINT;
	MotorRatedSpeed 	: SvrCh_DINT;
	MotorRatedVoltage 	: SvrCh_DINT;
	MotorRatedPowerFactor 	: SvrCh_DINT;
	MotorRatedFrequency 	: SvrCh_DINT;
	LowFrequencyVoltageBoost 	: SvrCh_DINT;
	StatorResistance 	: SvrCh_DINT;
	TransientInductance 	: SvrCh_DINT;
	StatorInductance 	: SvrCh_DINT;
	MaximumDeadTimeComp 	: SvrCh_DINT;
	CurrentAtMaximumDeadTime 	: SvrCh_DINT;
	CurrentLoopKPGain 	: SvrCh_DINT;
	CurrentLoopKiGain 	: SvrCh_DINT;
	SaturationBreakpoint1 	: SvrCh_DINT;
	SaturationBreakpoint3 	: SvrCh_DINT;
	SaturationBreakpoint2 	: SvrCh_DINT;
	SaturationBreakpoint4 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FDD3000_ParametersFileRam::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_FDD3000_PARAMETERSFILERAM
1$UINT, 0$UINT, (SIZEOF(::FDD3000_ParametersFileRam))$UINT, 
22$UINT, 0$UINT, 0$UINT, 
TO_UDINT(4289130556), "FDD3000_ParametersFileRam", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FDD3000_ParametersFileRam.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::FDD3000_ParametersFileRam.MaxRefClamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2280484791), "MaxRefClamp", 
(::FDD3000_ParametersFileRam.MinRefClamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1272976568), "MinRefClamp", 
(::FDD3000_ParametersFileRam.AccRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(565376633), "AccRate", 
(::FDD3000_ParametersFileRam.DecRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2782083779), "DecRate", 
(::FDD3000_ParametersFileRam.MotorRatedCurrent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1827429705), "MotorRatedCurrent", 
(::FDD3000_ParametersFileRam.MotorRatedSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1154694624), "MotorRatedSpeed", 
(::FDD3000_ParametersFileRam.MotorRatedVoltage.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3179776645), "MotorRatedVoltage", 
(::FDD3000_ParametersFileRam.MotorRatedPowerFactor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3627548735), "MotorRatedPowerFactor", 
(::FDD3000_ParametersFileRam.MotorRatedFrequency.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2125789213), "MotorRatedFrequency", 
(::FDD3000_ParametersFileRam.LowFrequencyVoltageBoost.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1097702356), "LowFrequencyVoltageBoost", 
(::FDD3000_ParametersFileRam.StatorResistance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2658549821), "StatorResistance", 
(::FDD3000_ParametersFileRam.TransientInductance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2172931522), "TransientInductance", 
(::FDD3000_ParametersFileRam.StatorInductance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(381380844), "StatorInductance", 
(::FDD3000_ParametersFileRam.MaximumDeadTimeComp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1552366758), "MaximumDeadTimeComp", 
(::FDD3000_ParametersFileRam.CurrentAtMaximumDeadTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(425687078), "CurrentAtMaximumDeadTime", 
(::FDD3000_ParametersFileRam.CurrentLoopKPGain.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3906162718), "CurrentLoopKPGain", 
(::FDD3000_ParametersFileRam.CurrentLoopKiGain.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2233705965), "CurrentLoopKiGain", 
(::FDD3000_ParametersFileRam.SaturationBreakpoint1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1697189204), "SaturationBreakpoint1", 
(::FDD3000_ParametersFileRam.SaturationBreakpoint3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2334616696), "SaturationBreakpoint3", 
(::FDD3000_ParametersFileRam.SaturationBreakpoint2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(4229979374), "SaturationBreakpoint2", 
(::FDD3000_ParametersFileRam.SaturationBreakpoint4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(356776411), "SaturationBreakpoint4", 
//Clients:
END_FUNCTION


#define USER_CNT_FDD3000_ParametersFileRam 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FDD3000_ParametersFileRam] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FDD3000_ParametersFileRam::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FDD3000_ParametersFileRam, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxRefClamp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxRefClamp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MinRefClamp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MinRefClamp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AccRate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF AccRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DecRate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DecRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedCurrent.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedCurrent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedVoltage.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedVoltage.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedPowerFactor.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedPowerFactor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedFrequency.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedFrequency.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LowFrequencyVoltageBoost.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF LowFrequencyVoltageBoost.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StatorResistance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF StatorResistance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TransientInductance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TransientInductance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StatorInductance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF StatorInductance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaximumDeadTimeComp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaximumDeadTimeComp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentAtMaximumDeadTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentAtMaximumDeadTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentLoopKPGain.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentLoopKPGain.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentLoopKiGain.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentLoopKiGain.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint4.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
