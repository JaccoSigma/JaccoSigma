//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define _CANOPENLSSCONTROL_MAX_BAUDRATE                       7 //highest number for sigmatek can baudrate
#define _CANOPENLSSCONTROL_WAIT4COMMANDMINCHANGETIME        600 //wait time for node change -
#define _CANOPENLSSCONTROL_WAIT4COMMANDADDCHANGETIME      10000 //wait time for node change which is divided with bitrate
#define _CANOPENLSSCONTROL_SETBAUDRATETIMEOUT             10000 //timeout for change of baudrate
#define _CANOPENLSSCONTROL_INQUIRERETRYS                      1 //retries for read of device infos

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_CanOpenLSSControl"
	Revision           = "1.0"
	GUID               = "{2E408D28-B666-4EF7-9FE1-7A2A8FC8BFEB}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(630,120)"
	Comment            = "This class is used for handling of Layer Setting Service (LSS).">
	<Channels>
		<Server Name="ActSearchBitrate" GUID="{57E2F883-2EC0-4630-A2A0-E5A71E009CBE}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows actual search bitrate."/>
		<Server Name="ClassSvr" GUID="{2E729B2D-69DE-4513-B88A-75BDFD621B2E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="ClassSvr has no function."/>
		<Server Name="NodeID" GUID="{661DCE6A-BB09-4F3C-9ADB-BC9A5FCB7D7D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows node id of selected node."/>
		<Server Name="ProductCode" GUID="{19A11B38-1810-4AED-8A41-1ED01508B09C}" Visualized="true" Alarm="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="If modul is found the Product Code is displayed."/>
		<Server Name="RetCode" GUID="{2B33783F-13AA-4217-90D9-C985D5EA5D40}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows return code of LSS functions."/>
		<Server Name="RevisionNumber" GUID="{A41C3802-6F11-4472-9880-3C28406782D1}" Visualized="true" Alarm="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="If modul is found the Revision Number is displayed."/>
		<Server Name="SerialNumber" GUID="{88899417-2BCD-455E-B162-5398D4EAC506}" Visualized="true" Alarm="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="If modul is found the Serial Number is displayed."/>
		<Server Name="VendorID" GUID="{E433EC20-1EEF-44A7-A9AD-AA832191036B}" Visualized="true" Alarm="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="If modul is found the Vendor ID is displayed."/>
		<Client Name="toCanOpenMng" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="02.02.2021" Author="ZoePat" Company="Sigmatek" Description="first library version"/>
	</RevDoku>
</Class>
*)
_CanOpenLSSControl : CLASS
	TYPE
	  eSSWAutoBaud :
	  (
	    _IdleAutoBaud,
	    _SetBaudRate,
	    _SwitchGlobalStateConfig,
	    _InquireNodeInfo,
	    _GetInquiredNodeInfo,
	    _Wait4GetInquiredNodeInfo,
	    _SetNodeID,
	    _SetBitTiming,
	    _ActivateNewBitTiming,
	    _Wait4NewBitTiming,
	    _SwitchGlobalStateOpMode,
	    _Wait4SwitchGlobalState,
	    _ResetNode,
	    _Wait4ResetNode,
	    _QuitNodeError,
	    _FinishedAutoBaud,
	    _ErrorAutoBaud
	  )$UDINT;
#pragma pack(push, 1)
	  tsLSSAutoBaudVars : STRUCT
	    SSWAutoBaud : eSSWAutoBaud;
	    SSWAutoBaudErrorStep : eSSWAutoBaud;
	    ActBaudrate : USINT;
	    EndBaudrate : USINT;
	    udWaitNodeTime : UDINT;
	    usSearchRetry : USINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	VendorID 	: SvrCh_UDINT;
	ProductCode 	: SvrCh_UDINT;
	RevisionNumber 	: SvrCh_UDINT;
	SerialNumber 	: SvrCh_UDINT;
	ActSearchBitrate 	: SvrCh_DINT;
	NodeID 	: SvrCh_UDINT;
	RetCode 	: SvrCh_DINT;
  //Clients:
	toCanOpenMng 	: CltChCmd__CanOpenMng;
  //Variables:
		sLSSAutoBaudVars 	: tsLSSAutoBaudVars;
		LSSErrorCode 	: _CanOpenLSS::t_LSS_ErrorCode;
		udStartTime 	: UDINT;
		udStartSetBaudrateTime 	: UDINT;
  //Functions:
				//! <Function Comment="Method to configure CANopen Node." Name="LSSNodeConfig"/>
	FUNCTION GLOBAL LSSNodeConfig
		VAR_INPUT
			usNodeID 	: USINT;			//! <Variable Comment="Set Node ID for Node config.&#13;&#10;Value range is 1-127." Name="LSSNodeConfig.usNodeID"/>
			usBaudRate 	: USINT;			//! <Variable Comment="Set Baudrate for Node config&#13;&#10;0: Baudrate := 615&#13;&#10;1: Baudrate := 500&#13;&#10;2: Baudrate := 250&#13;&#10;3: Baudrate := 125&#13;&#10;4: Baudrate := 100&#13;&#10;5: Baudrate := 50&#13;&#10;6: Baudrate := 20&#13;&#10;7: Baudrate := 1000" Name="LSSNodeConfig.usBaudRate"/>
		END_VAR
		VAR_OUTPUT
			dRetCode 	: iprStates;			//! <Variable Comment="return value of function:&#13;&#10;READY .. ok&#13;&#10;BUSY    .. function is busy&#13;&#10;ERROR .. an error occured" Name="LSSNodeConfig.dRetCode"/>
		END_VAR;
				//! <Function Comment="Method to get Sigmatek Index from baudrate." Name="Baudrate2SigmatekIndex"/>
	FUNCTION GLOBAL Baudrate2SigmatekIndex
		VAR_INPUT
			Baudrate 	: UINT;			//! <Variable Comment="Baudrate:&#13;&#10;615: Sigmatek Index := 0 &#13;&#10;500: Sigmatek Index := 1 &#13;&#10;250: Sigmatek Index := 2 &#13;&#10;125: Sigmatek Index := 3 &#13;&#10;100: Sigmatek Index := 4 &#13;&#10;50: Sigmatek Index := 5 &#13;&#10;20: Sigmatek Index := 6 &#13;&#10;1000: Sigmatek Index := 7 " Name="Baudrate2SigmatekIndex.Baudrate"/>
		END_VAR
		VAR_OUTPUT
			Index 	: USINT;			//! <Variable Comment="Sigmatek Index&#13;&#10;0: Baudrate := 615&#13;&#10;1: Baudrate := 500&#13;&#10;2: Baudrate := 250&#13;&#10;3: Baudrate := 125&#13;&#10;4: Baudrate := 100&#13;&#10;5: Baudrate := 50&#13;&#10;6: Baudrate := 20&#13;&#10;7: Baudrate := 1000" Name="Baudrate2SigmatekIndex.Index"/>
		END_VAR;
				//! <Function Comment="Methode to get baudrate from Sigmatek Index" Name="SigmatekIndex2Baudrate"/>
	FUNCTION GLOBAL SigmatekIndex2Baudrate
		VAR_INPUT
			Index 	: USINT;			//! <Variable Comment="Sigmatek Index&#13;&#10;0: Baudrate := 615&#13;&#10;1: Baudrate := 500&#13;&#10;2: Baudrate := 250&#13;&#10;3: Baudrate := 125&#13;&#10;4: Baudrate := 100&#13;&#10;5: Baudrate := 50&#13;&#10;6: Baudrate := 20&#13;&#10;7: Baudrate := 1000" Name="SigmatekIndex2Baudrate.Index"/>
		END_VAR
		VAR_OUTPUT
			Baudrate 	: UINT;			//! <Variable Comment="Baudrate:&#13;&#10;615: Sigmatek Index := 0 &#13;&#10;500: Sigmatek Index := 1 &#13;&#10;250: Sigmatek Index := 2 &#13;&#10;125: Sigmatek Index := 3 &#13;&#10;100: Sigmatek Index := 4 &#13;&#10;50: Sigmatek Index := 5 &#13;&#10;20: Sigmatek Index := 6 &#13;&#10;1000: Sigmatek Index := 7 " Name="SigmatekIndex2Baudrate.Baudrate"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _CanOpenMng


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _CanOpenLSSControl::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__CANOPENLSSCONTROL
1$UINT, 0$UINT, (SIZEOF(::_CanOpenLSSControl))$UINT, 
8$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3310590118), "_CanOpenLSSControl", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_CanOpenLSSControl.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::_CanOpenLSSControl.VendorID.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2218535187), "VendorID", 
(::_CanOpenLSSControl.ProductCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1465053077), "ProductCode", 
(::_CanOpenLSSControl.RevisionNumber.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3658392522), "RevisionNumber", 
(::_CanOpenLSSControl.SerialNumber.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3922312216), "SerialNumber", 
(::_CanOpenLSSControl.ActSearchBitrate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3693203277), "ActSearchBitrate", 
(::_CanOpenLSSControl.NodeID.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1813968035), "NodeID", 
(::_CanOpenLSSControl.RetCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3689207556), "RetCode", 
//Clients:
(::_CanOpenLSSControl.toCanOpenMng.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(712928374), "toCanOpenMng", TO_UDINT(2879897165), "_CanOpenMng", 1$UINT, 11$UINT, 
END_FUNCTION


#define USER_CNT__CanOpenLSSControl 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__CanOpenLSSControl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _CanOpenLSSControl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION GLOBAL _CanOpenLSSControl::LSSNodeConfig
	VAR_INPUT
		usNodeID 	: USINT;
		usBaudRate 	: USINT;
	END_VAR
	VAR_OUTPUT
		dRetCode 	: iprStates;
	END_VAR
  VAR
  	dTempRetcode : iprStates;
  END_VAR

  dRetCode := BUSY;
  
  if (ops.tAbsolute-udStartTime) < sLSSAutoBaudVars.udWaitNodeTime then
    return;
  end_if;
  
  case sLSSAutoBaudVars.SSWAutoBaud of
    //*************************************************************
  	eSSWAutoBaud::_IdleAutoBaud:
      //set startbaudrate for device search
      sLSSAutoBaudVars.ActBaudrate := usBaudRate;
      if usBaudRate = 0 then
        sLSSAutoBaudVars.EndBaudrate := _CANOPENLSSCONTROL_MAX_BAUDRATE;
      else
        sLSSAutoBaudVars.EndBaudrate := usBaudRate - 1;
      end_if;
      
      //set node to stop to be able to configure it
      toCanOpenMng.SetNmt(Para:=CO_STOPREMOTENODE, ID:=usNodeID);
      
      //reset device infos
      VendorID        := 0;
      ProductCode     := 0;
      RevisionNumber  := 0;
      SerialNumber    := 0;
      NodeID          := 0;
      
      udStartSetBaudrateTime := ops.tAbsolute;
      sLSSAutoBaudVars.udWaitNodeTime       := _CANOPENLSSCONTROL_WAIT4COMMANDMINCHANGETIME+(_CANOPENLSSCONTROL_WAIT4COMMANDADDCHANGETIME/SigmatekIndex2Baudrate(Index:=sLSSAutoBaudVars.ActBaudrate));
      sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
      sLSSAutoBaudVars.SSWAutoBaud          := _SetBaudRate;
            
    //*************************************************************
  	eSSWAutoBaud::_SetBaudRate:
      RetCode := toCanOpenMng.IFChangeBaudrate(Baudrate:=sLSSAutoBaudVars.ActBaudrate);
      ActSearchBitrate := SigmatekIndex2Baudrate(Index:=sLSSAutoBaudVars.ActBaudrate);
      if RetCode = 0 then
        udStartTime                     := ops.tAbsolute;
        sLSSAutoBaudVars.udWaitNodeTime := _CANOPENLSSCONTROL_WAIT4COMMANDMINCHANGETIME+(_CANOPENLSSCONTROL_WAIT4COMMANDADDCHANGETIME/SigmatekIndex2Baudrate(Index:=sLSSAutoBaudVars.ActBaudrate));
        sLSSAutoBaudVars.SSWAutoBaud    := _SwitchGlobalStateConfig;
      else  
        //retry set baudrate
        udStartTime := ops.tAbsolute;
        if (ops.tAbsolute-udStartSetBaudrateTime) >= _CANOPENLSSCONTROL_SETBAUDRATETIMEOUT then        
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
      end_if;      
      
    //*************************************************************
  	eSSWAutoBaud::_SwitchGlobalStateConfig:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        RetCode := toCanOpenMng.LSSSwitchStateGlobal(NewState:=1);
        if RetCode = 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _InquireNodeInfo;
        else  
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;
    
    //*************************************************************
  	eSSWAutoBaud::_InquireNodeInfo:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        RetCode := toCanOpenMng.LSSInquireDeviceInfos();
        if RetCode = 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _GetInquiredNodeInfo;
        else  
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;    
    
    //*************************************************************
  	eSSWAutoBaud::_GetInquiredNodeInfo:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        RetCode := toCanOpenMng.LSSGetInquiredDeviceInfos(  pVendorID:=#VendorID
                                                          , pProductCode:=#ProductCode
                                                          , pRevisionNumber:=#RevisionNumber
                                                          , pSerialNumber:=#SerialNumber
                                                          , pNodeID:=#NodeID$USINT);
                                                          
        if RetCode = 0 then
          //udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _Wait4GetInquiredNodeInfo;
        else          
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;
      
    //*************************************************************
  	eSSWAutoBaud::_Wait4GetInquiredNodeInfo:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
      
        if VendorID <> 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _SetNodeID;
        else
          if sLSSAutoBaudVars.usSearchRetry >= _CANOPENLSSCONTROL_INQUIRERETRYS then
            //reset retry variable
            sLSSAutoBaudVars.usSearchRetry := 0;
            if sLSSAutoBaudVars.ActBaudrate <> sLSSAutoBaudVars.EndBaudrate then
              //increment to next baudrate
              sLSSAutoBaudVars.ActBaudrate   += 1;   
              //set next baudrate to check for node
              if sLSSAutoBaudVars.ActBaudrate > _CANOPENLSSCONTROL_MAX_BAUDRATE then
                sLSSAutoBaudVars.ActBaudrate := 0;
              end_if;
              udStartTime := ops.tAbsolute;
              udStartSetBaudrateTime       := ops.tAbsolute;
              sLSSAutoBaudVars.SSWAutoBaud := _SetBaudRate;
            else    
              //last baudrate reached but no answer
              sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
              sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
            end_if;
          else //retry search of device            
            udStartTime                  := ops.tAbsolute;
            udStartSetBaudrateTime       := ops.tAbsolute;
            sLSSAutoBaudVars.usSearchRetry += 1;
            sLSSAutoBaudVars.SSWAutoBaud   := _SwitchGlobalStateConfig;          
          end_if;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;
    
    //*************************************************************
  	eSSWAutoBaud::_SetNodeID:
      if usNodeID > 0 & usNodeID <= 127 then
        RetCode := toCanOpenMng.LSSConfigureNodeID(NewNodeID:=usNodeID, AutoStoreConfig:=FALSE);
        if RetCode = 0 then
          udStartSetBaudrateTime       := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _SetBitTiming;
        else
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
        end_if;
      else
        sLSSAutoBaudVars.SSWAutoBaud := _SetBitTiming;
      end_if;
    
    //*************************************************************
  	eSSWAutoBaud::_SetBitTiming:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        if usBaudRate <= _CANOPENLSSCONTROL_MAX_BAUDRATE then
          RetCode := toCanOpenMng.LSSConfigureBitTiming(NewBaudrate:=SigmatekIndex2Baudrate(Index:=usBaudRate));
          if RetCode = 0 then
            udStartSetBaudrateTime       := ops.tAbsolute;
            sLSSAutoBaudVars.SSWAutoBaud := _ActivateNewBitTiming;
          else
            sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
            sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
          end_if;
        else
          sLSSAutoBaudVars.SSWAutoBaud := _FinishedAutoBaud;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;
      
    //*************************************************************
  	eSSWAutoBaud::_ActivateNewBitTiming:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        RetCode := toCanOpenMng.LSSActivateBitTiming(SwitchDelay:=200);
        if RetCode = 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _SwitchGlobalStateOpMode;
        else  
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;      
    
    //*************************************************************
  	eSSWAutoBaud::_SwitchGlobalStateOpMode:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        RetCode := toCanOpenMng.LSSSwitchStateGlobal(NewState:=0);
        if RetCode = 0 then
          sLSSAutoBaudVars.udWaitNodeTime := 800;
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _Wait4SwitchGlobalState;
        else  
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;
      
    //*************************************************************
  	eSSWAutoBaud::_Wait4SwitchGlobalState:
      udStartTime                  := ops.tAbsolute;
      sLSSAutoBaudVars.SSWAutoBaud := _Wait4NewBitTiming;      
    
    //*************************************************************
  	eSSWAutoBaud::_Wait4NewBitTiming:
      dTempRetcode := toCanOpenMng.LSSGetStatus(pErrorCode:=#LSSErrorCode);
      if dTempRetcode = READY then
        //change baudrate to actual set baudrate
        RetCode := toCanOpenMng.IFChangeBaudrate(Baudrate:=usBaudRate);
        if RetCode = 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _ResetNode;
        else  
          //retry set baudrate
          udStartTime := ops.tAbsolute;
          if (ops.tAbsolute-udStartSetBaudrateTime) >= _CANOPENLSSCONTROL_SETBAUDRATETIMEOUT then        
            sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
            sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
          end_if;
        end_if;
      elsif dTempRetcode <> BUSY then
        sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
        sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;        
      end_if;      
      
    //*************************************************************
  	eSSWAutoBaud::_ResetNode:
        RetCode := toCanOpenMng.SetNmt(Para:=CO_RESETNODE, ID:=0);
        if RetCode = 0 then
          udStartTime := ops.tAbsolute;
          sLSSAutoBaudVars.SSWAutoBaud := _Wait4ResetNode;
        else  
          sLSSAutoBaudVars.SSWAutoBaudErrorStep := sLSSAutoBaudVars.SSWAutoBaud;
          sLSSAutoBaudVars.SSWAutoBaud := _ErrorAutoBaud;
        end_if;
        
    //*************************************************************
  	eSSWAutoBaud::_Wait4ResetNode:
      udStartTime := ops.tAbsolute;
      sLSSAutoBaudVars.udWaitNodeTime := 500;
      sLSSAutoBaudVars.SSWAutoBaud    := _QuitNodeError;      
      
    //*************************************************************
  	eSSWAutoBaud::_QuitNodeError:
      udStartTime := ops.tAbsolute;
      //must be done at derived class of _CanOpenDS301
      sLSSAutoBaudVars.SSWAutoBaud := _FinishedAutoBaud;
      
    //*************************************************************
  	eSSWAutoBaud::_FinishedAutoBaud:      
      dRetCode := READY;
      sLSSAutoBaudVars.SSWAutoBaud := _IdleAutoBaud;      
    
    //*************************************************************
  	eSSWAutoBaud::_ErrorAutoBaud:
      dRetCode := ERROR;
      //set old baudrate in case of an error
      toCanOpenMng.IFChangeBaudrate(Baudrate:=usBaudRate);
      sLSSAutoBaudVars.SSWAutoBaud := _IdleAutoBaud;      
      
  end_case;

END_FUNCTION


FUNCTION GLOBAL _CanOpenLSSControl::Baudrate2SigmatekIndex
	VAR_INPUT
		Baudrate 	: UINT;
	END_VAR
	VAR_OUTPUT
		Index 	: USINT;
	END_VAR

  case Baudrate of
    1000: Index := 7;
     615: Index := 0; // not supported by CANopen
     500: Index := 1;
     250: Index := 2;
     125: Index := 3;
     100: Index := 4; // not officially supported by CANopen
      50: Index := 5;
      20: Index := 6;
  else
    Index := 16#FF;
  end_case;

END_FUNCTION


FUNCTION GLOBAL _CanOpenLSSControl::SigmatekIndex2Baudrate
	VAR_INPUT
		Index 	: USINT;
	END_VAR
	VAR_OUTPUT
		Baudrate 	: UINT;
	END_VAR

  case Index of
    0: Baudrate := 615;
    1: Baudrate := 500;
    2: Baudrate := 250;
    3: Baudrate := 125;
    4: Baudrate := 100;
    5: Baudrate := 50;
    6: Baudrate := 20;
    7: Baudrate := 1000;
  else
       Baudrate := 16#FFFF;
  end_case;

END_FUNCTION