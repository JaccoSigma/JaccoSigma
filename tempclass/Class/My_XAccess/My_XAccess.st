//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "My_XAccess"
	Revision           = "0.0"
	GUID               = "{D0DDE11A-0944-4061-9550-E8A85F927FCF}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="OthersHadAEvent" GUID="{F14EB924-A578-48CF-B293-F34A95216D58}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="WeHadAEvent" Required="true" Internal="false"/>
	</Channels>
	<Network Name="My_XAccess">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{BC53BFA0-586F-4004-9B81-B0F2C0D61398}"
				Class      = "_XAccess"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Key1"/>
					<Server Name="Key2"/>
					<Server Name="Key3"/>
					<Server Name="Level"/>
					<Server Name="Server0"/>
					<Server Name="TimeOut"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.TimeOut" Destination="_base.TimeOut" Vertices="(690,270),(518,270),"/>
			<Connection Source="this.Level" Destination="_base.Level" Vertices="(690,330),(518,330),"/>
			<Connection Source="this.Key1" Destination="_base.Key1" Vertices="(690,390),(518,390),"/>
			<Connection Source="this.Key2" Destination="_base.Key2" Vertices="(690,450),(518,450),"/>
			<Connection Source="this.Key3" Destination="_base.Key3" Vertices="(690,510),(518,510),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _XAccess

My_XAccess : CLASS
: _XAccess
  //Servers:
	OthersHadAEvent 	: SvrCh_DINT;
  //Clients:
	WeHadAEvent 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL IF_WindowRun
		VAR_INPUT
			whoami 	: ^_WHOAMI;
			pic 	: ^void;
			event 	: ^_EVENT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB My_XAccess::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MY_XACCESS
0$UINT, 0$UINT, (SIZEOF(::My_XAccess))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2370836608), "My_XAccess", //Class
TO_UDINT(3192771746), "_XAccess", 0$UINT, 1$UINT, //Baseclass
//Servers:
(::My_XAccess.OthersHadAEvent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3026055372), "OthersHadAEvent", 
//Clients:
(::My_XAccess.WeHadAEvent.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3161743722), "WeHadAEvent", 
END_FUNCTION


#define USER_CNT_My_XAccess 46

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_My_XAccess] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION My_XAccess::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _XAccess::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Global::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Global::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_My_XAccess;
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #IF_WindowRun();

#pragma warning (default : 74)
	_Global::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Global::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	OthersHadAEvent.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF OthersHadAEvent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL My_XAccess::IF_WindowRun
	VAR_INPUT
		whoami 	: ^_WHOAMI;
		pic 	: ^void;
		event 	: ^_EVENT;
	END_VAR
  
  if(event^.ftype <> _EVENT_NONE) then
    InternTime := to_dint(Ops.tAbsolute);
    WeHadAEvent.Write(input:=1);
  elsif OthersHadAEvent <> 0 then
    InternTime := to_dint(Ops.tAbsolute);
    OthersHadAEvent := 0;
  else
    TimeOut := TO_DINT(Ram0.Read()); 
    if(TimeOut > 10000) then
      if((Ops.tAbsolute$DINT - InternTime) >= TimeOut) then
	      Server0 := 0; 
		    CalculateLevel(); 
	    end_if; 
    end_if; 
  end_if; 

END_FUNCTION //VIRTUAL GLOBAL _XAccess::IF_WindowRun