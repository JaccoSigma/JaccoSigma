//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Bridge"
	Revision           = "1.0"
	GUID               = "{F609FAAA-9C55-11D5-B925-0010609208D7}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Bridge\bridge.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "V1.0&#13;&#10;Claas reads the first Client &#13;&#10;and writes the value on the next.&#13;&#10;To use it turn on the cyclic time">
	<Channels>
		<Server Name="dummy" GUID="{F609FAAB-9C55-11D5-B925-0010609208D7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="no use"/>
		<Client Name="Client_Read" Required="false" Internal="false" Comment="reading Client"/>
		<Client Name="Client_Write" Required="false" Internal="false" Comment="Client_Write = Client_Read"/>
	</Channels>
</Class>
*)
Bridge : CLASS
  //Servers:
	dummy 	: SvrChCmd_DINT;
  //Clients:
	Client_Read 	: CltCh_DINT;
	Client_Write 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment=" ******************************************************************&#13;&#10;   Klasse liest den ersten Client und schreibt den zweiten Client&#13;&#10; ******************************************************************&#13;&#10;    erstellt    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                           CYWORK Funktion&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;            Class reads the first Client and writes the&#13;&#10;                          next Client&#13;&#10; ******************************************************************&#13;&#10;    created    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                    Operation of CyWork Function&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10;" Name="CyWork"/>
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT := EAX;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Bridge::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_BRIDGE
1$UINT, 0$UINT, (SIZEOF(::Bridge))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2575353881), "Bridge", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Bridge.dummy.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3097505935), "dummy", 
//Clients:
(::Bridge.Client_Read.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(84492265), "Client_Read", 
(::Bridge.Client_Write.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1285073614), "Client_Write", 
END_FUNCTION


#define USER_CNT_Bridge 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Bridge] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Bridge::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Bridge, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.CyWork		:= #CyWork();
	dummy.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF dummy.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
C5186F68F342212FF2412A957A14F99564F52EFE430F93A996F65E62449854E6265A7E8C3F70D076F31CA615B1249D2BC64C5017CE437CFCAEDC3CF63C9C9371A928C1CDD40037E7FF819637A70381A1C95ACFFAD91B7046A49FAD246BB64BC82460F5EF
B049F395460DA15ACAF78811B569158CF98B720B19A58331D522962C2E1531EB734B7F9E1D917F96775F094D3205D807F627839BF53ACDCBDA41950AE6628EF7D23D47902F7DB59FC510A1FB2778196138E39CEF08929642007315391FC3DD33E515F4DF
B03E0F119077BFD64C79D5F6BE006598BB7A99C363CC5A08F775C09A88BBB5597A3799C23520B8E0A0B8415C7B295A63058B508A23B2F699ECBEC170220C0426E871D9B0F3F9BBA37FB3903B5B4A1B225816142280CF84E36CCEC2E823298E422F180C13
E6F5D71548A7593B9C3B79192BA28DBBAA4A8207AABCA33FBC343E37FC8F34B0BC3C43C156B8ECF89CC3A149309CA0CF064325160FDAB1405A163581DD4FE7FE2829161CF693A906A1B05C51D179CCD58876DADAA363A044AF2920BEAEC851728BE8B986
728B8744420CEEE81CB4EF9C0F1A3611BFDD950673D584E6A4224F4F0B0FD4CF1ED1078E332F6B0DD05DB5F8C594D850B8441E37CA2524BFED262773D3E1C5CF17B0C00F080D41E839FC240EAAA5A577F95A7F97984E8E7F61D702504D1CEA575DDCDDB4
6015DA8AC173E8B034381985CA78A3713B7DD06DC9B8A25672EF86944B40FA71F2AD9FC9E31F72B6E84EF7ACAD3495083EF67533045C1A21C265CAE2DDA5726B7A0BD41212A89338B12CAA5A93A56511DB97BD3DF5C3270F542434393CCB9C840ED6276E
E114D7CB984D9D9585FDE3C33375F29E28A623BB89C8F64A881549BDCE2346D5C36289F6FAAA5164EF2A83F6979AE60F014127FA6F93A76E224A20E108C5D29D9EFC9634C10FADCE044388AA4C5ED210454777BA5CD14DA5B7E4677D145E1EAEDA652DAB
1E420E05C8E483ECEB0D0B19DD776780EAF2EEA112CC4B49197E22FC7BA722D69E745821F6BC894EE66734C11D70B91BA3FB06FA283C9FA48D3FE798550B792198547D29AF0E628C928FAA6370E15E123EC5CFE804C40C8DB4A1AB11BC4B4C46714EF325
971008E2C761AAF648784BC89BE078E4B5DD311EB5D3B137079CE4F9C356B1F66DC2F752CB756655CA2E30D07350DD0C859D2C7A207D9A0001FF15198CB47ACFC36AB5DB2267A07D7B8E8F2F3C30A83656B85FD101E6397A4B72C6DF43D64370CDA128B6
65306D230DFE110CF254077F57A846E48F0702EDB32BC731381871EBD081EE128A305D6351B2210D698CF1A785B9A53877D7C8F3CD1553802CF762353292F94357868D0DC53610DD283EFB99BE0AC1AA3565B63299F50EC6A016CAF7C364B150F8B20B3D
4AAE659489E574057D8E7478F24EADCF9E66EEB2EA0715FC1A2FAF00BE00B315D31716A5E701072E36A9C46DFBCAA311727C3621B4F5067B26971F5BDA2FD47DBA68834E3C081911C1FB90832565E6F0A347F0578ABAD4FBE0DD7AFEB0D0078B17E78AEC
E3F18E49618E6FF3DC0A8310492D14A2F7AE7DA9825A2B474217D39E97687A0D484F333AF82F90B103AA60EDE8A8C8B8BB22F75499CE5ADB79ACB7EB3AB3C2B7F4E6A6BA68822307ED4C80A88C0D72491E834566DCB53C46CF926CD83DFEB6E3E413085E
766A01DD9913D704CF55CB74BC190F3FA66B45EB5C34EF33EA5CBE1A15A7DD06B7E867FBF8FA9276EF80C802D76F94A11CFC3E5F92C953EB472A92F40B964D14CE2C1FC38FBA2534D930A21F95B01584CA9FF6EC1760FCF64F53FBCCA803A9E683BBC10D
9DAA7E978E5C130DDBC803AF763F473B5B2B7B5A3AD59E1A94B740F2C6F6C8B1E6E2CB40968ED929EE0C838AA150B1B62783FA997D7DF23F02694F169958C73E625135398DA2FE2E7B7169A09EA7F1EA8FE52033185632276B63E27DF173078F4927712D
CF528CA1259102F65633CC7D2F8A30A39CDFFB9057A695DDA1432D8A0F2BD349431C42CD4C78CD059F91B85E32BF3D762E7689E76D14740C8949DE9AC9715152C282A2083BBA024F7FB012A7C5B9D459FC7A7D9467FB4658B338CA3E30F44D028F12C9CC
B04B358586DBD1F32CC59B7F78DF963B69B690AED593C4CB8FFF28420507ED3D7A086438A0506F825244980E59C73015FA00317E36C4A59B0163F26CE3D31BE029FC3DEE056A67ECB2F8F359F73ACC81E806797C