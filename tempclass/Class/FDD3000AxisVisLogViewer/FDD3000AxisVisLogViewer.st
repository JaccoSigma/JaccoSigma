//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\FDD3000_Parameters\FDD3000_NewInstIF.h"
#include "..\..\Class\FDD3000AxisVis\FDD3000AxisVis.h"

(*!
<Class
	Name               = "FDD3000AxisVisLogViewer"
	Revision           = "1.0"
	GUID               = "{5A3B5717-3D7E-4961-A128-68341D84B022}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(448,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{FB497102-1BB2-404A-9EB9-C909F556998D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogCmd" GUID="{2FEA3899-DB61-4212-9EED-2F09186003EB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogIndexVisu" GUID="{A186D7B8-DE93-4E53-ACAE-2C55D1874B57}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogRTStamp" GUID="{8EC3F067-573B-433B-B33C-53507F75DA4E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTimeH" GUID="{95F154BA-A841-473E-BB26-29F901F3C7E0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTimeM" GUID="{6B2AB427-422D-418D-9FD9-45537A7B128A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTimeMS" GUID="{EDB46DF0-CE99-405F-8007-9B0FBED9289D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTimeS" GUID="{FD62050B-E8A4-4326-9EDF-38137CDDFA95}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTimeStamp" GUID="{A0D5D969-CA1E-4649-89DB-23F9F8BD93CD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogTripCode" GUID="{1F271FCB-89F7-43BB-AE9B-DB241028A27F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="LogValid" GUID="{13DE5C28-925D-42B9-8E4A-E1BA37D5754C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="coFDD3000" Required="true" Internal="false"/>
		<Client Name="LogIndex" Required="true" Internal="false"/>
		<Client Name="LogOffset" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\FDD3000_Parameters\FDD3000_NewInstIF.h" Include="true"/>
			<File Path=".\Class\FDD3000AxisVis\FDD3000AxisVis.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="02.02.2021" Author="ZoePat" Company="Sigmatek" Description="first library version"/>
	</RevDoku>
</Class>
*)
FDD3000AxisVisLogViewer : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	LogIndexVisu 	: SvrCh_DINT;
	LogCmd 	: SvrCh__CommandList_PTofCls_FDD3000AxisVis;
	LogTripCode 	: SvrCh__LogData_TripCode_PTofCls_FDD3000AxisVis;
	LogTimeStamp 	: SvrCh_UDINT;
	LogTimeH 	: SvrCh_UDINT;
	LogTimeM 	: SvrCh_UDINT;
	LogTimeS 	: SvrCh_UDINT;
	LogTimeMS 	: SvrCh_UDINT;
	LogRTStamp 	: SvrCh_UDINT;
	LogValid 	: SvrCh_DINT;
  //Clients:
	coFDD3000 	: CltChCmd_DINT;
	LogIndex 	: CltCh_DINT;
	LogOffset 	: CltCh_DINT;
  //Variables:
		ptrLogFile 	: ^FDD3000AxisVis::_LogFile;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL LogIndexVisu::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LogCmd::Read
		VAR_OUTPUT
			output (EAX) 	: FDD3000AxisVis::_CommandList;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FDD3000AxisVisLogViewer::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_FDD3000AXISVISLOGVIEWER
1$UINT, 0$UINT, (SIZEOF(::FDD3000AxisVisLogViewer))$UINT, 
11$UINT, 3$UINT, 0$UINT, 
TO_UDINT(2098027038), "FDD3000AxisVisLogViewer", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FDD3000AxisVisLogViewer.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::FDD3000AxisVisLogViewer.LogIndexVisu.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3309611791), "LogIndexVisu", 
(::FDD3000AxisVisLogViewer.LogCmd.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1401046000), "LogCmd", 
(::FDD3000AxisVisLogViewer.LogTripCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1999739866), "LogTripCode", 
(::FDD3000AxisVisLogViewer.LogTimeStamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1886855569), "LogTimeStamp", 
(::FDD3000AxisVisLogViewer.LogTimeH.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(499787074), "LogTimeH", 
(::FDD3000AxisVisLogViewer.LogTimeM.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1839256013), "LogTimeM", 
(::FDD3000AxisVisLogViewer.LogTimeS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2544889006), "LogTimeS", 
(::FDD3000AxisVisLogViewer.LogTimeMS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3319329055), "LogTimeMS", 
(::FDD3000AxisVisLogViewer.LogRTStamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(34771104), "LogRTStamp", 
(::FDD3000AxisVisLogViewer.LogValid.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(109000669), "LogValid", 
//Clients:
(::FDD3000AxisVisLogViewer.coFDD3000.pCh)$UINT, _CH_CLT_CMD$UINT, 2#0000000000000010$UINT, TO_UDINT(3500194077), "coFDD3000", 
(::FDD3000AxisVisLogViewer.LogIndex.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(168518947), "LogIndex", 
(::FDD3000AxisVisLogViewer.LogOffset.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3079590910), "LogOffset", 
END_FUNCTION


#define USER_CNT_FDD3000AxisVisLogViewer 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FDD3000AxisVisLogViewer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FDD3000AxisVisLogViewer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FDD3000AxisVisLogViewer, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LogIndexVisu.pMeth			:= StoreMethod( #LogIndexVisu::Read(), #M_NO_F() );
	IF LogIndexVisu.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LogCmd.pMeth			:= StoreMethod( #LogCmd::Read(), #M_NO_F() );
	IF LogCmd.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL FDD3000AxisVisLogViewer::Init
  VAR  	
    MyPara 	 : CmdStruct;
    MyResult : Results;
    dRetcode : iprStates;
  END_VAR

  if _FirstScan then
    MyPara.uiCmd := _FDD3000_IF_LOGDATA_GETFILEPOINTER;
    MyPara.aPara[0] := _FDD3000_IF_PROTOCOLVERSION;
    dRetCode := coFDD3000.NewInst(pPara:=#MyPara, pResult:=#MyResult);
    if dRetCode = READY & MyResult.uiLng = (sizeof(HINT)+sizeof(DINT)) then
      ptrLogFile := MyResult.aData[2]$^FDD3000AxisVis::_LogFile;
    end_if;  
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL FDD3000AxisVisLogViewer::LogCmd::Read
	VAR_OUTPUT
		output (EAX) 	: FDD3000AxisVis::_CommandList;
	END_VAR

	output := LogCmd;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL FDD3000AxisVisLogViewer::LogIndexVisu::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  VAR
    pData     : ^FDD3000AxisVis::_LogStruct;
    TempActNo : DINT;
  END_VAR

  // only refresh values at 1 read(), to avoid inconsistent data
  // i choose Index because this is the most left visualized server, and it seams this one will be refreshed first
  LogIndex := LogIndex.Read();
  
  if LogIndex - LogOffset < 0 then
    LogIndex := _FDD3000AXISVIS_MAXLOGBUFFER_ENTRIES + LogIndex - LogOffset; // 101 because there are 101 entries (0-100)
  else
    LogIndex := LogIndex - LogOffset;
  end_if;

  pData := #ptrLogFile^.LogData[LogIndex];

  LogCmd := pData^.Command;
  LogTripCode := pData^.TripCode;
  LogTimeStamp := pData^.TimeStamp;
  LogRTStamp := pData^.RTStamp;
  
  LogTimeMS := pData^.TimeStamp MOD 1000;
  LogTimeS := (pData^.TimeStamp / 1000) MOD 60;
  LogTimeM := (pData^.TimeStamp / 60000) MOD 60;
  LogTimeH := (pData^.TimeStamp / 3600000);

  LogValid := (LogTimeStamp <> 0) | (LogRTStamp <> 0);

  // calculate relative index for visu
  TempActNo := ptrLogFile^.AccesNr - 1 - LogIndex;
  if TempActNo < 0 then
    LogIndexVisu := _FDD3000AXISVIS_MAXLOGBUFFER_ENTRIES + TempActNo; // 101 because there are 101 entries (0-100)
  else
    LogIndexVisu := TempActNo;
  end_if;

	output := LogIndexVisu;

END_FUNCTION