//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SSI021"
	Revision           = "1.40"
	GUID               = "{99F3B341-930E-4865-9F9C-58C70ECD4F10}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\ssi.ico"
	SharedCommandTable = "true"
	Objectsize         = "(640,120)">
	<Channels>
		<Server Name="Ch1_Data" GUID="{E54CE9AA-7409-48BC-B8F9-87FB644AEFF9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="act value from SSI. (scaled to 32Bit)"/>
		<Server Name="Ch1_Error" GUID="{ABBA8C59-7A2B-4323-AC71-CBEFC4DF34B1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="1 = Error with SSI communication"/>
		<Server Name="Ch2_Data" GUID="{FE1DEE64-B7EB-4A1D-934E-8F155FFDB874}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="act value from SSI. (scaled to 32Bit)"/>
		<Server Name="Ch2_Error" GUID="{A90CA5CF-9BFC-4E7B-9F04-8B437C3F3EB8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="1 = Error with SSI communication"/>
		<Server Name="ClassState">
		</Server>
		<Server Name="FPGAVersion" GUID="{475B144C-57B4-4596-96F3-B034F1ABD66E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the actual FPGA Version of the Module in the format x.y&#13;&#10;&#13;&#10;e.g. 16#10 means v1.0"/>
		<Server Name="RetryCounter" GUID="{59550307-10E9-40FF-88E0-2602CFB33468}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of Retries on SDIAS-Bus."/>
		<Client Name="Ch1_Frequency" Required="false" Internal="false" DefValue="3" Comment="Frequenzy of SSI&#13;&#10;0 = 125 kHz&#13;&#10;1 = 250 kHz&#13;&#10;2 = 500 kHz&#13;&#10;3 = 1   MHz"/>
		<Client Name="Ch1_SSIBitSize" Required="true" Internal="false" DefValue="25" Comment="Length of SSI shift register (1..32 Bit)"/>
		<Client Name="Ch1_SSIDoubleRead" Required="false" Internal="false" DefValue="0" Comment="1 = enable double read"/>
		<Client Name="Ch1_UseGraycode" Required="false" Internal="false" DefValue="1" Comment="0 = binary data&#13;&#10;1 = gray code"/>
		<Client Name="Ch2_Frequency" Required="false" Internal="false" DefValue="3" Comment="Frequenzy of SSI&#13;&#10;0 = 125 kHz&#13;&#10;1 = 250 kHz&#13;&#10;2 = 500 kHz&#13;&#10;3 = 1   MHz"/>
		<Client Name="Ch2_SSIBitSize" Required="true" Internal="false" DefValue="25" Comment="Length of SSI shift register (1..32 Bit)"/>
		<Client Name="Ch2_SSIDoubleRead" Required="false" Internal="false" DefValue="0" Comment="1 = enable double read"/>
		<Client Name="Ch2_UseGraycode" Required="false" Internal="false" DefValue="1" Comment="0 = binary data&#13;&#10;1 = gray code"/>
		<Client Name="SDIASPlace" Required="false" Internal="false" Comment="Place of SDIAS Modul [0..63].&#13;&#10;This Client is set automatically if module is placed via HardwareEditor."/>
		<Client Name="SSISdias1" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="ZoePat"/>
		<Dokumentation Revision="1.40" Date="12.08.2019" Author="LazJos" Company="Sigmatek" Description="Added support for HWAlarms."/>
		<Dokumentation Revision="1.39" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated."/>
		<Dokumentation Revision="1.38" Date="24.04.2018" Author="RamAnd" Company="Sigmatek" Description="Added server to show hardware version if this feature is supported by the safety firmware of the SCP."/>
		<Dokumentation Revision="1.37" Date="23.01.2018" Author="RamAnd" Company="Sigmatek" Description="Log messages have been standardized for easier maintenance, easier use in any class and to allow spam filtering. Code for the logging functions is now only located in HwControl."/>
		<Dokumentation Revision="1.36" Date="30.11.2017" Author="FurDom" Company="Sigmatek" Description="Added QuitComError server description to .lhd file"/>
		<Dokumentation Revision="1.35" Date="16.05.2017" Author="RamAnd" Company="Sigmatek" Description="When adding an SDO (i.e. via ReadSPIData) from background priority it was possible that the adding process got interrupted by receiving the answer to this SDO which is handled in cyclic priority. In the error case the answer was unexpected and therefore ignored. Then the class signals a timeout while waiting for the answer, which already arrived before waiting for it. Added mutex and changed instruction order to prevent this error."/>
		<Dokumentation Revision="1.34" Date="24.10.2016" Author="ZoePat" Company="Sigmatek" Description="Set the base class to visualized, so the embedded string object &quot;SerialNoStr&quot; can be used in the LSE."/>
		<Dokumentation Revision="1.33" Date="12.07.2016" Author="SeiChr" Company="Sigmatek" Description="Added Values for the total Current calculation. SA 31571"/>
		<Dokumentation Revision="1.32" Date="22.06.2015" Author="EisMic" Company="Sigmatek" Description="The servers FPGAVersion, SerialNo, Device ID and status and input servers are now not reset anymore when the module is disconnected."/>
		<Dokumentation Revision="1.31" Date="16.04.2015" Author="EisMic" Company="Sigmatek" Description="Added support for graphical hardware editor."/>
		<Dokumentation Revision="1.30" Date="17.03.2015" Author="RamAnd" Company="Sigmatek" Description="Added HW Version for sdias clients."/>
		<Dokumentation Revision="1.29" Date="18.11.2014" Author="PieSte" Company="Sigmatek" Description="Added possibility  to read more data from spi flash then one sdo access.&#13;&#10;Set methode GetDeviceID to global.&#13;&#10;Add methode to calculate checksum of spi flash."/>
		<Dokumentation Revision="1.28" Date="09.09.2014" Author="ZoePat" Company="Sigmatek" Description="The absolute value of the encoder will now be shown at startup instead of 0."/>
		<Dokumentation Revision="1.27" Date="31.07.2014" Author="PieSte" Company="Sigmatek" Description="Added QuitComError server to quit errors on safety cpu."/>
		<Dokumentation Revision="1.26" Date="30.07.2014" Author="ZoePat" Company="Sigmatek" Description="Now also different buscycle time than 1ms are supported."/>
		<Dokumentation Revision="1.25" Date="20.05.2014" Author="EisMic" Company="Sigmatek" Description="Reset variable eInitState in method connectEvent due to Plug&amp;Play problems with VI021.&#13;&#10;Reset all Servers when module is disconnected."/>
		<Dokumentation Revision="1.24" Date="24.04.2014" Author="RamAnd" Company="Sigmatek" Description="Clear module info at the servers if a disconnect event occurs."/>
		<Dokumentation Revision="1.23" Date="23.04.2014" Author="RamAnd" Company="Sigmatek" Description="Added server RetryCounteruC1 and RetryCounteruC2."/>
		<Dokumentation Revision="1.21" Date="27.02.2014" Author="ZoePat" Company="Sigmatek" Description="Removed server LEDControl because this is not avaliable for this hardware.&#13;&#10;Added client SDIASPlace.&#13;&#10;Required didnt work properly."/>
		<Dokumentation Revision="1.20" Date="12.02.2014" Author="RamAnd" Company="Sigmatek" Description="Removed init value of client Required at SSISdias object which prevented to set the class to not required."/>
		<Dokumentation Revision="1.10" Date="22.01.2014" Author="RamAnd&#13;&#10;LanSte&#13;&#10;PieSte" Company="Sigmatek" Description="Added functionality to use module optional via define DEACTIVATED_LSL as Place value.&#13;&#10;Read Client Required and Place in Init SdiasSafetyBase&#13;&#10;Read Client Required and Place in Init SdiasBase"/>
		<Dokumentation Revision="1.0" Date="04.12.2013" Author="ZoePat" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="SSI021">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{6D76524F-A0E9-4595-8B47-102D14E5FFB4}"
				Class      = "SdiasSafetyBase"
				Position   = "(428,120)"
				Visualized = "true">
				<Channels>
					<Server Name="CallCommand"/>
					<Server Name="ClassState"/>
					<Server Name="DeviceID"/>
					<Server Name="HwVersion"/>
					<Server Name="QuitComError"/>
					<Server Name="RetryCounteruC1"/>
					<Server Name="RetryCounteruC2"/>
					<Server Name="SafetyNumber"/>
					<Server Name="SerialNo"/>
					<Client Name="InputsNeeded" Value="3"/>
					<Client Name="OutputsNeeded" Value="1"/>
					<Client Name="Place"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasSafetyIn"/>
					<Client Name="SetDeviceID" Value="2#00100001"/>
				</Channels>
			</Object>
			<Object
				Name       = "SSISdias1"
				GUID       = "{E7B0C49E-703B-4681-8AE9-7044945845C8}"
				Class      = "SSISdias"
				Position   = "(510,810)"
				Visualized = "true">
				<Channels>
					<Server Name="Ch1_Data"/>
					<Server Name="Ch1_Error"/>
					<Server Name="Ch2_Data"/>
					<Server Name="Ch2_Error"/>
					<Server Name="ClassState"/>
					<Server Name="DeviceID"/>
					<Server Name="FPGAVersion"/>
					<Server Name="HwVersion"/>
					<Server Name="LEDControl" Value="0"/>
					<Server Name="RetryCounter"/>
					<Server Name="SDOState"/>
					<Server Name="SerialNo"/>
					<Client Name="Ch1_Frequency" Value="3"/>
					<Client Name="Ch1_SSIBitSize" Value="25"/>
					<Client Name="Ch1_SSIDoubleRead" Value="0"/>
					<Client Name="Ch1_UseGraycode" Value="1"/>
					<Client Name="Ch2_Frequency" Value="3"/>
					<Client Name="Ch2_SSIBitSize" Value="25"/>
					<Client Name="Ch2_SSIDoubleRead" Value="0"/>
					<Client Name="Ch2_UseGraycode" Value="1"/>
					<Client Name="Place"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ToSafetyBase"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(1202,210),(1030,210),"/>
			<Connection Source="_base.SdiasSafetyIn" Destination="this.SdiasSafetyIn" Vertices="(428,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(428,270),(38,270),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(1202,270),(1030,270),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(428,330),(38,330),"/>
			<Connection Source="this.SSISdias1" Destination="SSISdias1.ClassState"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(1202,390),(1030,390),"/>
			<Connection Source="SSISdias1.SdiasIn" Destination="_base.CallCommand" Vertices="(510,900),(1030,630),"/>
			<Connection Source="this.SafetyNumber" Destination="_base.SafetyNumber" Vertices="(1202,450),(1030,450),"/>
			<Connection Source="SSISdias1.Ch1_SSIBitSize" Destination="this.Ch1_SSIBitSize" Vertices="(510,1140),(38,750),"/>
			<Connection Source="SSISdias1.Ch1_SSIDoubleRead" Destination="this.Ch1_SSIDoubleRead" Vertices="(510,1200),(38,810),"/>
			<Connection Source="SSISdias1.Ch1_Frequency" Destination="this.Ch1_Frequency" Vertices="(510,1260),(38,870),"/>
			<Connection Source="SSISdias1.Ch1_UseGraycode" Destination="this.Ch1_UseGraycode" Vertices="(510,1320),(38,930),"/>
			<Connection Source="SSISdias1.Ch2_SSIBitSize" Destination="this.Ch2_SSIBitSize" Vertices="(510,1380),(38,990),"/>
			<Connection Source="SSISdias1.Ch2_SSIDoubleRead" Destination="this.Ch2_SSIDoubleRead" Vertices="(510,1440),(38,1050),"/>
			<Connection Source="SSISdias1.Ch2_Frequency" Destination="this.Ch2_Frequency" Vertices="(510,1500),(38,1110),"/>
			<Connection Source="SSISdias1.Ch2_UseGraycode" Destination="this.Ch2_UseGraycode" Vertices="(510,1560),(38,1170),"/>
			<Connection Source="this.FPGAVersion" Destination="SSISdias1.FPGAVersion" Vertices="(1202,690),(936,1020),"/>
			<Connection Source="this.Ch1_Data" Destination="SSISdias1.Ch1_Data" Vertices="(1202,810),(936,1380),"/>
			<Connection Source="this.Ch1_Error" Destination="SSISdias1.Ch1_Error" Vertices="(1202,870),(936,1440),"/>
			<Connection Source="this.Ch2_Data" Destination="SSISdias1.Ch2_Data" Vertices="(1202,930),(936,1500),"/>
			<Connection Source="this.Ch2_Error" Destination="SSISdias1.Ch2_Error" Vertices="(1202,990),(936,1560),"/>
			<Connection Source="this.RetryCounter" Destination="SSISdias1.RetryCounter" Vertices="(1202,750),(936,1200),"/>
			<Connection Source="SSISdias1.Place" Destination="this.SDIASPlace" Vertices="(510,960),(38,690),"/>
			<Connection Source="SSISdias1.ToSafetyBase" Destination="_base.ClassState" Vertices="(510,1080),(1030,210),"/>
			<Connection Source="this.RetryCounteruC1" Destination="_base.RetryCounteruC1" Vertices="(1202,510),(1030,510),"/>
			<Connection Source="this.RetryCounteruC2" Destination="_base.RetryCounteruC2" Vertices="(1202,570),(1030,570),"/>
			<Connection Source="this.QuitComError" Destination="_base.QuitComError" Vertices="(1202,630),(1030,690),"/>
			<Connection Source="this.HwVersion" Destination="_base.HwVersion" Vertices="(1202,330),(1030,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using SdiasSafetyBase

SSI021 : CLASS
: SdiasSafetyBase
  //Servers:
	FPGAVersion 	: SvrCh_HDINT;
	RetryCounter 	: SvrCh_UDINT;
	Ch1_Data 	: SvrCh_DINT;
	Ch1_Error 	: SvrCh_DINT;
	Ch2_Data 	: SvrCh_DINT;
	Ch2_Error 	: SvrCh_DINT;
  //Clients:
	SSISdias1 	: CltChCmd_SSISdias;
	SDIASPlace 	: CltCh_UDINT;
	Ch1_SSIBitSize 	: CltCh_DINT;
	Ch1_SSIDoubleRead 	: CltCh_DINT;
	Ch1_Frequency 	: CltCh_DINT;
	Ch1_UseGraycode 	: CltCh_DINT;
	Ch2_SSIBitSize 	: CltCh_DINT;
	Ch2_SSIDoubleRead 	: CltCh_DINT;
	Ch2_Frequency 	: CltCh_DINT;
	Ch2_UseGraycode 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClassState::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FPGAVersion::Read
		VAR_OUTPUT
			output (EAX) 	: HDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RetryCounter::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Ch1_Data::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Ch1_Error::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Ch2_Data::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Ch2_Error::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using SSISdias


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SSI021::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_SSI021
1$UINT, 40$UINT, (SIZEOF(::SSI021))$UINT, 
6$UINT, 10$UINT, 0$UINT, 
TO_UDINT(984795277), "SSI021", //Class
TO_UDINT(2010300054), "SdiasSafetyBase", 1$UINT, 9$UINT, //Baseclass
//Servers:
(::SSI021.FPGAVersion.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2929703442), "FPGAVersion", 
(::SSI021.RetryCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3383993698), "RetryCounter", 
(::SSI021.Ch1_Data.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2056481952), "Ch1_Data", 
(::SSI021.Ch1_Error.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1678339884), "Ch1_Error", 
(::SSI021.Ch2_Data.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4228324878), "Ch2_Data", 
(::SSI021.Ch2_Error.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1440839089), "Ch2_Error", 
//Clients:
(::SSI021.SSISdias1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3616135087), "SSISdias1", TO_UDINT(2339320310), "SSISdias", 1$UINT, 21$UINT, 
(::SSI021.SDIASPlace.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(688438276), "SDIASPlace", 
(::SSI021.Ch1_SSIBitSize.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(2521326497), "Ch1_SSIBitSize", 
(::SSI021.Ch1_SSIDoubleRead.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(4078619420), "Ch1_SSIDoubleRead", 
(::SSI021.Ch1_Frequency.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(471040418), "Ch1_Frequency", 
(::SSI021.Ch1_UseGraycode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(598427071), "Ch1_UseGraycode", 
(::SSI021.Ch2_SSIBitSize.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(3788943697), "Ch2_SSIBitSize", 
(::SSI021.Ch2_SSIDoubleRead.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(3798442341), "Ch2_SSIDoubleRead", 
(::SSI021.Ch2_Frequency.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2247223203), "Ch2_Frequency", 
(::SSI021.Ch2_UseGraycode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2657167729), "Ch2_UseGraycode", 
END_FUNCTION


#define USER_CNT_SSI021 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SSI021] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SSI021::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= SdiasSafetyBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= SdiasSafetyBase::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, SdiasSafetyBase::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_SSI021;
	vmt.CmdTable.NewInstr		:= #ClassState::NewInst();
	SdiasSafetyBase::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasSafetyBase::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FPGAVersion.pMeth			:= StoreMethod( #FPGAVersion::Read(), #M_NO_F() );
	IF FPGAVersion.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RetryCounter.pMeth			:= StoreMethod( #RetryCounter::Read(), #M_NO_F() );
	IF RetryCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ch1_Data.pMeth			:= StoreMethod( #Ch1_Data::Read(), #M_NO_F() );
	IF Ch1_Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ch1_Error.pMeth			:= StoreMethod( #Ch1_Error::Read(), #M_NO_F() );
	IF Ch1_Error.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ch2_Data.pMeth			:= StoreMethod( #Ch2_Data::Read(), #M_NO_F() );
	IF Ch2_Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ch2_Error.pMeth			:= StoreMethod( #Ch2_Error::Read(), #M_NO_F() );
	IF Ch2_Error.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL SSI021::Ch1_Data::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Ch1_Data := SSISdias1.Ch1_Data.Read();
	output := Ch1_Data;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::Ch1_Error::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Ch1_Error := SSISdias1.Ch1_Error.Read();
	output := Ch1_Error;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::Ch2_Data::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Ch2_Data := SSISdias1.Ch2_Data.Read();
	output := Ch2_Data;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::Ch2_Error::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	Ch2_Error := SSISdias1.Ch2_Error.Read();
	output := Ch2_Error;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::FPGAVersion::Read
	VAR_OUTPUT
		output (EAX) 	: HDINT;
	END_VAR

	FPGAVersion := SSISdias1.FPGAVersion.Read();
	output := FPGAVersion;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::RetryCounter::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	RetryCounter := SSISdias1.RetryCounter.Read();
	output := RetryCounter;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SSI021::ClassState::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^Results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  VAR
  	pSerNoStr : ^CHAR;
  END_VAR

  if (pPara^.uiCmd = SDIAS_SET_NUMBERS) & (pPara^.aPara[2]$HDINT = 0) then
    // if the hw version should be set but the feature is not available in the SCP firmware => use the hardware version of the SDIAS type label
    SafetyNumber  := pPara^.aPara[0]$HDINT;
    pSerNoStr     := pPara^.aPara[1]$^CHAR;
    SerialNoStr.WriteDataOff(udLen:=_strlen(src:=pSerNoStr), udOff:=0, pData:=pSerNoStr);
    HwVersion     := SSISdias1.HwVersion;
  else
    ret_code := SdiasSafetyBase::NewInst(pPara, pResult);
  end_if;

END_FUNCTION