//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define FDD3000_PARAMATERS_AMOUNT_SERVERS   21 //amount of servers of this class
//}}LSL_DEFINES

//{{LSL_DECLARATION
#include "..\..\Class\FDD3000_Parameters\FDD3000_NewInstIF.h"
#include "..\..\Class\FDD3000_Parameters\FDD3000_ParameterDef.h"

(*!
<Class
	Name               = "FDD3000_Parameters"
	Revision           = "1.0"
	GUID               = "{523BBAC8-9705-481B-9DFE-09193AECB9A1}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(810,600)">
	<Channels>
		<Server Name="AccRate" GUID="{73BCA41A-4D63-46B7-A72F-EF44F5D3428A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 02.011  Acceleration Rate 1 &#13;&#10;Short description: Defines the acceleration rate present in acceleration rate 1 as [0.0 s].&#13;&#10;&#13;&#10;"/>
		<Server Name="ClassSvr" GUID="{68BFCF5A-901A-41D8-B224-83B9902BBE4C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Has no function."/>
		<Server Name="CurrentAtMaximumDeadTime" GUID="{D06717CC-DAC0-4E00-B4BA-77FB87C7D019}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="OpenLoop Current At Maximum Deadtime Compensation (05.060)&#13;&#10;Short description Current at which maximum deadtime compensation is applied as [0.00 %]&#13;&#10;Read Only"/>
		<Server Name="CurrentLoopKiGain" GUID="{EA6C7E4B-1F11-4221-B56F-AE4B8B1720A8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A Current Loop Ki Gain 04.014&#13;&#10;Short description: Defines the current loop controller integral gain as [0.000]"/>
		<Server Name="CurrentLoopKPGain" GUID="{A8D03564-8E07-442E-865F-F84FCCD61562}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A Current Loop Kp Gain 04.013&#13;&#10;Short description: Defines the current loop controller proportional gain as [0.00]."/>
		<Server Name="DecRate" GUID="{A373584D-858D-43C7-99B2-57533FC20245}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 02.021  Deceleration Rate 1 &#13;&#10;Short description: Defines the deceleration rate present in deceleration rate 1 as [0.0 s].&#13;&#10;"/>
		<Server Name="LowFrequencyVoltageBoost" GUID="{9422DFD5-899B-4974-8B63-51ED5A4C35D1}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.015  Low Frequency Voltage Boost &#13;&#10;Short description: Defines the level of voltage boost &#13;&#10;at 0Hz when using a fixed V to F relationship as [0.0 %].  &#13;&#10;"/>
		<Server Name="MaximumDeadTimeComp" GUID="{F3D70A32-CCE5-403F-B987-353AB9E0501D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="OpenLoop Maximum Deadtime compensation 05.059&#13;&#10;Short description: Maximum Deadtime Compensation  as [0.000 µs]&#13;&#10;Read Only"/>
		<Server Name="MaxRefClamp" GUID="{62F974A1-BEC6-4699-9033-962FE10D14B7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 01.006  Maximum Reference Clamp &#13;&#10;Short description: Defines the maximum value for the reference as [0.00 Hz].&#13;&#10;"/>
		<Server Name="MinRefClamp" GUID="{AD139E5D-277C-49FE-8C4B-0664CD1AD11F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 01.007  Minimum Reference Clamp &#13;&#10;Short description: Defines the minimum value for the reference  as [0.00 Hz].&#13;&#10;"/>
		<Server Name="MotorRatedCurrent" GUID="{9859C67E-F73F-4403-96C8-D084CA4729EE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.007  Motor Rated Current &#13;&#10;Short description: Set to the rated current rated of the motor as [0.00 A].&#13;&#10;"/>
		<Server Name="MotorRatedFrequency" GUID="{CB50D918-1C01-4D7C-B99F-C830A74F8D10}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.006  Motor Rated Frequency &#13;&#10;Short description: Set to the rated frequency of the motor as [0.00 Hz]. &#13;&#10;"/>
		<Server Name="MotorRatedPowerFactor" GUID="{B86CF4B7-9D9F-421D-AC9F-E7F116BE7BB3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.010  Motor Rated Power Factor &#13;&#10;Short description: Set to the rated power factor of the motor as [0.00].  &#13;&#10;This value can be measured by the drive during a rotating autotune.&#13;&#10;"/>
		<Server Name="MotorRatedSpeed" GUID="{30FB86D0-6E2C-4963-BC95-43424268DF32}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.008  Motor Rated Speed &#13;&#10;Short description: Set to the rated speed of the motor as [0.0 rpm]. &#13;&#10;"/>
		<Server Name="MotorRatedVoltage" GUID="{ECA413ED-B1DF-45E9-B83A-58AFCDC2E2F5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Parameter 05.009  Motor Rated Voltage &#13;&#10;Short description: Set to the rated voltage of the motor as [V]. &#13;&#10;"/>
		<Server Name="SaturationBreakpoint1" GUID="{E52B9475-7BBE-4C18-B41D-0919DA56B689}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A motor saturation breakpoints Pr 05.029 &#13;&#10;Short description: Defines Saturation Breakpoint 1 within &#13;&#10;the saturation characteristic as [0.0 %]. &#13;&#10;"/>
		<Server Name="SaturationBreakpoint2" GUID="{9DFD412B-86F7-43C7-8BF3-7E4ABC54E77D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A motor saturation breakpoints Pr 05.062&#13;&#10;Short description: Defines Saturation Breakpoint 2 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="SaturationBreakpoint3" GUID="{F1AFE046-67DE-4A69-9762-FACFFA4C764A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A motor saturation breakpoints Pr 05.030&#13;&#10;Short description: Defines Saturation Breakpoint 3 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="SaturationBreakpoint4" GUID="{BD26E380-9073-402D-B21A-96FF285FD735}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="RFC-A motor saturation breakpoints Pr 05.063&#13;&#10;Short description: Defines Saturation Breakpoint 4 within &#13;&#10;the saturation characteristic as [0.0 %]. "/>
		<Server Name="StatorInductance" GUID="{D08E1E26-B500-4175-8A79-F698A9EC8902}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="OpenLoop / RFC-A Stator Inductance 05.025&#13;&#10;Short description: Defines the inductance of the motor stator as [0.00 mH]."/>
		<Server Name="StatorResistance" GUID="{8B61DB62-AE9C-46A0-81F8-32E2AEA78349}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="OpenLoop / RFC-A Stator Resistance 05.017&#13;&#10;Short description: Defines the resistance of the motor stator as [0.0000 ohm]"/>
		<Server Name="TransientInductance" GUID="{59BAA048-1EBA-4BC0-88C0-E089621E3BAB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="OpenLoop / RFC-A Transient Inductance 05.024&#13;&#10;Short description: Defines the inducatance of the transient &#13;&#10;components in the motor stator as [0.000 mH] "/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="19"/>
			<SepChn Position="16"/>
			<SepChn Position="12"/>
			<SepChn Position="1"/>
		</Servers>
	</Separators>
	<Dependencies>
		<Files>
			<File Path=".\Class\FDD3000_Parameters\FDD3000_NewInstIF.h" Include="true"/>
			<File Path=".\Class\FDD3000_Parameters\FDD3000_ParameterDef.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="PieSte"/>
		<Dokumentation Revision="1.0" Date="02.02.2021" Author="ZoePat" Company="Sigmatek" Description="first library version"/>
	</RevDoku>
</Class>
*)
FDD3000_Parameters : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	MaxRefClamp 	: SvrCh_DINT;
	MinRefClamp 	: SvrCh_DINT;
	AccRate 	: SvrCh_DINT;
	DecRate 	: SvrCh_DINT;
	MotorRatedCurrent 	: SvrCh_DINT;
	MotorRatedSpeed 	: SvrCh_DINT;
	MotorRatedVoltage 	: SvrCh_DINT;
	MotorRatedPowerFactor 	: SvrCh_DINT;
	MotorRatedFrequency 	: SvrCh_DINT;
	LowFrequencyVoltageBoost 	: SvrCh_DINT;
	StatorResistance 	: SvrCh_DINT;
	TransientInductance 	: SvrCh_DINT;
	StatorInductance 	: SvrCh_DINT;
	MaximumDeadTimeComp 	: SvrCh_DINT;
	CurrentAtMaximumDeadTime 	: SvrCh_DINT;
	CurrentLoopKPGain 	: SvrCh_DINT;
	CurrentLoopKiGain 	: SvrCh_DINT;
	SaturationBreakpoint1 	: SvrCh_DINT;
	SaturationBreakpoint3 	: SvrCh_DINT;
	SaturationBreakpoint2 	: SvrCh_DINT;
	SaturationBreakpoint4 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FDD3000_Parameters::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_FDD3000_PARAMETERS
1$UINT, 0$UINT, (SIZEOF(::FDD3000_Parameters))$UINT, 
22$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1735900044), "FDD3000_Parameters", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FDD3000_Parameters.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::FDD3000_Parameters.MaxRefClamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2280484791), "MaxRefClamp", 
(::FDD3000_Parameters.MinRefClamp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1272976568), "MinRefClamp", 
(::FDD3000_Parameters.AccRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(565376633), "AccRate", 
(::FDD3000_Parameters.DecRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2782083779), "DecRate", 
(::FDD3000_Parameters.MotorRatedCurrent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1827429705), "MotorRatedCurrent", 
(::FDD3000_Parameters.MotorRatedSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1154694624), "MotorRatedSpeed", 
(::FDD3000_Parameters.MotorRatedVoltage.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3179776645), "MotorRatedVoltage", 
(::FDD3000_Parameters.MotorRatedPowerFactor.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3627548735), "MotorRatedPowerFactor", 
(::FDD3000_Parameters.MotorRatedFrequency.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2125789213), "MotorRatedFrequency", 
(::FDD3000_Parameters.LowFrequencyVoltageBoost.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1097702356), "LowFrequencyVoltageBoost", 
(::FDD3000_Parameters.StatorResistance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2658549821), "StatorResistance", 
(::FDD3000_Parameters.TransientInductance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2172931522), "TransientInductance", 
(::FDD3000_Parameters.StatorInductance.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(381380844), "StatorInductance", 
(::FDD3000_Parameters.MaximumDeadTimeComp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1552366758), "MaximumDeadTimeComp", 
(::FDD3000_Parameters.CurrentAtMaximumDeadTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(425687078), "CurrentAtMaximumDeadTime", 
(::FDD3000_Parameters.CurrentLoopKPGain.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3906162718), "CurrentLoopKPGain", 
(::FDD3000_Parameters.CurrentLoopKiGain.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2233705965), "CurrentLoopKiGain", 
(::FDD3000_Parameters.SaturationBreakpoint1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1697189204), "SaturationBreakpoint1", 
(::FDD3000_Parameters.SaturationBreakpoint3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2334616696), "SaturationBreakpoint3", 
(::FDD3000_Parameters.SaturationBreakpoint2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4229979374), "SaturationBreakpoint2", 
(::FDD3000_Parameters.SaturationBreakpoint4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(356776411), "SaturationBreakpoint4", 
//Clients:
END_FUNCTION


#define USER_CNT_FDD3000_Parameters 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FDD3000_Parameters] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FDD3000_Parameters::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FDD3000_Parameters, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxRefClamp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxRefClamp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MinRefClamp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MinRefClamp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AccRate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF AccRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DecRate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DecRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedCurrent.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedCurrent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedSpeed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedVoltage.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedVoltage.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedPowerFactor.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedPowerFactor.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRatedFrequency.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MotorRatedFrequency.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LowFrequencyVoltageBoost.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF LowFrequencyVoltageBoost.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StatorResistance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF StatorResistance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TransientInductance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TransientInductance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	StatorInductance.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF StatorInductance.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaximumDeadTimeComp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaximumDeadTimeComp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentAtMaximumDeadTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentAtMaximumDeadTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentLoopKPGain.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentLoopKPGain.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurrentLoopKiGain.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CurrentLoopKiGain.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SaturationBreakpoint4.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SaturationBreakpoint4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
