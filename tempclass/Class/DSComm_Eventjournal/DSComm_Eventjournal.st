//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
// System Event IDs
#define EVTJOURIF_EVENTID_DEFAULT             0x0000
#define EVTJOURIF_EVENTID_ALARM               0xFFFE
#define EVTJOURIF_EVENTID_SET_POINT           0xFFFD
#define EVTJOURIF_EVENTID_MESSAGE             0xFFFC
#define EVTJOURIF_EVENTID_WARNING             0xFFFB
#define EVTJOURIF_EVENTID_ERROR               0xFFFA
#define EVTJOURIF_EVENTID_LOG_IN_OUT          0xFFF9
#define EVTJOURIF_EVENTID_POWER_ON_OFF        0xFFF8
#define EVTJOURIF_EVENTID_DEL_ALL             0xFFF7
#define EVTJOURIF_EVENTID_SET_POINT_STR       0xFFF6
#define EVTJOURIF_EVENTID_RECIPE_LOAD         0xFFF5
#define EVTJOURIF_EVENTID_RECIPE_SAVE         0xFFF4
#define EVTJOURIF_EVENTID_USERTEXT            0xFFF3

// Ranges of the Event IDs
#define EVTJOURIF_IDRANGE_USER_MIN            EVTJOURIF_EVENTID_DEFAULT
#define EVTJOURIF_IDRANGE_USER_MAX            0x7FFF
#define EVTJOURIF_IDRANGE_APPLICATION_MIN     0x8000
#define EVTJOURIF_IDRANGE_APPLICATION_MAX     0xBFFF
#define EVTJOURIF_IDRANGE_SYSTEM_MIN          0xC000
#define EVTJOURIF_IDRANGE_SYSTEM_MAX          0xFFFF

// Utility Defines
#define EVTJOURIF_MAX_STRING_LENGTH           512

// Error Codes
#define EVTJOURIF_ERROR_EVT_ID_INVALID        -1000
#define EVTJOURIF_ERROR_NIL_POINTER           -1001
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "DSComm_Eventjournal"
	Revision           = "1.0"
	GUID               = "{EC9991BD-AE13-491A-B33A-075A71AAF068}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(598,120)"
	Comment            = "The Class is the DSComm Interface for the Eventjournal.&#13;&#10;&#13;&#10;It has functions to add Events with Strings or Data Buffers to the Eventjournal">
	<Channels>
		<Server
			Name           = "ClassSvr"
			GUID           = "{AC81074A-3090-42E5-B033-62E2D00E059C}"
			Visualized     = "false"
			Initialize     = "false"
			WriteProtected = "true"
			Retentive      = "false"
			Comment        = "&#13;&#10;">
			<NewInst>
				<Function Name="NiAddMessage">
					<InputParameter>
						<Parameter Name="pTextID"/>
						<Parameter Name="textLength"/>
						<Parameter Name="charSize"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
				<Function Name="NiAddWarning">
					<InputParameter>
						<Parameter Name="pText"/>
						<Parameter Name="textLength"/>
						<Parameter Name="charSize"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
				<Function Name="NiAddError">
					<InputParameter>
						<Parameter Name="pText"/>
						<Parameter Name="textLength"/>
						<Parameter Name="charSize"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
				<Function Name="NiAddUserText">
					<InputParameter>
						<Parameter Name="pText"/>
						<Parameter Name="textLength"/>
						<Parameter Name="charSize"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
				<Function Name="NiAddEntry">
					<InputParameter>
						<Parameter Name="evtID"/>
						<Parameter Name="pData"/>
						<Parameter Name="size"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
				<Function Name="NiAddEventByID">
					<InputParameter>
						<Parameter Name="evtID"/>
						<Parameter Name="pText"/>
						<Parameter Name="textLength"/>
						<Parameter Name="charSize"/>
					</InputParameter>
					<OutputParameter>
						<Parameter Name="ret_code"/>
						<Parameter Name="retcode"/>
					</OutputParameter>
				</Function>
			</NewInst>
		</Server>
		<Client Name="DSComm_Interface" Required="true" Internal="false"/>
		<Client Name="SigCLib" Required="false" Internal="false" Comment="Connection to the SigCLib library. This client does not need to be connected.&#13;&#10;&#13;&#10;Verbindung zur Library SigCLib. Dieser Client muss nicht verbunden werden."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek GmbH &amp; Co. KG" Author="FreJon"/>
		<Dokumentation Revision="1.0" Date="2020-07-15" Author="FreJon" Company="Sigmatek GmbH &amp; Co. KG" Description="- creation of the class"/>
	</RevDoku>
	<Network Name="DSComm_Eventjournal">
		<!-- List of Components in this network -->
		<Components>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
DSComm_Eventjournal : CLASS
	TYPE
	  CmdClassSvr :  //! <Type Public="true" Name="CmdClassSvr"/>
	  (
	    NiAddMessage,
	    NiAddWarning,
	    NiAddError,
	    NiAddUserText,
	    NiAddEntry,
	    NiAddEventByID
	  )$UINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	DSComm_Interface 	: CltChCmd_DSComm_Interface;
	SigCLib 	: CltChCmd_SigCLib;
  //Variables:
  //Functions:
				//! <Function Comment="Copies a Unicode or ASCII String to a Unicode String with 0-String Termination" Name="CopyString"/>
	FUNCTION CopyString
		VAR_INPUT
			pDest 	: ^UINT;			//! <Variable Comment="Pointer to the Destination Buffer" Name="CopyString.pDest"/>
			destLeng 	: UDINT;			//! <Variable Comment="Maximum possible string length in the destination buffer" Name="CopyString.destLeng"/>
			pSrc 	: ^UINT;			//! <Variable Comment="Pointer to the Source String" Name="CopyString.pSrc"/>
			srcLeng 	: UDINT;			//! <Variable Comment="Length of the source String" Name="CopyString.srcLeng"/>
			srcChrSize 	: USINT;			//! <Variable Comment="Size of one character in the source string&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="CopyString.srcChrSize"/>
		END_VAR
		VAR_OUTPUT
			strLength 	: UDINT;			//! <Variable Comment="String Length including the Termination&#13;&#10;" Name="CopyString.strLength"/>
		END_VAR;
				//! <Function Comment="Adds an Message Event Entry to the Event Journal" Name="AddMessage"/>
	FUNCTION GLOBAL AddMessage
		VAR_INPUT
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddMessage.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddMessage.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddMessage.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddMessage.retcode"/>
		END_VAR;
				//! <Function Comment="Adds a Warning Event Entry to the Event Journal" Name="AddWarning"/>
	FUNCTION GLOBAL AddWarning
		VAR_INPUT
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddWarning.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddWarning.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddWarning.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddWarning.retcode"/>
		END_VAR;
				//! <Function Comment="Adds an Error Event Entry to the Event Journal" Name="AddError"/>
	FUNCTION GLOBAL AddError
		VAR_INPUT
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddError.pText"/>
			textLength 	: UDINT;
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddError.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddError.retcode"/>
		END_VAR;
				//! <Function Comment="Adds a User Text Event Entry to the Event Journal" Name="AddUserText"/>
	FUNCTION GLOBAL AddUserText
		VAR_INPUT
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddUserText.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddUserText.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddUserText.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddUserText.retcode"/>
		END_VAR;
				//! <Function Comment="Adds an Event Entry with a String and a ID from the User ID-Range to the Event Journal" Name="AddUserEventByID"/>
	FUNCTION GLOBAL AddUserEventByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;ID from 0x0000 (EVTJOURIF_IDRANGE_USER_MIN)  to 0x7FFF (EVTJOURIF_IDRANGE_USER_MAX) is allowed" Name="AddUserEventByID.evtID"/>
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddUserEventByID.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddUserEventByID.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddUserEventByID.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1000 ... the ID is not in the valid range (EVTJOURIF_ERROR_EVT_ID_INVALID)&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddUserEventByID.retcode"/>
		END_VAR;
				//! <Function Comment="Adds an Event Entry with a String and a ID from the Application ID-Range to the Event Journal" Name="AddApplicationEventByID"/>
	FUNCTION GLOBAL AddApplicationEventByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;ID from 0x8000 (EVTJOURIF_IDRANGE_APPLICATION_MIN) to 0xBFFF (EVTJOURIF_IDRANGE_APPLICATION_MAX) is allowed" Name="AddApplicationEventByID.evtID"/>
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddApplicationEventByID.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddApplicationEventByID.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddApplicationEventByID.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1000 ... the ID is not in the valid range (EVTJOURIF_ERROR_EVT_ID_INVALID)&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddApplicationEventByID.retcode"/>
		END_VAR;
				//! <Function Comment="Adds an Event Entry with a Data Buffer and a ID from the User ID-Range to the Event Journal" Name="AddUserEntryByID"/>
	FUNCTION GLOBAL AddUserEntryByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;ID from 0x0000 (EVTJOURIF_IDRANGE_USER_MIN)  to 0x7FFF (EVTJOURIF_IDRANGE_USER_MAX) is allowed" Name="AddUserEntryByID.evtID"/>
			pData 	: ^void;			//! <Variable Comment="Pointer to the Data Buffer" Name="AddUserEntryByID.pData"/>
			size 	: UDINT;			//! <Variable Comment="Size in Byte of the Data Buffer" Name="AddUserEntryByID.size"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1000 ... the ID is not in the valid range (EVTJOURIF_ERROR_EVT_ID_INVALID)&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddUserEntryByID.retcode"/>
		END_VAR;
				//! <Function Comment="Adds an Event Entry with a Data Buffer and a ID from the Application ID-Range to the Event Journal" Name="AddApplicationEntryByID"/>
	FUNCTION GLOBAL AddApplicationEntryByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;ID from 0x8000 (EVTJOURIF_IDRANGE_APPLICATION_MIN) to 0xBFFF (EVTJOURIF_IDRANGE_APPLICATION_MAX) is allowed" Name="AddApplicationEntryByID.evtID"/>
			pData 	: ^void;			//! <Variable Comment="Pointer to the Data Buffer" Name="AddApplicationEntryByID.pData"/>
			size 	: UDINT;			//! <Variable Comment="Size in Byte of the Data Buffer" Name="AddApplicationEntryByID.size"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1000 ... the ID is not in the valid range (EVTJOURIF_ERROR_EVT_ID_INVALID)&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddApplicationEntryByID.retcode"/>
		END_VAR;
	
	FUNCTION AddEntryByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;User ID Range: 0x0000 (EVTJOURIF_IDRANGE_USER_MIN) - 0x7FFF (EVTJOURIF_IDRANGE_USER_MAX)&#13;&#10;Application ID Range: 0x8000 (EVTJOURIF_IDRANGE_APPLICATION_MIN) - 0xBFFF (EVTJOURIF_IDRANGE_APPLICATION_MAX)&#13;&#10;System ID Range: 0xC000 (EVTJOURIF_IDRANGE_SYSTEM_MIN) - 0xFFFF (EVTJOURIF_IDRANGE_SYSTEM_MAX)&#13;&#10;" Name="AddEntryByID.evtID"/>
			pData 	: ^void;			//! <Variable Comment="Pointer to the Data Buffer" Name="AddEntryByID.pData"/>
			size 	: UDINT;			//! <Variable Comment="Size in Byte of the Data Buffer" Name="AddEntryByID.size"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddEntryByID.retcode"/>
		END_VAR;
	
	FUNCTION AddEventByID
		VAR_INPUT
			evtID 	: UINT;			//! <Variable Comment="The ID of the Event&#13;&#10;&#13;&#10;User ID Range: 0x0000 (EVTJOURIF_IDRANGE_USER_MIN) - 0x7FFF (EVTJOURIF_IDRANGE_USER_MAX)&#13;&#10;Application ID Range: 0x8000 (EVTJOURIF_IDRANGE_APPLICATION_MIN) - 0xBFFF (EVTJOURIF_IDRANGE_APPLICATION_MAX)&#13;&#10;System ID Range: 0xC000 (EVTJOURIF_IDRANGE_SYSTEM_MIN) - 0xFFFF (EVTJOURIF_IDRANGE_SYSTEM_MAX)&#13;&#10;" Name="AddEventByID.evtID"/>
			pText 	: ^UINT;			//! <Variable Comment="Pointer to the String" Name="AddEventByID.pText"/>
			textLength 	: UDINT;			//! <Variable Comment="Length of the String" Name="AddEventByID.textLength"/>
			charSize 	: USINT;			//! <Variable Comment="Size of one character&#13;&#10;&#13;&#10;1 ... for ASCII (_ASCII)&#13;&#10;2 ... for Unicode (_UNI)" Name="AddEventByID.charSize"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="&gt;= 0 ... success&#13;&#10;&lt; 0 ... error&#13;&#10;&#13;&#10;-999 - 0 ... error codes of the DSComm Class&#13;&#10;&#13;&#10;&lt;= -1000 ... error codes of the DSComm EventJournal Interface Class&#13;&#10;&#13;&#10;-1001 ... the pointer is NIL (EVTJOURIF_ERROR_NIL_POINTER)" Name="AddEventByID.retcode"/>
		END_VAR;
	
	FUNCTION ClassSvr::NiAddMessage
		VAR_INPUT
			pTextID 	: DINT;
			textLength 	: DINT;
			charSize 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
	
	FUNCTION ClassSvr::NiAddWarning
		VAR_INPUT
			pText 	: DINT;
			textLength 	: DINT;
			charSize 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
	
	FUNCTION ClassSvr::NiAddError
		VAR_INPUT
			pText 	: DINT;
			textLength 	: DINT;
			charSize 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
	
	FUNCTION ClassSvr::NiAddUserText
		VAR_INPUT
			pText 	: DINT;
			textLength 	: DINT;
			charSize 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
	
	FUNCTION ClassSvr::NiAddEntry
		VAR_INPUT
			evtID 	: DINT;
			pData 	: DINT;
			size 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
	
	FUNCTION ClassSvr::NiAddEventByID
		VAR_INPUT
			evtID 	: DINT;
			pText 	: DINT;
			textLength 	: DINT;
			charSize 	: DINT;
			retcode 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			ret_code 	: IprStates;
		END_VAR;
				//! <Function Name="ClassSvr.NewInst" Hidden="true" UseBaseCmd="true"/>
	FUNCTION VIRTUAL GLOBAL ClassSvr::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DSComm_Interface
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DSComm_Eventjournal::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_DSCOMM_EVENTJOURNAL
1$UINT, 0$UINT, (SIZEOF(::DSComm_Eventjournal))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2754536051), "DSComm_Eventjournal", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DSComm_Eventjournal.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::DSComm_Eventjournal.DSComm_Interface.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1124413560), "DSComm_Interface", TO_UDINT(1124413560), "DSComm_Interface", 2$UINT, 3$UINT, 
(::DSComm_Eventjournal.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 37$UINT, 
END_FUNCTION


#define USER_CNT_DSComm_Eventjournal 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DSComm_Eventjournal] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DSComm_Eventjournal::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DSComm_Eventjournal, pCmd := #vmt.CmdTable);
	vmt.CmdTable.NewInstr		:= #NewInst();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_HIDDEN_FUNCTION
FUNCTION VIRTUAL GLOBAL DSComm_Eventjournal::ClassSvr::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: iprStates;
	END_VAR
	CASE pPara^.uiCmd$CmdClassSvr OF
		NiAddMessage:
			ret_code := NiAddMessage(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
		NiAddWarning:
			ret_code := NiAddWarning(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
		NiAddError:
			ret_code := NiAddError(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
		NiAddUserText:
			ret_code := NiAddUserText(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
		NiAddEntry:
			ret_code := NiAddEntry(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
		NiAddEventByID:
			ret_code := NiAddEventByID(pPara^.aPara[0],pPara^.aPara[1],pPara^.aPara[2],pPara^.aPara[3],(#pResult^.aData[0])$^DINT);
			pResult^.uiLng := 4 + sizeof(pResult^.uiLng);
	ELSE

	ret_code := READY;
	END_CASE;


END_FUNCTION
//}}LSL_HIDDEN_FUNCTION

//############################################################################################
//#                                   Public Methods                                         #
//############################################################################################

FUNCTION GLOBAL DSComm_Eventjournal::AddMessage
	VAR_INPUT
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  retcode := AddEventByID(EVTJOURIF_EVENTID_MESSAGE, pText, textLength, charSize);

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddWarning
	VAR_INPUT
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  retcode := AddEventByID(EVTJOURIF_EVENTID_WARNING, pText, textLength, charSize);

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddError
	VAR_INPUT
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  retcode := AddEventByID(EVTJOURIF_EVENTID_ERROR, pText, textLength, charSize);

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddUserText
	VAR_INPUT
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  retcode := AddEventByID(EVTJOURIF_EVENTID_DEFAULT, pText, textLength, charSize);

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddUserEventByID
	VAR_INPUT
		evtID 	: UINT;
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if ((EVTJOURIF_IDRANGE_USER_MIN <= evtID) & (evtID <= EVTJOURIF_IDRANGE_USER_MAX)) then
    retcode := AddEventByID(evtID, pText, textLength, charSize);
  else
    retcode := EVTJOURIF_ERROR_EVT_ID_INVALID;
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddApplicationEventByID
	VAR_INPUT
		evtID 	: UINT;
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if ((EVTJOURIF_IDRANGE_APPLICATION_MIN <= evtID) & (evtID <= EVTJOURIF_IDRANGE_APPLICATION_MAX)) then
    retcode := AddEventByID(evtID, pText, textLength, charSize);
  else
    retcode := EVTJOURIF_ERROR_EVT_ID_INVALID;
  end_if;

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddUserEntryByID
	VAR_INPUT
		evtID 	: UINT;
		pData 	: ^void;
		size 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if ((EVTJOURIF_IDRANGE_USER_MIN <= evtID) & (evtID <= EVTJOURIF_IDRANGE_USER_MAX)) then
    retcode := AddEntryByID(evtID, pData, size);
  else
    retcode := EVTJOURIF_ERROR_EVT_ID_INVALID;
  end_if;

END_FUNCTION


FUNCTION GLOBAL DSComm_Eventjournal::AddApplicationEntryByID
	VAR_INPUT
		evtID 	: UINT;
		pData 	: ^void;
		size 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if ((EVTJOURIF_IDRANGE_APPLICATION_MIN <= evtID) & (evtID <= EVTJOURIF_IDRANGE_APPLICATION_MAX)) then
    retcode := AddEntryByID(evtID, pData, size);
  else
    retcode := EVTJOURIF_ERROR_EVT_ID_INVALID;
  end_if;

END_FUNCTION

//############################################################################################
//#                                  Private Methods                                         #
//############################################################################################

FUNCTION DSComm_Eventjournal::AddEventByID
	VAR_INPUT
		evtID 	: UINT;
		pText 	: ^UINT;
		textLength 	: UDINT;
		charSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  VAR
    str16Buffer   : Array [0..EVTJOURIF_MAX_STRING_LENGTH] of UINT;
    msgLength     : UDINT;
  END_VAR
  
  if (pText = NIL) then
    retcode := EVTJOURIF_ERROR_NIL_POINTER;
    return;
  end_if;
  
  msgLength := CopyString(#str16Buffer[0], EVTJOURIF_MAX_STRING_LENGTH, pText, textLength, charSize);
  
  retcode := AddEntryByID(evtID, #str16Buffer[0], msgLength * to_UDINT(sizeof(_UNI)));

END_FUNCTION


FUNCTION DSComm_Eventjournal::AddEntryByID
	VAR_INPUT
		evtID 	: UINT;
		pData 	: ^void;
		size 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  VAR
  	evtJour_Entry : DSComm::_DS_EventjournalAddCmd;
  END_VAR
  
  if (pData = NIL) then
    retcode := EVTJOURIF_ERROR_NIL_POINTER;
    return;
  end_if;
  
  evtJour_Entry.Id    := evtID;
  evtJour_Entry.pData := pData$^CHAR;
  evtJour_Entry.Size  := size;

  retcode := DSComm_Interface.EventjournalAdd(1, #evtJour_Entry);

END_FUNCTION

//############################################################################################
//#                                   NEW INST METHODS                                       #
//############################################################################################

FUNCTION DSComm_Eventjournal::NiAddMessage
	VAR_INPUT
		pTextID 	: DINT;
		textLength 	: DINT;
		charSize 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  
  retcode^ := AddMessage(pTextID$^UINT, to_udint(textLength), to_usint(charSize));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION


FUNCTION DSComm_Eventjournal::NiAddWarning
	VAR_INPUT
		pText 	: DINT;
		textLength 	: DINT;
		charSize 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  
  retcode^ := AddWarning(pText$^UINT, to_udint(textLength), to_usint(charSize));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION


FUNCTION DSComm_Eventjournal::NiAddError
	VAR_INPUT
		pText 	: DINT;
		textLength 	: DINT;
		charSize 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  
  retcode^ := AddError(pText$^UINT, to_udint(textLength), to_usint(charSize));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION


FUNCTION DSComm_Eventjournal::NiAddUserText
	VAR_INPUT
		pText 	: DINT;
		textLength 	: DINT;
		charSize 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  
  retcode^ := AddUserText(pText$^UINT, to_udint(textLength), to_usint(charSize));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION


FUNCTION DSComm_Eventjournal::NiAddEventByID
	VAR_INPUT
		evtID 	: DINT;
		pText 	: DINT;
		textLength 	: DINT;
		charSize 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR
  
  retcode^ := AddEventByID(to_UINT(evtID), pText$^UINT, to_udint(textLength), to_usint(charSize));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION


FUNCTION DSComm_Eventjournal::NiAddEntry
	VAR_INPUT
		evtID 	: DINT;
		pData 	: DINT;
		size 	: DINT;
		retcode 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR

  retcode^ := AddEntryByID(to_UINT(evtID), pData$^void, to_udint(size));
  
  if (retcode^ >= 0) then
	  ret_code := READY;
  else
    ret_code := ERROR;
  end_if;
  
END_FUNCTION

//############################################################################################
//#                                  Support Methods                                         #
//############################################################################################

FUNCTION DSComm_Eventjournal::CopyString
	VAR_INPUT
		pDest 	: ^UINT;
		destLeng 	: UDINT;
		pSrc 	: ^UINT;
		srcLeng 	: UDINT;
		srcChrSize 	: USINT;
	END_VAR
	VAR_OUTPUT
		strLength 	: UDINT;
	END_VAR
  VAR
    strBuffer     : Array [0..EVTJOURIF_MAX_STRING_LENGTH] of CHAR;
    lengToCopy    : UDINT;
    pTermination  : ^UINT;
  END_VAR
  
  lengToCopy := srcLeng;
  if (lengTocopy >= destLeng) then
    lengToCopy := destLeng - 1; // -1 because of the 0-Stringtermination
  end_if;
  
  if (srcChrSize <> sizeof(_UNI)) then
    SigCLib.StrNCpy(#strBuffer[0], pSrc$^CHAR, lengToCopy);
    strBuffer[lengToCopy] := 0;
    SigCLib.ToStr16(pDest, #strBuffer[0]);
  else
    SigCLib.StrNCpy16(pDest, pSrc, lengToCopy);
    pTermination := pDest + (lengToCopy * 2);
    pTermination^ := 0;
  end_if;
  
  strLength := lengToCopy + 1; // +1 because of the 0-Stringtermination

END_FUNCTION
