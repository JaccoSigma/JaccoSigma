//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CIPC_IOs"
	Revision           = "1.1"
	GUID               = "{25F5BE1F-C956-4F77-A8E2-D0265A388E06}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\DigInOut.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(660,420)"
	Comment            = "Hardwareclass to access the IOs on the CIPC.">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HaeTho"/>
		<Dokumentation Revision="1.1" Date="16.11.2018" Author="HaeTho" Company="Sigmatek" Description="Index of sub classes for CAN- and seriell connection is now &gt;= 1&#13;&#10;Add server for Ethernet connection"/>
		<Dokumentation Revision="1.0" Date="02.08.2018" Author="HaeTho" Company="Sigmatek" Description="Hardware-Editor Bus-Connectors, first library version"/>
	</RevDoku>
	<Network Name="CIPC_IOs">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{6063BC35-D16A-4D0E-8572-B80BE7F2E071}"
				Class      = "XXXBase_IOs"
				Position   = "(398,120)"
				Visualized = "false">
				<Channels>
					<Server Name="CAN_1_Connect"/>
					<Server Name="CAN_2_Connect"/>
					<Server Name="ClassState"/>
					<Server Name="COM_1_Connect"/>
					<Server Name="COM_2_Connect"/>
					<Server Name="COM_3_Connect"/>
					<Server Name="Ethernet_1_Connect"/>
					<Server Name="Ethernet_2_Connect"/>
					<Server Name="Ethernet_3_Connect"/>
					<Server Name="Ethernet_4_Connect"/>
					<Server Name="USB_1_Connect"/>
					<Client Name="To_HwControl"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
			<Comment Position="(690,900)" Size="(180,90)"/>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(1156,210),(984,210),"/>
			<Connection Source="this.USB_1_Connect" Destination="_base.USB_1_Connect" Vertices="(1156,270),(984,270),"/>
			<Connection Source="_base.To_HwControl" Destination="this.To_HwControl" Vertices="(398,210),(38,210),"/>
			<Connection Source="this.CAN_1_Connect" Destination="_base.CAN_1_Connect" Vertices="(1156,390),(984,570),"/>
			<Connection Source="this.CAN_2_Connect" Destination="_base.CAN_2_Connect" Vertices="(1156,450),(984,630),"/>
			<Connection Source="this.COM_1_Connect" Destination="_base.COM_1_Connect" Vertices="(1156,510),(984,690),"/>
			<Connection Source="this.COM_2_Connect" Destination="_base.COM_2_Connect" Vertices="(1156,570),(984,750),"/>
			<Connection Source="this.Ethernet_1_Connect" Destination="_base.Ethernet_1_Connect" Vertices="(1156,330),(984,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using XXXBase_IOs

CIPC_IOs : CLASS
: XXXBase_IOs
  //Servers:
  //Clients:
  //Variables:
  //Functions:
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CIPC_IOs::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_CIPC_IOS
1$UINT, 1$UINT, (SIZEOF(::CIPC_IOs))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1775827612), "CIPC_IOs", //Class
TO_UDINT(819479645), "XXXBase_IOs", 1$UINT, 1$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_CIPC_IOs 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CIPC_IOs] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CIPC_IOs::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= XXXBase_IOs::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= XXXBase_IOs::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, XXXBase_IOs::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_CIPC_IOs;
	XXXBase_IOs::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF XXXBase_IOs::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
