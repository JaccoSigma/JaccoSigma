//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#pragma usingLtd DSComm_Interface
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "Send_Message"
	Revision           = "0.0"
	GUID               = "{533E6ACF-6577-4790-AFBA-BAADF944B1DA}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(340,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{457C73AC-3AE7-40A2-95A2-644590EEBC25}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="DSComm" Required="true" Internal="false"/>
		<Client Name="Link_E" Required="true" Internal="false"/>
		<Client Name="SigCLib" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
Send_Message : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	Link_E 	: CltChCmd_DSComm_Eventjournal;
	SigCLib 	: CltChCmd_SigCLib;
	DSComm 	: CltChCmd_DSComm;
  //Variables:
		retcode 	: DINT;
		Variable 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DSComm
#pragma usingLtd DSComm_Eventjournal
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Send_Message::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_SEND_MESSAGE
0$UINT, 0$UINT, (SIZEOF(::Send_Message))$UINT, 
1$UINT, 3$UINT, 0$UINT, 
TO_UDINT(212889175), "Send_Message", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Send_Message.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::Send_Message.Link_E.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2687166503), "Link_E", TO_UDINT(2754536051), "DSComm_Eventjournal", 1$UINT, 0$UINT, 
(::Send_Message.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 37$UINT, 
(::Send_Message.DSComm.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3848629641), "DSComm", TO_UDINT(3848629641), "DSComm", 2$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_Send_Message 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Send_Message] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Send_Message::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Send_Message, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//werkt niet

FUNCTION VIRTUAL GLOBAL Send_Message::ClassSvr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  VAR
  	pText : ^CHAR;
  END_VAR
  
  ClassSvr := input;
  
  pText := "12345"; 
  ClassSvr := Link_E.AddMessage(pText:=pText$^UINT, textLength:=5, charSize:=sizeof(_ASCII));
  
  
	result := ClassSvr;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Send_Message::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
    VAR
    username : array [0..15] of uint;
    password : array [0..15] of uint;
  END_VAR
  
  
  if Variable = 0 then
    sigclib_tostr16(dst0:=#username[0], src0:="superuser");
    sigclib_tostr16(dst0:=#password[0], src0:="sigmatek");

    retcode := DSComm.UserLogin(pThis:=Link_E.pCh$^DSComm_Interface, pUserName:=#username[0], pPassword:=#password[0]);
    Variable := 1;
  end_if;


	state := READY;

END_FUNCTION
