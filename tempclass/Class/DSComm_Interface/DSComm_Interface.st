//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "DSComm_Interface"
	Revision           = "2.3"
	GUID               = "{3EBB9022-3CFA-4989-816E-89AC11A33323}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,1080)"
	Comment            = "Application interface to the class DSComm.&#13;&#10;In a derivation of the class DSComm_Interface, the response methods (GetVersionResp, etc.) must be overwritten in order to process the DataService responses.&#13;&#10;&#13;&#10;Anwendungsschnittstelle zur Klasse DSComm.&#13;&#10;In einer Ableitung der Klasse DSComm_Interface müssen die Antwortmethoden (GetVersionResp etc.) überschrieben werden, um die Antworten des DataService zu verarbeiten.">
	<Channels>
		<Server Name="ClassSvr" GUID="{ED77AC00-2DBB-4269-951C-FDFC372A83AD}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="DSComm" Required="true" Internal="false" Comment="Must be connected to the ClassSvr of a DSComm object.&#13;&#10;&#13;&#10;Muss mit dem ClassSvr eines DSComm-Objekts verbunden werden."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek GmbH" Author="FucHer"/>
		<Dokumentation Revision="2.3" Date="2021-04-10" Author="FucHer" Company="Sigmatek GmbH" Description="Comments updated."/>
		<Dokumentation Revision="2.2" Date="2021-03-23" Author="FucHer" Company="Sigmatek GmbH" Description="New methods SubscribeState(), UnsubscribeState(), GetState(), SubscribeStateResp(), UnsubscribeStateResp(), GetStateResp(), UpdateStatePush(()."/>
		<Dokumentation Revision="2.1" Date="2021-01-31" Author="FucHer" Company="Sigmatek GmbH" Description="New method StrLenUtf8()."/>
		<Dokumentation Revision="2.0" Date="2020-12-04" Author="FucHer" Company="Sigmatek GmbH" Description="DataService communication protocol has changed: All kinds of lists (after &lt;num&gt;) were extended by size. All strings were extended by strlen. User- and role-functions were extended by AccessNumberValid and AccessNumber."/>
		<Dokumentation Revision="1.2" Date="2020-06-18" Author="FucHer" Company="Sigmatek GmbH" Description="DEVVIS-42: the class DSComm_Interface shall be extended by the new alarm functions of the data service:&#13;&#10;AlarmList Update Add, AlarmList Update Sub, HotAlarm Update Add, HotAlarm Update Sub, Alarm Delete, Alarm Delete All as well as the associated push messages."/>
		<Dokumentation Revision="1.1" Date="2020-01-09" Author="FucHer&#13;&#10;" Company="Sigmatek GmbH" Description="Release.&#13;&#10;"/>
		<Dokumentation Revision="1.0" Date="2019-01-18" Author="FucHer" Company="Sigmatek GmbH" Description="First version."/>
	</RevDoku>
</Class>
*)
DSComm_Interface : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	DSComm 	: CltChCmd_DSComm;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="Returns the information whether a connection to the data service exists.&#13;&#10;&#13;&#10;Liefert die Information, ob eine Verbindung zum Dataservice besteht." Name="IsConnected"/>
	FUNCTION GLOBAL IsConnected
		VAR_OUTPUT
			OutParam 	: BOOL;			//! <Variable Comment="TRUE: a connection to the data service is available.&#13;&#10;FALSE: there is no connection to the data service.&#13;&#10;&#13;&#10;TRUE: eine Verbindung zum Dataservice ist vorhanden.&#13;&#10;FALSE: es ist keine Verbindung zum Dataservice vorhanden." Name="IsConnected.OutParam"/>
		END_VAR;
				//! <Function Comment="Returns the ID of the user who is logged in to the data service.&#13;&#10;&#13;&#10;Liefert die ID des Benutzer welcher beim Dataservice angemeldet ist." Name="GetLoginInfo"/>
	FUNCTION GLOBAL GetLoginInfo
		VAR_OUTPUT
			userID 	: UDINT;			//! <Variable Comment="  = 0: no user is logged in.&#13;&#10;&lt;&gt; 0: ID of the user who is logged in to the data service.&#13;&#10;&#13;&#10;  = 0: Es ist kein Benutzer angemeldet.&#13;&#10;&lt;&gt; 0: Die ID des angemeldeten Benutzers." Name="GetLoginInfo.userID"/>
		END_VAR;
				//! <Function Comment="Used to cancel running background processes (e.g. copying files).&#13;&#10;&#13;&#10;Wird verwendet um laufende Hintergrund Prozesse (zB. kopieren von Dateien) abzubrechen.&#10;&#10;" Name="CancelCommand"/>
	FUNCTION GLOBAL CancelCommand
		VAR_INPUT
			HandleID 	: DINT;			//! <Variable Comment="The MessageID of the command that is to be canceled.&#13;&#10;&#13;&#10;Die MessageID des Kommandos, das abgebrochen werden soll." Name="CancelCommand.HandleID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="CancelCommand.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the version of the data service.&#13;&#10;&#13;&#10;Liefert die Version des Dataservice zurück." Name="GetVersion"/>
	FUNCTION GLOBAL GetVersion
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetVersion.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the name of the current project and the version of the data service..&#13;&#10;&#13;&#10;Liefert den Namen des aktuellen Projekts und die Version des DatenService zurück." Name="GetProjectInfo"/>
	FUNCTION GLOBAL GetProjectInfo
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetProjectInfo.MessageID"/>
		END_VAR;
				//! <Function Comment="This method registers an object to receive state change events. &#13;&#10;Status change events are passed to the UpdateStatePush() method in the object that called the SubscribeState() method.&#13;&#10;Only one object can be registered to receive state change events.&#13;&#10;&#13;&#10;Mit dieser Methode meldet sich ein Objekt für den Empfang von Statusänderungs-Events an. &#13;&#10;Statusänderungs-Events werden an die Methode UpdateStatePush() in jenem Objekt übergeben, welches die Methode SubscribeState() aufgerufen hat.&#13;&#10;Es kann nur ein Objekt für den Empfang von Statusänderungs-Events angemeldet sein." Name="SubscribeState"/>
	FUNCTION GLOBAL SubscribeState
		VAR_INPUT
			pCmdData 	: ^DSComm::_DS_SubscribeStateCmd;			//! <Variable Comment="Pointer to the command data.&#13;&#10;&#13;&#10;Zeiger auf die Kommando-Daten." Name="SubscribeState.pCmdData"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pCmdData&gt; is invalid or the type pCmdData^.Typ is unknown.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum Zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pCmdData&gt; ist ungültig oder der Typ pCmdData^.Typ ist unbekannt.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SubscribeState.MessageID"/>
		END_VAR;
				//! <Function Comment="Remove registration for receiving state change events. &#13;&#10;After calling this method, no more state change events are passed to the UpdateStatePush() method.&#13;&#10;&#13;&#10;Anmeldung für den Empfang von Statusänderungs-Events entfernen. &#13;&#10;Nach dem Aufruf dieser Methode werden keine Statusänderungs-Events mehr an die Methode UpdateStatePush()  übergeben." Name="UnsubscribeState"/>
	FUNCTION GLOBAL UnsubscribeState
		VAR_INPUT
			pCmdData 	: ^DSComm::_DS_UnsubscribeStateCmd;			//! <Variable Comment="Pointer to the command data.&#13;&#10;&#13;&#10;Zeiger auf die Kommando-Daten." Name="UnsubscribeState.pCmdData"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pCmdData&gt; is invalid or the type pCmdData^.Typ is unknown.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum Zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pCmdData&gt; ist ungültig oder der Typ pCmdData^.Typ ist unbekannt.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="UnsubscribeState.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the requested state in the response data. &#13;&#10;The response data of this command received from the data service is passed to the GetStateResp() method.&#13;&#10;&#13;&#10;Liefert in den Response-Daten den angeforderten Status zurück. &#13;&#10;Die vom Data Service empfangenen Response-Daten dieses Kommandos werden an die Methode GetStateResp() übergeben." Name="Get_State"/>
	FUNCTION GLOBAL Get_State
		VAR_INPUT
			pCmdData 	: ^DSComm::_DS_GetStateCmd;			//! <Variable Comment="Pointer to the command data.&#13;&#10;&#13;&#10;Zeiger auf die Kommando-Daten." Name="Get_State.pCmdData"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pCmdData&gt; is invalid or the type pCmdData^.Typ is unknown.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum Zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pCmdData&gt; ist ungültig oder der Typ pCmdData^.Typ ist unbekannt.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="Get_State.MessageID"/>
		END_VAR;
				//! <Function Comment="Sends back the given data.&#13;&#10;Can be used to measure the signal propagation time.&#13;&#10;&#13;&#10;Sendet die Daten, welche mitgegeben wurden 1:1 wieder zurück. &#13;&#10;Kann dazu verwendet werden um die Signallaufzeit zu messen." Name="Loop"/>
	FUNCTION GLOBAL Loop
		VAR_INPUT
			Station 	: UDINT;			//! <Variable Comment="The station to which the data is to be sent (0xFFFFFFFF = DataService).&#13;&#10;&#13;&#10;Die Station zur der die Daten geschickt werden sollen (0xFFFFFFFF = DataService)." Name="Loop.Station"/>
			pDataSrc 	: pVoid;			//! <Variable Comment="Pointer to the data to be sent.&#13;&#10;&#13;&#10;Zeiger auf die Daten welche mitgesendet werden sollen." Name="Loop.pDataSrc"/>
			DataLen 	: UDINT;			//! <Variable Comment="Length of the data to be sent in bytes.&#13;&#10;&#13;&#10;Länge der Daten in Bytes welche mitgesendet werden sollen." Name="Loop.DataLen"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: pointer &lt;pDataSrc&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;pDataSrc&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="Loop.MessageID"/>
		END_VAR;
				//! <Function Comment="Loads a recipe file. The server values contained in the file are written to the controller.&#13;&#10;&#13;&#10;Lädt eine Rezeptdatei. Dabei werden die darin enthaltenen Server-Werte auf die Steuerung geschrieben." Name="RecipeLoad"/>
	FUNCTION GLOBAL RecipeLoad
		VAR_INPUT
			pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to a bit mask as filter, which data points are to be loaded (0 = no filter, i.e. load all data points).&#13;&#10;&#13;&#10;Zeiger auf eine Bitmaske als Filter, welche Datenpunkte geladen werden sollen (0 = kein Filter, d.h. alle Datenpunkte laden)." Name="RecipeLoad.pFilterIncl"/>
			pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to a bit mask as filter, which data points should NOT be loaded (0 = no filter).&#13;&#10;&#13;&#10;Zeiger auf eine Bitmaske als Filter, welche Datenpunkte NICHT geladen werden sollen (0 = kein Filter)." Name="RecipeLoad.pFilterExcl"/>
			crc 	: UDINT;			//! <Variable Comment="If a file is to be loaded with the &quot;wrong&quot; CRC, &lt;crc&gt; must match the CRC stored in the file.&#13;&#10;&#13;&#10;Soll eine Datei mit &quot;falschem&quot; CRC geladen werden, muss &lt;crc&gt; mit dem in der Datei hinterlegtem CRC übereinstimmen." Name="RecipeLoad.crc"/>
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the file to be loaded (e.g. &quot;c:\recipes\recipe.txt&quot;).&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der zu ladenden Datei (zB. &quot;c:\recipes\recipe.txt&quot;).&#13;&#10;Dies ist ein UTF8-String." Name="RecipeLoad.pDpne"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; or the pointer &lt;pFilterIncl&gt; or the ponter &lt;pFilterExcl&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; oder der Zeiger &lt;pFilterIncl&gt; oder der Zeiger &lt;pFilterExcl&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RecipeLoad.MessageID"/>
		END_VAR;
				//! <Function Comment="Saves the values of all marked servers to a recipe file. &#13;&#10;&#13;&#10;Speichert die Werte aller markierten Server in eine Rezept-Datei. " Name="RecipeSave"/>
	FUNCTION GLOBAL RecipeSave
		VAR_INPUT
			pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to a bit mask as filter, which data points are to be saved (0 = no filter, i.e. save all data points).&#13;&#10;&#13;&#10;Zeiger auf eine Bitmaske als Filter, welche Datenpunkte gespeichert werden sollen (0 = kein Filter, d.h. alle Datenpunkte speichern)." Name="RecipeSave.pFilterIncl"/>
			pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to a bit mask as filter, which data points should NOT be saved (0 = no filter).&#13;&#10;&#13;&#10;Zeiger auf eine Bitmaske als Filter, welche Datenpunkte NICHT gespeichert werden sollen (0 = kein Filter)." Name="RecipeSave.pFilterExcl"/>
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the recipe file (e.g. &quot;c:\recipes\recipe.txt&quot;).&#13;&#10;This is an UTF8-String.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der Rezept-Speicher-Datei (zB. &quot;c:\recipes\recipe.txt&quot;).&#13;&#10;Dies ist ein UTF8-String." Name="RecipeSave.pDpne"/>
			pHeaderText 	: ^CHAR;			//! <Variable Comment="Pointer to an ASCII-string to be inserted at the beginning of the recipe file.&#13;&#10;&#13;&#10;Zeiger auf einen ASCII-String welcher am Beginn der Rezeptdatei eingefügt werden soll." Name="RecipeSave.pHeaderText"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; or the pointer &lt;pHeaderText&gt; or the pointer &lt;pFilterIncl&gt; or the ponter &lt;pFilterExcl&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; oder der Zeiger &lt;pHeaderText&gt; oder der Zeiger &lt;pFilterIncl&gt; oder der Zeiger &lt;pFilterExcl&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RecipeSave.MessageID"/>
		END_VAR;
				//! <Function Comment="Distributes the sent data to all connected clients (except itself). &#13;&#10;The sender receives a response and all other clients receive the message as push notification.&#13;&#10;&#13;&#10;Verteilt die mitgeschickten Daten an alle verbundenen Clients (außer an sich selbst). &#13;&#10;Der Sender bekommt eine Response und alle anderen Clients erhalten die Nachricht als Push Notification." Name="SendToAll"/>
	FUNCTION GLOBAL SendToAll
		VAR_INPUT
			pDataSrc 	: pVoid;			//! <Variable Comment="Pointer to the data to be sent to the other clients.&#13;&#10;&#13;&#10;Zeiger auf die Daten welche an die anderen Clients geschickt werden sollen." Name="SendToAll.pDataSrc"/>
			DataLen 	: UDINT;			//! <Variable Comment="Length of the data in bytes to be sent to the other clients.&#13;&#10;&#13;&#10;Länge der Daten in Bytes welche an die anderen Clients geschickt werden sollen." Name="SendToAll.DataLen"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDataSrc&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;pDataSrc&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SendToAll.MessageID"/>
		END_VAR;
				//! <Function Comment="Sets the data service to reset mode.&#13;&#10;&#13;&#10;Setzt den Dataservice in den Reset Modus." Name="ResetDataservice"/>
	FUNCTION GLOBAL ResetDataservice
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="ResetDataservice.MessageID"/>
		END_VAR;
				//! <Function Comment="Resets the data service to the running state.&#13;&#10;&#13;&#10;Setzt den Dataservice zurück in den Running State." Name="RestartDataservice"/>
	FUNCTION GLOBAL RestartDataservice
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RestartDataservice.MessageID"/>
		END_VAR;
				//! <Function Comment="Adds an additional local client.&#13;&#10;&#13;&#10;Fügt einen zusätzlichen Local Client hinzu." Name="AddLocalClient"/>
	FUNCTION GLOBAL AddLocalClient
		VAR_INPUT
			pLocalClient 	: ^DSComm::_DS_AddLocalClientCmd;			//! <Variable Comment="Pointer to the data of the local client.&#13;&#10;&#13;&#10;Zeiger auf die Daten des Local Client." Name="AddLocalClient.pLocalClient"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pLocalClient&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pLocalClient&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="AddLocalClient.MessageID"/>
		END_VAR;
				//! <Function Comment="Adds a range of additional local clients.&#13;&#10;&#13;&#10;Fügt eine Reihe von lokalen Clients hinzu." Name="AddLocalClientRange"/>
	FUNCTION GLOBAL AddLocalClientRange
		VAR_INPUT
			pLocalClientRange 	: ^DSComm::_DS_AddLocalClientRangeCmd;			//! <Variable Comment="Pointer to the data of the local clients.&#13;&#10;&#13;&#10;Zeiger auf die Daten der Local Clients." Name="AddLocalClientRange.pLocalClientRange"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pLocalClientRange&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pLocalClientRange&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="AddLocalClientRange.MessageID"/>
		END_VAR;
				//! <Function Comment="Removes this local client from the list.&#13;&#10;&#13;&#10;Entfernt diesen Local Client aus der Liste." Name="RemoveThisLocalClient"/>
	FUNCTION GLOBAL RemoveThisLocalClient
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RemoveThisLocalClient.MessageID"/>
		END_VAR;
				//! <Function Comment="Removes the specified local client from the list.&#13;&#10;&#13;&#10;Entfernt den angegebenen Local Client aus der Liste." Name="RemoveLocalClient"/>
	FUNCTION GLOBAL RemoveLocalClient
		VAR_INPUT
			pLocalClient 	: ^DSComm::_DS_RemoveLocalClientCmd;			//! <Variable Comment="Pointer to the data of the local client.&#13;&#10;&#13;&#10;Zeiger auf die Daten des Local Client." Name="RemoveLocalClient.pLocalClient"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pLocalClient&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pLocalClient&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RemoveLocalClient.MessageID"/>
		END_VAR;
				//! <Function Comment="Removes a range of local clients from the list.&#13;&#10;&#13;&#10;Entfernt eine Reihe von lokalen Clients aus der Liste." Name="RemoveLocalClientRange"/>
	FUNCTION GLOBAL RemoveLocalClientRange
		VAR_INPUT
			pLocalClientRange 	: ^DSComm::_DS_RemoveLocalClientRangeCmd;			//! <Variable Comment="Pointer to the data of the local clients.&#13;&#10;&#13;&#10;Zeiger auf die Daten der Local Clients." Name="RemoveLocalClientRange.pLocalClientRange"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pLocalClientRange&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pLocalClientRange&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RemoveLocalClientRange.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes the entire Local Client list.&#13;&#10;&#13;&#10;Löscht die gesamte Local Client Liste." Name="ClearLocalClientList"/>
	FUNCTION GLOBAL ClearLocalClientList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="ClearLocalClientList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the ID of the currently connected session.&#13;&#10;&#13;&#10;Gibt die ID der gerade verbundenen Session zurück." Name="GetCurrentID"/>
	FUNCTION GLOBAL GetCurrentID
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetCurrentID.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the entire Local Client list.&#13;&#10;&#13;&#10;Gibt die gesamte Client Liste zurück." Name="GetLocalClientList"/>
	FUNCTION GLOBAL GetLocalClientList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetLocalClientList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the entire client list in detail.&#13;&#10;&#13;&#10;Gibt die Details der gesamten Client Liste zurück." Name="GetLocalClientListDetails"/>
	FUNCTION GLOBAL GetLocalClientListDetails
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetLocalClientListDetails.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns details of the client with the specified ID.&#13;&#10;&#13;&#10;Gibt Details des Clients mit der angegebenen ID zurück." Name="GetLocalClientByID"/>
	FUNCTION GLOBAL GetLocalClientByID
		VAR_INPUT
			pLocalClient 	: ^DSComm::_DS_GetLocalClientByIDCmd;			//! <Variable Comment="Pointer to the data of the local client.&#13;&#10;&#13;&#10;Zeiger auf die Daten des Local Client." Name="GetLocalClientByID.pLocalClient"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pLocalClient&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pLocalClient&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetLocalClientByID.MessageID"/>
		END_VAR;
				//! <Function Comment="Logs on a user.&#13;&#10;&#13;&#10;Meldet einen Benutzer an." Name="UserLogin"/>
	FUNCTION GLOBAL UserLogin
		VAR_INPUT
			pUserName 	: ^UINT;			//! <Variable Comment="Pointer to the user name of the user to be logged on.&#13;&#10;&#13;&#10;Zeiger auf den Benutzernamen des anzumeldenden Benutzers." Name="UserLogin.pUserName"/>
			pPassword 	: ^UINT;			//! <Variable Comment="Pointer to the password in plain text.&#13;&#10;&#13;&#10;Zeiger auf das Passwort im Klartext." Name="UserLogin.pPassword"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pUserName&gt; or the pointer &lt;pPassword&gt; is invalid.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;pUserName&gt; oder &lt;pPassword&gt; ist ungültig." Name="UserLogin.MessageID"/>
		END_VAR;
				//! <Function Comment="Logs off the currently logged in user.&#13;&#10;&#13;&#10;Meldet den aktuell eingeloggten Benutzer ab." Name="UserLogout"/>
	FUNCTION GLOBAL UserLogout
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="UserLogout.MessageID"/>
		END_VAR;
				//! <Function Comment="Changes the password of the currently logged in user.&#13;&#10;&#13;&#10;Ändert das Passwort des aktuell eingeloggten Benutzers." Name="UserPasswordChange"/>
	FUNCTION GLOBAL UserPasswordChange
		VAR_INPUT
			pOldPassword 	: ^UINT;			//! <Variable Comment="Pointer to the old password of the user.&#13;&#10;&#13;&#10;Zeiger auf das alte Passwort des Benutzers." Name="UserPasswordChange.pOldPassword"/>
			pNewPassword 	: ^UINT;			//! <Variable Comment="Pointer to the new password of the user.&#13;&#10;&#13;&#10;Zeiger auf das neue Passwort des Benutzers." Name="UserPasswordChange.pNewPassword"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pOldPassword&gt; or the pointer &lt;pNewPassword&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;pOldPassword&gt; oder &lt;pNewPassword&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="UserPasswordChange.MessageID"/>
		END_VAR;
				//! <Function Comment="Checks whether the given users are allowed to write and read the given access level.&#13;&#10;&#13;&#10;Prüft ob die übergebenen Benutzer den übergebenen AccessLevel schreiben und lesen dürfen." Name="CheckAccessLevel"/>
	FUNCTION GLOBAL CheckAccessLevel
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="CheckAccessLevel.num"/>
			pCheckAccessLevel 	: ^DSComm::_DS_CheckAccessLevelCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; users to check.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; zu prüfenden Benutzern." Name="CheckAccessLevel.pCheckAccessLevel"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pCheckAccessLevel&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;pCheckAccessLevel&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="CheckAccessLevel.MessageID"/>
		END_VAR;
				//! <Function Comment="Creates a new user in the system.&#13;&#10;&#13;&#10;Legt einen neuen Benutzer im System an." Name="CreateUser"/>
	FUNCTION GLOBAL CreateUser
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="CreateUser.num"/>
			pCreateUser 	: ^DSComm::_DS_CreateUserCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; users to be created.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; anzulegenden Benutzern." Name="CreateUser.pCreateUser"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pCreateUser&gt; is invalid or&#13;&#10;  a pointer in the structure _DS_CreateUserCmd is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; ist null oder der Zeiger &lt;pCreateUser&gt; ist ungültig oder&#13;&#10;  ein Zeiger in der Struktur _DS_CreateUserCmd ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="CreateUser.MessageID"/>
		END_VAR;
				//! <Function Comment="Changes the data of existing users. &#13;&#10;Note: only users created with CreateUser() can be changed.&#13;&#10;&#13;&#10;Ändert die Daten von bereits bestehenden Benutzern. &#13;&#10;Hinweis: es können nur jene Benutzer geändert werden, welche mit CreateUser() angelegt wurden." Name="ChangeUserSettings"/>
	FUNCTION GLOBAL ChangeUserSettings
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="ChangeUserSettings.num"/>
			pChangeUsrSettings 	: ^DSComm::_DS_ChangeUserSettingsCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; users to be modified.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; zu ändernden Benutzern." Name="ChangeUserSettings.pChangeUsrSettings"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pChangeUsrSettings&gt; is invalid or&#13;&#10;  a pointer in the structure _DS_ChangeUserSettingsCmd is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; ist null oder der Zeiger &lt;pChangeUsrSettings&gt; ist ungültig oder&#13;&#10;  ein Zeiger in der Struktur _DS_ChangeUserSettingsCmd ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="ChangeUserSettings.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes the given users from the system. &#13;&#10;Note: only users created with CreateUser() can be deleted.&#13;&#10;&#13;&#10;Löscht die übergebenen Benutzer aus dem System. &#13;&#10;Hinweis: es können nur jene Benutzer gelöscht werden, welche mit CreateUser() angelegt wurden." Name="DeleteUser"/>
	FUNCTION GLOBAL DeleteUser
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="DeleteUser.num"/>
			pUserID 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; users to be deleted.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Benutzer-IDs die gelöscht werden sollen." Name="DeleteUser.pUserID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pUserID&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pUserID&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="DeleteUser.MessageID"/>
		END_VAR;
				//! <Function Comment="Query the entire user list. All known user IDs are returned with the corresponding user names.&#13;&#10;&#13;&#10;Abfrage der gesamten Benutzerliste. Es werden alle bekannten BenutzerIDs mit den zugehörigen Benutzernamen zurückgeliefert." Name="GetUserList"/>
	FUNCTION GLOBAL GetUserList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetUserList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns all data for a specific user.&#13;&#10;&#13;&#10;Liefert alle Daten zu einem bestimmten Benutzer." Name="GetUserDetails"/>
	FUNCTION GLOBAL GetUserDetails
		VAR_INPUT
			userID 	: UDINT;			//! <Variable Comment="The ID of the user for whom details are to be queried.&#13;&#10;&#13;&#10;Die ID des Benutzers zu dem Details abgefragt werden sollen." Name="GetUserDetails.userID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetUserDetails.MessageID"/>
		END_VAR;
				//! <Function Comment="Creates a new role in the system.&#13;&#10;&#13;&#10;Legt eine neue Rolle im System an." Name="CreateRole"/>
	FUNCTION GLOBAL CreateRole
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="CreateRole.num"/>
			pCreateRolePara 	: ^DSComm::_DS_CreateRoleCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; roles to be created.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; anzulegenden Rollen." Name="CreateRole.pCreateRolePara"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pCreateRolePara&gt; is invalid or&#13;&#10;  a pointer in the structure _DS_CreateRoleCmd is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pCreateRolePara&gt; ist ungültig oder&#13;&#10;  ein Zeiger in der Struktur _DS_CreateRoleCmd ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="CreateRole.MessageID"/>
		END_VAR;
				//! <Function Comment="Modifies an existing role.&#13;&#10;&#13;&#10;Ändert eine bereits bestehende Rolle ab." Name="ChangeRole"/>
	FUNCTION GLOBAL ChangeRole
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="ChangeRole.num"/>
			pChangeRole 	: ^DSComm::_DS_ChangeRoleCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; roles to be modified.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; zu ändernden Rollen." Name="ChangeRole.pChangeRole"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pChangeRole&gt; is invalid or&#13;&#10;  a pointer in the structure _DS_ChangeRoleCmd is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pChangeRole&gt; ist ungültig oder&#13;&#10;  ein Zeiger in der Struktur _DS_ChangeRoleCmd ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="ChangeRole.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes the given roles from the system.&#13;&#10;&#13;&#10;Löscht die übergebenen Rollen aus dem System." Name="DeleteRole"/>
	FUNCTION GLOBAL DeleteRole
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="DeleteRole.num"/>
			pRoleID 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; roles to be deleted.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; RollenIDs die gelöscht werden sollen." Name="DeleteRole.pRoleID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pRoleID&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pRoleID&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="DeleteRole.MessageID"/>
		END_VAR;
				//! <Function Comment="Query the entire role list. &#13;&#10;All role IDs are returned with the corresponding role names.&#13;&#10;&#13;&#10;Abfrage der gesamten Rollenliste. &#13;&#10;Es werden alle RollenIDs mit den dazugehörigen Rollennamen zurückgeliefert." Name="GetRoleList"/>
	FUNCTION GLOBAL GetRoleList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetRoleList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns all data belonging to the role.&#13;&#10;&#13;&#10;Liefert alle zu der Rolle gehörigen Daten zurück." Name="GetRoleDetails"/>
	FUNCTION GLOBAL GetRoleDetails
		VAR_INPUT
			roleID 	: UDINT;			//! <Variable Comment="The ID of the role for which details are to be queried.&#13;&#10;&#13;&#10;Die ID der Rolle zu der Details abgefragt werden sollen." Name="GetRoleDetails.roleID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetRoleDetails.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the variable IDs from the datapoint names.&#13;&#10;&#13;&#10;Ermittelt die Variablen-Id aus den Datenpunkt-Namen." Name="GetVarIdFromName"/>
	FUNCTION GLOBAL GetVarIdFromName
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetVarIdFromName.num"/>
			ppName 	: ^pChar;			//! <Variable Comment="Pointer to an array with &lt;num&gt; pointers to the names of the data points.&#13;&#10;The names are in the form &lt;StationNo&gt;:&lt;Objectname&gt;.&lt;Servername&gt;.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Zeigern auf die Namen der Datenpunkte.&#13;&#10;Die Namen haben die Form &lt;Stationsnr&gt;:&lt;Objektname&gt;.&lt;Servername&gt;" Name="GetVarIdFromName.ppName"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;ppName&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;ppName&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetVarIdFromName.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the variable Ids from the Lasal Ids.&#13;&#10;&#13;&#10;Ermittelt die Variablen Id aus der Lasal Id." Name="GetVarIdFromLasalId"/>
	FUNCTION GLOBAL GetVarIdFromLasalId
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetVarIdFromLasalId.num"/>
			pLasalId 	: ^DSComm::_DS_GetVarIdFromLasalIdCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; Lasal-ID descriptions of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Lasal-ID-Beschreibungen der Datenpunkte." Name="GetVarIdFromLasalId.pLasalId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pLasalId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pLasalId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetVarIdFromLasalId.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the Lasal Ids from the names.&#13;&#10;&#13;&#10;Ermitteln der Lasal Ids aus den Namen." Name="GetLasalIdFromName"/>
	FUNCTION GLOBAL GetLasalIdFromName
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetLasalIdFromName.num"/>
			ppName 	: ^pChar;			//! <Variable Comment="Pointer to an array with &lt;num&gt; pointers to the names of the data points.&#13;&#10;The names are in the form &lt;StationNo&gt;:&lt;Objectname&gt;.&lt;Servername&gt;.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Zeigern auf die Namen der Datenpunkte.&#13;&#10;Die Namen haben die Form &lt;Stationsnr&gt;:&lt;Objektname&gt;.&lt;Servername&gt;" Name="GetLasalIdFromName.ppName"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;ppName&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;ppName&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetLasalIdFromName.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the Lasal Ids from the variable Ids.&#13;&#10;&#13;&#10;Ermittelt die Lasal Ids aus den Variablen Ids." Name="GetLasalIdFromVarId"/>
	FUNCTION GLOBAL GetLasalIdFromVarId
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetLasalIdFromVarId.num"/>
			pVarId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; variable numbers of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Variablen-Nummern der Datenpunkte." Name="GetLasalIdFromVarId.pVarId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pVarId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pVarId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetLasalIdFromVarId.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the variable names from the variable IDs.&#13;&#10;&#13;&#10;Ermittelt die Variablen Namen aus den Variablen Ids." Name="GetNameFromVarId"/>
	FUNCTION GLOBAL GetNameFromVarId
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetNameFromVarId.num"/>
			pVarId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; variable numbers of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Variablen-Nummern der Datenpunkte." Name="GetNameFromVarId.pVarId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pVarId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pVarId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetNameFromVarId.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the variable names from the Lasal Ids.&#13;&#10;&#13;&#10;Ermittelt die Variablen Namen aus den Lasal Ids." Name="GetNameFromLasalId"/>
	FUNCTION GLOBAL GetNameFromLasalId
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetNameFromLasalId.num"/>
			pLasalId 	: ^DSComm::_DS_GetNameFromLasalIdCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; Lasal-ID descriptions of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Lasal-ID-Beschreibungen der Datenpunkte." Name="GetNameFromLasalId.pLasalId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pLasalId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pLasalId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetNameFromLasalId.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the list of all data points.&#13;&#10;&#13;&#10;Liefert die Liste aller Datenpunkte." Name="GetDpList"/>
	FUNCTION GLOBAL GetDpList
		VAR_INPUT
			pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to the include filter. Zero = include all data points.&#13;&#10;&#13;&#10;Zeiger auf den Include Filter. Null = alle Datenpunkte einschließen." Name="GetDpList.pFilterIncl"/>
			pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;			//! <Variable Comment="Pointer to the exclude filter. Zero = do not exclude any data points.&#13;&#10;&#13;&#10;Zeiger auf den Exclude Filter. Null = keine Datenpunkte ausschließen." Name="GetDpList.pFilterExcl"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pFilterIncl&gt; or the pointer &lt;pFilterExcl&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pFilterIncl&gt; oder der Zeiger &lt;pFilterExcl&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetDpList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns all information about a specific data point.&#13;&#10;&#13;&#10;Liefert alle Informationen zu einem bestimmten Datenpunkt." Name="GetDpInfo"/>
	FUNCTION GLOBAL GetDpInfo
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetDpInfo.num"/>
			pVarId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; variable numbers of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Variablen-Nummern der Datenpunkte." Name="GetDpInfo.pVarId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pVarId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pVarId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetDpInfo.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the variable IDs using the CRC values.&#13;&#10;&#13;&#10;Ermittelt die Variablen Ids anhand des CRC-Werte." Name="GetVarIdFromCRC"/>
	FUNCTION GLOBAL GetVarIdFromCRC
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetVarIdFromCRC.num"/>
			pCRC 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; CRCs of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; CRCs der Datenpunkte." Name="GetVarIdFromCRC.pCRC"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pCRC&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pCRC&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetVarIdFromCRC.MessageID"/>
		END_VAR;
				//! <Function Comment="Determines the CRC values using the variable IDs.&#13;&#10;&#13;&#10;Ermittelt die CRC-Werte anhand der Variablen Ids." Name="GetCRCfromVarId"/>
	FUNCTION GLOBAL GetCRCfromVarId
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetCRCfromVarId.num"/>
			pVarId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; variable numbers of the data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; VarIds der Datenpunkte." Name="GetCRCfromVarId.pVarId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pVarId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pVarId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetCRCfromVarId.MessageID"/>
		END_VAR;
				//! <Function Comment="Queries the values of numeric data points.&#13;&#10;&#13;&#10;Fragt die Werte von numerischen Datenpunkten ab." Name="GetValue"/>
	FUNCTION GLOBAL GetValue
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetValue.num"/>
			pGetValue 	: ^DSComm::_DS_GetValueCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; descriptions of the numeric data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Beschreibungen der numerischen Datenpunkte." Name="GetValue.pGetValue"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pGetValue&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pGetValue&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetValue.MessageID"/>
		END_VAR;
				//! <Function Comment="Queries the values of string data points.&#13;&#10;&#13;&#10;Fragt die Werte von String-Datenpunkten ab." Name="GetString"/>
	FUNCTION GLOBAL GetString
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetString.num"/>
			pGetString 	: ^DSComm::_DS_GetStringCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; descriptions of the string data points.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Beschreibungen der String-Datenpunkte." Name="GetString.pGetString"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pGetString&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pGetString&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetString.MessageID"/>
		END_VAR;
				//! <Function Comment="Sets the values of numeric data points.&#13;&#10;&#13;&#10;Setzt die Werte von numerischen Datenpunkten." Name="SetValue"/>
	FUNCTION GLOBAL SetValue
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="SetValue.num"/>
			pSetValue 	: ^DSComm::_DS_SetValueCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; numeric data points to be written.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; zu schreibenden numerischen Datenpunkten." Name="SetValue.pSetValue"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pSetValue&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pSetValue&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SetValue.MessageID"/>
		END_VAR;
				//! <Function Comment="Sets the values of string data points.&#13;&#10;&#13;&#10;Setzt die Werte von String-Datenpunkten." Name="SetString"/>
	FUNCTION GLOBAL SetString
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="SetString.num"/>
			pSetString 	: ^DSComm::_DS_SetStringCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; string data points to be written.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; zu schreibenden String-Datenpunkten." Name="SetString.pSetString"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pSetString&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pSetString&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SetString.MessageID"/>
		END_VAR;
				//! <Function Comment="Increments the values of one ore more numeric data points.&#13;&#10;&#13;&#10;Inkrementiert die Werte von numerischen Datenpunkten." Name="IncValue"/>
	FUNCTION GLOBAL IncValue
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="IncValue.num"/>
			pdpId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; VarIDs of the numeric data points to be incremented.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; VarIDs der numerischen Datenpunkte die inkrementiert werden sollen." Name="IncValue.pdpId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pDpId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pDpId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="IncValue.MessageID"/>
		END_VAR;
				//! <Function Comment="Decrements the values of one ore more numeric data points.&#13;&#10;&#13;&#10;Dekrementiert die Werte von numerischen Datenpunkten." Name="DecValue"/>
	FUNCTION GLOBAL DecValue
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="DecValue.num"/>
			pdpId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; VarIDs of the numeric data points to be decremented.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; VarIDs der numerischen Datenpunkte die dekrementiert werden sollen." Name="DecValue.pdpId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pDpId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pDpId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="DecValue.MessageID"/>
		END_VAR;
				//! <Function Comment="Adds numeric data points and string data points to the refresh list.&#13;&#10;From now on the method RefListUpdatePush() will be called if the value of such a numeric server changes and &#13;&#10;from now on the method RefListUpdateStringPush() will be called if the value of such a string server changes.&#13;&#10;These methods are called in the object that has registered itself with RefListAdd() for value changes.&#13;&#10;&#13;&#10;Fügt numerische Datenpunkte und String-Datenpunkte zur Refresh-Liste hinzu.&#13;&#10;Ab jetzt wird die Methode RefListUpdatePush() aufgerufen, wenn sich der Wert eines &#13;&#10;solchen numerischen Servers ändert und ab jetzt wird die Methode RefListUpdateStringPush() aufgerufen, &#13;&#10;wenn sich der Wert eines solchen String-Servers ändert.&#13;&#10;Diese Methoden werden in jenem Objekt aufgerufen, welches sich mit RefListAdd() für Wert-Änderungen registriert hat." Name="RefListAdd"/>
	FUNCTION GLOBAL RefListAdd
		VAR_INPUT
			channel 	: UDINT;			//! <Variable Comment="ID of the Reflist channel to which the data points are to be added. &#13;&#10;The maximum allowed value is MAX_CHANNEL.&#13;&#10;&#13;&#10;ID des Reflist Kanals zu dem die Datenpunkte hinzugefügt werden sollen. &#13;&#10;Der maximal erlaubte Wert ist MAX_CHANNEL." Name="RefListAdd.channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="RefListAdd.num"/>
			pDpId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; VarIDs of the data points to be added to the refresh list.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; VarIDs der Datenpunkte, die zur Refresh-Liste hinzugefügt werden sollen." Name="RefListAdd.pDpId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pDpId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pDpId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RefListAdd.MessageID"/>
		END_VAR;
				//! <Function Comment="Removes numeric data points and string data points from the refresh list.&#13;&#10;The methodes RefListUpdatePush() resp. RefListUpdateStringPush() will no longer &#13;&#10;be called for the deleted data points or string data points.&#13;&#10;&#13;&#10;Löscht Datenpunkte aus der Refresh-Liste.&#13;&#10;Die Methoden RefListUpdatePush() bzw. RefListUpdateStringPush() werden für die gelöschten Datenpunkte nicht mehr aufgerufen." Name="RefListSub"/>
	FUNCTION GLOBAL RefListSub
		VAR_INPUT
			channel 	: UDINT;			//! <Variable Comment="ID of the Reflist channel from which the data points are to be removed. &#13;&#10;The maximum allowed value is MAX_CHANNEL.&#13;&#10;&#13;&#10;ID des Reflist Kanals von dem die Datenpunkte entfernt werden sollen. &#13;&#10;Der maximal erlaubte Wert ist MAX_CHANNEL." Name="RefListSub.channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="RefListSub.num"/>
			pDpId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; VarIDs of the data points to be removed from the refresh list.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; VarIDs der Datenpunkte die von der Refresh-Liste entfernt werden sollen." Name="RefListSub.pDpId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pDpId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pDpId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="RefListSub.MessageID"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of CancelCommand() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von CancelCommand() zur Verfügung stehen.&#13;&#10;Wenn diese Daten später noch benötigt werden, müssen sie sofort umkopiert werden." Name="CancelCommandResp"/>
	FUNCTION VIRTUAL GLOBAL CancelCommandResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="CancelCommandResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="CancelCommandResp.ErrorNo"/>
			pCancelRsp 	: ^DSComm::_DS_CancelResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CancelCommandResp.pCancelRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetVersion() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetVersion() zur Verfügung stehen.&#13;&#10;Wenn diese Daten später noch benötigt werden, müssen sie sofort umkopiert werden." Name="GetVersionResp"/>
	FUNCTION VIRTUAL GLOBAL GetVersionResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetVersionResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetVersionResp.ErrorNo"/>
			pGetVersionRsp 	: ^DSComm::_DS_GetVersionResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVersionResp.pGetVersionRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetProjectInfo() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetProjectInfo() zur Verfügung stehen.&#13;&#10;Wenn diese Daten später noch benötigt werden, müssen sie sofort umkopiert werden." Name="GetProjectInfoResp"/>
	FUNCTION VIRTUAL GLOBAL GetProjectInfoResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetProjectInfoResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetProjectInfoResp.ErrorNo"/>
			pGetProjectInfoRsp 	: ^DSComm::_DS_GetProjectInfoResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetProjectInfoResp.pGetProjectInfoRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SendUserEvent() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SendUserEvent() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SendUserEventResp"/>
	FUNCTION VIRTUAL GLOBAL SendUserEventResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SendUserEventResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SendUserEventResp.ErrorNo"/>
			pUserEventRsp 	: ^DSComm::_DS_UserEventResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SendUserEventResp.pUserEventRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SubscribeState() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SubscribeState() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SubscribeStateResp"/>
	FUNCTION VIRTUAL GLOBAL SubscribeStateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SubscribeStateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SubscribeStateResp.ErrorNo"/>
			pSubscribeStateRsp 	: ^DSComm::_DS_SubscribeStateResp;
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UnsubscribeState() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UnsubscribeState() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UnsubscribeStateResp"/>
	FUNCTION VIRTUAL GLOBAL UnsubscribeStateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UnsubscribeStateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UnsubscribeStateResp.ErrorNo"/>
			pUnsubscribeStateRsp 	: ^DSComm::_DS_UnsubscribeStateResp;
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of Get_State() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von Get_State() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="Get_StateResp"/>
	FUNCTION VIRTUAL GLOBAL Get_StateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="Get_StateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="Get_StateResp.ErrorNo"/>
			pGetStateRsp 	: ^DSComm::_DS_GetStateResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="Get_StateResp.pGetStateRsp"/>
		END_VAR;
				//! <Function Comment="This push notification is sent by the Data Service when a status changes.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Push Notification wird vom Data Service verschickt, wenn sich ein Status ändert..&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UpdateStatePush"/>
	FUNCTION VIRTUAL GLOBAL UpdateStatePush
		VAR_INPUT
			pUpdateState 	: ^DSComm::_DS_GetStateResp;			//! <Variable Comment="Pointer to the changed status data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die geänderten Status-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UpdateStatePush.pUpdateState"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of Loop() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von Loop() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="LoopResp"/>
	FUNCTION VIRTUAL GLOBAL LoopResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="LoopResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="LoopResp.ErrorNo"/>
			Station 	: UDINT;			//! <Variable Comment="The station to which the data was sent.&#13;&#10;&#13;&#10;Die Station an die die Daten gesendet wurden." Name="LoopResp.Station"/>
			pData 	: pVoid;			//! <Variable Comment="Pointer to the data sent with the Command Loop(). If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Daten welche beim Command Loop() mitgesendet wurden. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="LoopResp.pData"/>
			Length 	: UDINT;			//! <Variable Comment="Lenght of the data in bytes pointed to by &lt;pData&gt;.&#13;&#10;&#13;&#10;Länge der Daten in Bytes, auf die &lt;pData&gt; zeigt." Name="LoopResp.Length"/>
		END_VAR;
				//! <Function Comment="This push notification is sent by the data service once or several times to inform the status of background processes. &#13;&#10;These background processes are FileCopy(), FileMove() and FileRemove() when an entire directory is copied, moved or deleted. &#13;&#10;If the status data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Push Notification wird vom Data Service einmal oder mehrmals verschickt, um den Status von Hintergrundprozessen mitzuteilen. &#13;&#10;Diese Hintergrundprozesse sind FileCopy(), FileMove() und FileRemove(), wenn ein ganzes Verzeichnis kopiert, verschoben oder gelöscht wird. &#13;&#10;Die Status-Daten müssen bei Bedarf sofort umkopiert werden." Name="ProgressStatusPush"/>
	FUNCTION VIRTUAL GLOBAL ProgressStatusPush
		VAR_INPUT
			pProgressStatus 	: ^DSComm::_DS_ProgressStatus;			//! <Variable Comment="Pointer to the progress status data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den Progress Status. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ProgressStatusPush.pProgressStatus"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RecipeLoad() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RecipeLoad() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RecipeLoadResp"/>
	FUNCTION VIRTUAL GLOBAL RecipeLoadResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RecipeLoadResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RecipeLoadResp.ErrorNo"/>
			pRecipeLoadRsp 	: ^DSComm::_DS_RecipeLoadResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RecipeLoadResp.pRecipeLoadRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RecipeSave() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RecipeSave() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RecipeSaveResp"/>
	FUNCTION VIRTUAL GLOBAL RecipeSaveResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RecipeSaveResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RecipeSaveResp.ErrorNo"/>
			pRecipeSaveRsp 	: ^DSComm::_DS_RecipeSaveResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RecipeSaveResp.pRecipeSaveRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SendToAll() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SendToAll() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SendToAllResp"/>
	FUNCTION VIRTUAL GLOBAL SendToAllResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SendToAllResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SendToAllResp.ErrorNo"/>
		END_VAR;
				//! <Function Comment="This push notification is sent to all connected clients after a SendToAll().&#13;&#10;The method SendToAllPush() is called in the object that called the method UserLogin().&#13;&#10;It follows that SendToAllPush() is called only after UserLogin() has been called.&#13;&#10;After calling UserLogout() the method SendToAllPush() is no longer called. &#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Push Notification wird nach einem SendToAll() an alle verbundenen Clients gesendet.&#13;&#10;Die Methode SendToAllPush() wird in jenem Objekt aufgerufen, welches die Methode UserLogin() aufgerufen hat.&#13;&#10;Daraus folgt auch, dass SendToAllPush() erst aufgerufen wird, nachdem UserLogin() aufgerufen wurde.&#13;&#10;Nach dem Aufruf von UserLogout() wird die Methode SendToAllPush() nicht mehr aufgerufen. &#13;&#10;Die Daten müssen bei Bedarf sofort umkopiert werden." Name="SendToAllPush"/>
	FUNCTION VIRTUAL GLOBAL SendToAllPush
		VAR_INPUT
			MessageID 	: DINT;
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="SendToAllPush.ErrorNo"/>
			pData 	: ^CHAR;			//! <Variable Comment="Pointer to the data sent by the sender with SendToAll(). &#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Daten welche vom Sender mit SendToAll() verschickt wurden.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SendToAllPush.pData"/>
			Length 	: UDINT;			//! <Variable Comment="Lenght of the data in bytes pointed to by &lt;pData&gt;.&#13;&#10;&#13;&#10;Länge der Daten in Bytes, auf die &lt;pData&gt; zeigt." Name="SendToAllPush.Length"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of ResetDataservice() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von ResetDataservice() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ResetDataserviceResp"/>
	FUNCTION VIRTUAL GLOBAL ResetDataserviceResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="ResetDataserviceResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="ResetDataserviceResp.ErrorNo"/>
			pResetDataserviceRsp 	: ^DSComm::_DS_ResetDataserviceResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ResetDataserviceResp.pResetDataserviceRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RestartDataservice() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RestartDataservice() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden. Ab jetzt können wieder Kommandos an den Data Service abgegeben werden." Name="RestartDataserviceResp"/>
	FUNCTION VIRTUAL GLOBAL RestartDataserviceResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RestartDataserviceResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RestartDataserviceResp.ErrorNo"/>
			pRestartDataserviceRsp 	: ^DSComm::_DS_RestartDataserviceResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RestartDataserviceResp.pRestartDataserviceRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of AddLocalClient() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von AddLocalClient() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AddLocalClientResp"/>
	FUNCTION VIRTUAL GLOBAL AddLocalClientResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="AddLocalClientResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="AddLocalClientResp.ErrorNo"/>
			pAddLocalClientRsp 	: ^DSComm::_DS_AddLocalClientResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AddLocalClientResp.pAddLocalClientRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of AddLocalClientRange() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von AddLocalClientRange() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AddLocalClientRangeResp"/>
	FUNCTION VIRTUAL GLOBAL AddLocalClientRangeResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="AddLocalClientRangeResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="AddLocalClientRangeResp.ErrorNo"/>
			pAddLocalClientRangeRsp 	: ^DSComm::_DS_AddLocalClientRangeResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AddLocalClientRangeResp.pAddLocalClientRangeRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RemoveThisLocalClient() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RemoveThisLocalClient() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveThisLocalClientResp"/>
	FUNCTION VIRTUAL GLOBAL RemoveThisLocalClientResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RemoveThisLocalClientResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RemoveThisLocalClientResp.ErrorNo"/>
			pRemoveThisLocalClientRsp 	: ^DSComm::_DS_RemoveThisLocalClientResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveThisLocalClientResp.pRemoveThisLocalClientRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RemoveLocalClient() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RemoveLocalClient() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveLocalClientResp"/>
	FUNCTION VIRTUAL GLOBAL RemoveLocalClientResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RemoveLocalClientResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RemoveLocalClientResp.ErrorNo"/>
			pRemoveLocalClientRsp 	: ^DSComm::_DS_RemoveLocalClientResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveLocalClientResp.pRemoveLocalClientRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RemoveLocalClientRange() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RemoveLocalClientRange() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveLocalClientRangeResp"/>
	FUNCTION VIRTUAL GLOBAL RemoveLocalClientRangeResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RemoveLocalClientRangeResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RemoveLocalClientRangeResp.ErrorNo"/>
			pRemoveLocalClientRangeRsp 	: ^DSComm::_DS_RemoveLocalClientRangeResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RemoveLocalClientRangeResp.pRemoveLocalClientRangeRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of ClearLocalClientList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von ClearLocalClientList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ClearLocalClientListResp"/>
	FUNCTION VIRTUAL GLOBAL ClearLocalClientListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="ClearLocalClientListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="ClearLocalClientListResp.ErrorNo"/>
			pClearLocalClientListRsp 	: ^DSComm::_DS_ClearLocalClientListResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ClearLocalClientListResp.pClearLocalClientListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetCurrentID() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetCurrentID() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetCurrentIDResp"/>
	FUNCTION VIRTUAL GLOBAL GetCurrentIDResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetCurrentIDResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetCurrentIDResp.ErrorNo"/>
			pGetCurrentIDRsp 	: ^DSComm::_DS_GetCurrentIDResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetCurrentIDResp.pGetCurrentIDRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetLocalClientList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetLocalClientList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientListResp"/>
	FUNCTION VIRTUAL GLOBAL GetLocalClientListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetLocalClientListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetLocalClientListResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetLocalClientListResp.num"/>
			pGetLocalClientListRsp 	: ^DSComm::_DS_GetLocalClientListResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientListResp.pGetLocalClientListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetLocalClientListDetails() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetLocalClientListDetails() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientListDetailsResp"/>
	FUNCTION VIRTUAL GLOBAL GetLocalClientListDetailsResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetLocalClientListDetailsResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetLocalClientListDetailsResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetLocalClientListDetailsResp.num"/>
			pGetLocalClientListDetailsRsp 	: ^DSComm::_DS_GetLocalClientDetailsResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientListDetailsResp.pGetLocalClientListDetailsRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetLocalClientByID() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetLocalClientByID() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientByIDResp"/>
	FUNCTION VIRTUAL GLOBAL GetLocalClientByIDResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetLocalClientByIDResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetLocalClientByIDResp.ErrorNo"/>
			pGetLocalClientByIDRsp 	: ^DSComm::_DS_GetLocalClientDetailsResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLocalClientByIDResp.pGetLocalClientByIDRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UserLogin() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UserLogin() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserLoginResp"/>
	FUNCTION VIRTUAL GLOBAL UserLoginResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UserLoginResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UserLoginResp.ErrorNo"/>
			pUserLoginData 	: ^DSComm::_DS_UserLoginResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserLoginResp.pUserLoginData"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UserLogout() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UserLogout() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserLogoutResp"/>
	FUNCTION VIRTUAL GLOBAL UserLogoutResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UserLogoutResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UserLogoutResp.ErrorNo"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UserPasswordChange() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UserPasswordChange() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserPasswordChangeResp"/>
	FUNCTION VIRTUAL GLOBAL UserPasswordChangeResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UserPasswordChangeResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UserPasswordChangeResp.ErrorNo"/>
			pUserPasswordChangeRsp 	: ^DSComm::_DS_UserPasswordChangeResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserPasswordChangeResp.pUserPasswordChangeRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of CheckAccessLevel() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von CheckAccessLevel() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CheckAccessLevelResp"/>
	FUNCTION VIRTUAL GLOBAL CheckAccessLevelResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="CheckAccessLevelResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="CheckAccessLevelResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="CheckAccessLevelResp.num"/>
			pCheckAccessLevelRsp 	: ^DSComm::_DS_CheckAccessLevelResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CheckAccessLevelResp.pCheckAccessLevelRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of CreateUser() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von CreateUser() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CreateUserResp"/>
	FUNCTION VIRTUAL GLOBAL CreateUserResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="CreateUserResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="CreateUserResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="CreateUserResp.num"/>
			pCreateUserRsp 	: ^DSComm::_DS_CreateUserResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CreateUserResp.pCreateUserRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of ChangeUserSettings() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von ChangeUserSettings() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ChangeUserSettingsResp"/>
	FUNCTION VIRTUAL GLOBAL ChangeUserSettingsResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="ChangeUserSettingsResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="ChangeUserSettingsResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="ChangeUserSettingsResp.num"/>
			pChangeUserRsp 	: ^DSComm::_DS_ChangeUserSettingsResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ChangeUserSettingsResp.pChangeUserRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of DeleteUser() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von DeleteUser() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DeleteUserResp"/>
	FUNCTION VIRTUAL GLOBAL DeleteUserResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="DeleteUserResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="DeleteUserResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="DeleteUserResp.num"/>
			pDeleteUserRsp 	: ^DSComm::_DS_DeleteUserResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DeleteUserResp.pDeleteUserRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetUserList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetUserList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetUserListResp"/>
	FUNCTION VIRTUAL GLOBAL GetUserListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetUserListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetUserListResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetUserListResp.num"/>
			pGetUserListRsp 	: ^DSComm::_DS_GetUserListResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetUserListResp.pGetUserListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetUserDetails() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetUserDetails() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetUserDetailsResp"/>
	FUNCTION VIRTUAL GLOBAL GetUserDetailsResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetUserDetailsResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetUserDetailsResp.ErrorNo"/>
			pUserDetails 	: ^DSComm::_DS_UserLoginResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetUserDetailsResp.pUserDetails"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of CreateRole() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von CreateRole() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CreateRoleResp"/>
	FUNCTION VIRTUAL GLOBAL CreateRoleResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="CreateRoleResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="CreateRoleResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="CreateRoleResp.num"/>
			pCreateRoleRsp 	: ^DSComm::_DS_CreateRoleResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="CreateRoleResp.pCreateRoleRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of ChangeRole() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von ChangeRole() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ChangeRoleResp"/>
	FUNCTION VIRTUAL GLOBAL ChangeRoleResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="ChangeRoleResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="ChangeRoleResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="ChangeRoleResp.num"/>
			pChangeRoleRsp 	: ^DSComm::_DS_ChangeRoleResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="ChangeRoleResp.pChangeRoleRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of DeleteRole() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von DeleteRole() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DeleteRoleResp"/>
	FUNCTION VIRTUAL GLOBAL DeleteRoleResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="DeleteRoleResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="DeleteRoleResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="DeleteRoleResp.num"/>
			pDeleteRoleRsp 	: ^DSComm::_DS_DeleteRoleResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag  Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DeleteRoleResp.pDeleteRoleRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetRoleList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetRoleList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetRoleListResp"/>
	FUNCTION VIRTUAL GLOBAL GetRoleListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetRoleListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetRoleListResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetRoleListResp.num"/>
			pGetRoleListRsp 	: ^DSComm::_DS_GetRoleListResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetRoleListResp.pGetRoleListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetRoleDetails() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetRoleDetails() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetRoleDetailsResp"/>
	FUNCTION VIRTUAL GLOBAL GetRoleDetailsResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetRoleDetailsResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetRoleDetailsResp.ErrorNo"/>
			pGetRoleDetailsRsp 	: ^DSComm::_DS_GetRoleDetailsResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetRoleDetailsResp.pGetRoleDetailsRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetVarIdFromName() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetVarIdFromName() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromNameResp"/>
	FUNCTION VIRTUAL GLOBAL GetVarIdFromNameResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetVarIdFromNameResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetVarIdFromNameResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetVarIdFromNameResp.num"/>
			pGetVarIdFromNameRsp 	: ^DSComm::_DS_GetVarIdFromNameResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromNameResp.pGetVarIdFromNameRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetVarIdFromLasalId() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetVarIdFromLasalId() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromLasalIdResp"/>
	FUNCTION VIRTUAL GLOBAL GetVarIdFromLasalIdResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetVarIdFromLasalIdResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetVarIdFromLasalIdResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetVarIdFromLasalIdResp.num"/>
			pGetVarIdFromLasalIdRsp 	: ^DSComm::_DS_GetVarIdFromLasalIdResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromLasalIdResp.pGetVarIdFromLasalIdRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetLasalIdFromName() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetLasalIdFromName() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLasalIdFromNameResp"/>
	FUNCTION VIRTUAL GLOBAL GetLasalIdFromNameResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetLasalIdFromNameResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetLasalIdFromNameResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetLasalIdFromNameResp.num"/>
			pGetLasalIdFromNameRsp 	: ^DSComm::_DS_GetLasalIdFromNameResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLasalIdFromNameResp.pGetLasalIdFromNameRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetLasalIdFromVarId() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetLasalIdFromVarId() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLasalIdFromVarIdResp"/>
	FUNCTION VIRTUAL GLOBAL GetLasalIdFromVarIdResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetLasalIdFromVarIdResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetLasalIdFromVarIdResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetLasalIdFromVarIdResp.num"/>
			pGetLasalIdIdFromVarIdRsp 	: ^DSComm::_DS_GetLasalIdIdFromVarIdResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetLasalIdFromVarIdResp.pGetLasalIdIdFromVarIdRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetNameFromVarId() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetNameFromVarId() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetNameFromVarIdResp"/>
	FUNCTION VIRTUAL GLOBAL GetNameFromVarIdResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetNameFromVarIdResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetNameFromVarIdResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetNameFromVarIdResp.num"/>
			pGetNameFromVarIdRsp 	: ^DSComm::_DS_GetNameFromVarIdResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetNameFromVarIdResp.pGetNameFromVarIdRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetNameFromLasalId() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetNameFromLasalId() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetNameFromLasalIdResp"/>
	FUNCTION VIRTUAL GLOBAL GetNameFromLasalIdResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetNameFromLasalIdResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetNameFromLasalIdResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetNameFromLasalIdResp.num"/>
			pGetNameFromLasalIdRsp 	: ^DSComm::_DS_GetNameFromLasalIdResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetNameFromLasalIdResp.pGetNameFromLasalIdRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetDpList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetDpList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDpListResp"/>
	FUNCTION VIRTUAL GLOBAL GetDpListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetDpListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetDpListResp.ErrorNo"/>
			TotalNum 	: UDINT;			//! <Variable Comment="Number of transferred entries in all response packets.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge in allen Antwortpaketen." Name="GetDpListResp.TotalNum"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge in diesem Paket." Name="GetDpListResp.num"/>
			LastPacket 	: BOOL;			//! <Variable Comment="FALSE: more data packets will follow.&#13;&#10;TRUE: this is the last data packet.&#13;&#10;&#13;&#10;FALSE: es folgen noch weitere Datenpakete.&#13;&#10;TRUE: dies ist das letzte Datenpaket." Name="GetDpListResp.LastPacket"/>
			pGetDpListRsp 	: ^DSComm::_DS_GetDpListResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDpListResp.pGetDpListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetDpInfo() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetDpInfo() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDpInfoResp"/>
	FUNCTION VIRTUAL GLOBAL GetDpInfoResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetDpInfoResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetDpInfoResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetDpInfoResp.num"/>
			pGetDpInfoRsp 	: ^DSComm::_DS_GetDpInfoResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDpInfoResp.pGetDpInfoRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetVarIdFromCRC() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetVarIdFromCRC() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromCRCResp"/>
	FUNCTION VIRTUAL GLOBAL GetVarIdFromCRCResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetVarIdFromCRCResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetVarIdFromCRCResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetVarIdFromCRCResp.num"/>
			pGetVarIdFromCRCRsp 	: ^DSComm::_DS_GetVarIdFromCRCResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetVarIdFromCRCResp.pGetVarIdFromCRCRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetCRCfromVarId() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, wenn die Response-Daten von GetCRCfromVarId() zur Verfügung stehen.&#13;&#10;Diese Daten müssen sofort umkopiert werden." Name="GetCRCfromVarIdResp"/>
	FUNCTION VIRTUAL GLOBAL GetCRCfromVarIdResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetCRCfromVarIdResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetCRCfromVarIdResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetCRCfromVarIdResp.num"/>
			pGetCRCfromVarIdRsp 	: ^DSComm::_DS_GetCRCFromVarIdResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetCRCfromVarIdResp.pGetCRCfromVarIdRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetValue() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetValue() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetValueResp"/>
	FUNCTION VIRTUAL GLOBAL GetValueResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetValueResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetValueResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetValueResp.num"/>
			pGetValueRsp 	: ^DSComm::_DS_GetValueResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetValueResp.pGetValueRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetString() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetString() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStringResp"/>
	FUNCTION VIRTUAL GLOBAL GetStringResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetStringResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetStringResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetStringResp.num"/>
			pGetStringRsp 	: ^DSComm::_DS_GetStringResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStringResp.pGetStringRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SetValue() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SetValue() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SetValueResp"/>
	FUNCTION VIRTUAL GLOBAL SetValueResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SetValueResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SetValueResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="SetValueResp.num"/>
			pSetValueRsp 	: ^DSComm::_DS_SetValueResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SetValueResp.pSetValueRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SetString() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SetString() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SetStringResp"/>
	FUNCTION VIRTUAL GLOBAL SetStringResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SetStringResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SetStringResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="SetStringResp.num"/>
			pSetStringRsp 	: ^DSComm::_DS_SetStringResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SetStringResp.pSetStringRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of IncValue() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von IncValue() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="IncValueResp"/>
	FUNCTION VIRTUAL GLOBAL IncValueResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="IncValueResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="IncValueResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="IncValueResp.num"/>
			pIncValueRsp 	: ^DSComm::_DS_IncDecValueResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="IncValueResp.pIncValueRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of DecValue() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von DecValue() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DecValueResp"/>
	FUNCTION VIRTUAL GLOBAL DecValueResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="DecValueResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="DecValueResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="DecValueResp.num"/>
			pDecValueRsp 	: ^DSComm::_DS_IncDecValueResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DecValueResp.pDecValueRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RefListAdd() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RefListAdd() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListAddResp"/>
	FUNCTION VIRTUAL GLOBAL RefListAddResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RefListAddResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RefListAddResp.ErrorNo"/>
			Channel 	: UDINT;			//! <Variable Comment="Id of the relist channel to which the data points should be added.&#13;&#10;&#13;&#10;Id des Reflist Channels zu dem die Datenpunkte hinzugefügt werden sollten." Name="RefListAddResp.Channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="RefListAddResp.num"/>
			pRefListAddRsp 	: ^DSComm::_DS_RefListAddResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListAddResp.pRefListAddRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of RefListSub() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von RefListSub() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListSubResp"/>
	FUNCTION VIRTUAL GLOBAL RefListSubResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="RefListSubResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="RefListSubResp.ErrorNo"/>
			Channel 	: UDINT;			//! <Variable Comment="Id of the relist channel from which the data points should be removed.&#13;&#10;&#13;&#10;Id des Reflist Channels von dem die Datenpunkte entfernt werden sollten." Name="RefListSubResp.Channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="RefListSubResp.num"/>
			pRefListSubRsp 	: ^DSComm::_DS_RefListSubResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListSubResp.pRefListSubRsp"/>
		END_VAR;
				//! <Function Comment="This push notification is sent by the data service every time the value of a numeric server in the refresh list changes. &#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Push Notification wird vom Data Service jedes Mal verschickt, wenn sich der Wert eines numerischen Servers ändert, welcher sich in der Refresh-Liste befindet. &#13;&#10;Die Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListUpdatePush"/>
	FUNCTION VIRTUAL GLOBAL RefListUpdatePush
		VAR_INPUT
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="RefListUpdatePush.ErrorNo"/>
			channel 	: UDINT;			//! <Variable Comment="The ID of the channel in which numeric server values have changed.&#13;&#10;&#13;&#10;Die Id des Kanals in dem sich numerische Server-Werte geändert haben." Name="RefListUpdatePush.channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="RefListUpdatePush.num"/>
			pRefListUpdate 	: ^DSComm::_DS_RefListUpdate;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListUpdatePush.pRefListUpdate"/>
		END_VAR;
				//! <Function Comment="This push notification is sent by the data service every time the value of a string server in the refresh list changes. &#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Push Notification wird vom Data Service jedes Mal verschickt, wenn sich der Wert eines String-Servers ändert, welcher sich in der Refresh-Liste befindet.&#13;&#10;Die Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListUpdateStringPush"/>
	FUNCTION VIRTUAL GLOBAL RefListUpdateStringPush
		VAR_INPUT
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="RefListUpdateStringPush.ErrorNo"/>
			channel 	: UDINT;			//! <Variable Comment="The ID of the channel in which string server values have changed.&#13;&#10;&#13;&#10;Die Id des Kanals in dem sich String-Server-Werte geändert haben." Name="RefListUpdateStringPush.channel"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="RefListUpdateStringPush.num"/>
			pRefListUpdateString 	: ^DSComm::_DS_RefListUpdateString;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="RefListUpdateStringPush.pRefListUpdateString"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetStationList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetStationList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStationListResp"/>
	FUNCTION VIRTUAL GLOBAL GetStationListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetStationListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetStationListResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetStationListResp.num"/>
			pGetStationListRsp 	: ^DSComm::_DS_StationListResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStationListResp.pGetStationListRsp"/>
		END_VAR;
				//! <Function Comment="Returns a list with all stations.&#13;&#10;&#13;&#10;Gibt eine List mit allen Stationen zurück." Name="GetStationList"/>
	FUNCTION GLOBAL GetStationList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetStationList.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the status of stations.&#13;&#10;&#13;&#10;Liefert den Status von Stationen zurück." Name="GetStationStatus"/>
	FUNCTION GLOBAL GetStationStatus
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="GetStationStatus.num"/>
			pStationNo 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; station numbers whose states are to be queried.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Stationsnummern deren Stati abgefragt werden sollen.&#13;&#10;" Name="GetStationStatus.pStationNo"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pStationNo&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pStationNo&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetStationStatus.MessageID"/>
		END_VAR;
				//! <Function Comment="Opens a file and returns a handle.&#13;&#10;&#13;&#10;Öffnet eine Datei und gibt ein Handle zurück." Name="FileOpen"/>
	FUNCTION GLOBAL FileOpen
		VAR_INPUT
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive-path-name-extension of the file to be opened.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der zu öffnenden Datei.&#13;&#10;Dies ist ein UTF8-String." Name="FileOpen.pDpne"/>
			pMode 	: ^CHAR;			//! <Variable Comment="Pointer to the mode string how the file should be opened.&#13;&#10;&quot;r&quot;: Opens a file for reading. The file must already exist.&#13;&#10;&quot;w&quot;: Creates an empty file for writing. If the file already exists, its contents are deleted and the file is treated as a new empty file.&#13;&#10;&quot;a&quot;: Opens the file to append data to the end of the file. The file pointer cannot be adjusted with FileSeek().&#13;&#10;      The new data is always written to the end of the file. If the file does not exist yet, it will be created.&#13;&#10;&#13;&#10;&#10;&#10;For a file to be treated as binary, the character &apos;b&apos; must be present at the end of the mode string (&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;).&#13;&#10;&#13;&#10;&#13;&#10;Zeiger auf den Mode-String wie die Datei geöffnet werden soll.&#13;&#10;&quot;r&quot;: Öffnet eine Datei zum Lesen. Die Datei muss bereits vorhanden sein.&#13;&#10;&quot;w&quot;: Erzeugt eine leere Datei zum Schreiben. Falls die Datei schon existiert, wird ihr Inhalt gelöscht und die Datei wird wie eine neue leere Datei behandelt.&#13;&#10;&quot;a&quot;: Öffnet die Datei zum Anhängen von Daten an das Ende der Datei. Der Dateizeiger kann nicht mit FileSeek() verstellt werden.&#13;&#10;       Die neuen Daten werden immer an das Ende der Datei geschrieben. Falls die Datei noch nicht existiert wird sie neu erzeugt.&#13;&#10;&#13;&#10;Damit eine Datei als Binärdatei behandelt wird, muss das Zeichen b am Ende des Mode-String vorhanden sein (&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;)." Name="FileOpen.pMode"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; or the pointer &lt;pMode&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; oder der Zeiger &lt;pMode&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileOpen.MessageID"/>
		END_VAR;
				//! <Function Comment="Closes a file.&#13;&#10;&#13;&#10;Schließt eine Datei." Name="FileClose"/>
	FUNCTION GLOBAL FileClose
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle of the file to be closed.&#13;&#10;&#13;&#10;Der Filehandle jener Datei, die geschlossen werden soll." Name="FileClose.handle"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileClose.MessageID"/>
		END_VAR;
				//! <Function Comment="Positions the file pointer.&#13;&#10;&#13;&#10;Positioniert den Dateizeiger." Name="FileSeek"/>
	FUNCTION GLOBAL FileSeek
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileSeek.handle"/>
			start 	: UDINT;			//! <Variable Comment="From where the &lt;offset&gt; is to be calculated (0 = start of file, 1 = current position, 2 = end of file).&#13;&#10;&#13;&#10;Von wo weg der &lt;offset&gt; gerechnet werden soll (0 = Dateianfang, 1 = aktuelle Position, 2 = Dateiende)." Name="FileSeek.start"/>
			offset 	: UDINT;			//! <Variable Comment="Offset in Byte.&#13;&#10;&#13;&#10;Offset in Byte." Name="FileSeek.offset"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileSeek.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the position of the file pointer.&#13;&#10;&#13;&#10;Gibt die Position des Dateizeigers zurück." Name="FileTell"/>
	FUNCTION GLOBAL FileTell
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileTell.handle"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileTell.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads data from a file.&#13;&#10;&#13;&#10;Liest Daten aus einer Datei aus." Name="FileRead"/>
	FUNCTION GLOBAL FileRead
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileRead.handle"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to be read.&#13;&#10;&#13;&#10;Anzahl der Bytes die gelesen werden sollen." Name="FileRead.length"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileRead.MessageID"/>
		END_VAR;
				//! <Function Comment="Writes data to a file.&#13;&#10;&#13;&#10;Schreibt Daten in eine Datei." Name="FileWrite"/>
	FUNCTION GLOBAL FileWrite
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileWrite.handle"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to be written.&#13;&#10;&#13;&#10;Anzahl der zu schreibenden Bytes." Name="FileWrite.length"/>
			pWriteData 	: ^CHAR;			//! <Variable Comment="Pointer to the data to be written.&#13;&#10;&#13;&#10;Zeiger auf die zu schreibenden Daten." Name="FileWrite.pWriteData"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pWriteData&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pWriteData&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileWrite.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads &lt;length&gt; characters from a file, or until the next NewLine character.&#13;&#10;&#13;&#10;Liest &lt;length&gt; Zeichen aus einer Datei, oder bis zum nächsten NewLine Zeichen." Name="FileGet"/>
	FUNCTION GLOBAL FileGet
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileGet.handle"/>
			length 	: UDINT;			//! <Variable Comment="The maximum number of bytes to be read.&#13;&#10;&#13;&#10;Wie viele Bytes maximal gelesen werden sollen." Name="FileGet.length"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileGet.MessageID"/>
		END_VAR;
				//! <Function Comment="Writes an ASCII string to a file.&#13;&#10;&#13;&#10;Schreibt einen ASCII-String in eine Datei." Name="FilePut"/>
	FUNCTION GLOBAL FilePut
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FilePut.handle"/>
			pString 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be written to the file.&#13;&#10;&#13;&#10;Zeiger auf den String, der in die Datei geschrieben werden soll." Name="FilePut.pString"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pString&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pString&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FilePut.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns the length of a file.&#13;&#10;&#13;&#10;Gibt die Länge einer Datei zurück." Name="FileLength"/>
	FUNCTION GLOBAL FileLength
		VAR_INPUT
			handle 	: UDINT;			//! <Variable Comment="The file handle.&#13;&#10;&#13;&#10;Der Filehandle." Name="FileLength.handle"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileLength.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads the entire contents of a file package by package.&#13;&#10;&#13;&#10;Liest den gesamten Inhalt einer Datei paketweise aus." Name="FileContent"/>
	FUNCTION GLOBAL FileContent
		VAR_INPUT
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the file to be read.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der zu lesenden Datei.&#13;&#10;Dies ist ein UTF8-String." Name="FileContent.pDpne"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileContent.MessageID"/>
		END_VAR;
				//! <Function Comment="Creates a new directory.&#13;&#10;&#13;&#10;Legt ein neues Verzeichnis an." Name="DirCreate"/>
	FUNCTION GLOBAL DirCreate
		VAR_INPUT
			pDp 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path of the new directory.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf Drive-Path des neuen Verzeichnisses.&#13;&#10;Die ist ein UTF8-String." Name="DirCreate.pDp"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDp&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDp&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="DirCreate.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads the contents of a directory.&#13;&#10;&#13;&#10;Liest den Inhalt eines Verzeichnisses aus." Name="DirRead"/>
	FUNCTION GLOBAL DirRead
		VAR_INPUT
			FilterIncl 	: UDINT;			//! <Variable Comment="File attributes to include.&#13;&#10;&#13;&#10;Zu inkludierende File-Attribute." Name="DirRead.FilterIncl"/>
			FilterExcl 	: UDINT;			//! <Variable Comment="File attributes to exclude.&#13;&#10;&#13;&#10;Zu exkludierende File-Attribute." Name="DirRead.FilterExcl"/>
			pDp 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path of the directory to be read.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf Drive-Path des Verzeichnisses das ausgelesen werden soll.&#13;&#10;Dies ist ein UTF8-String." Name="DirRead.pDp"/>
			pNe 	: ^CHAR;			//! <Variable Comment="Pointer to name extension as filter (e.g. *.*&#41;.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf Name-Extension als Filter (zB. *.*&#41;.&#13;&#10;Dies ist ein UTF8-String." Name="DirRead.pNe"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDp&gt; or the pointer &lt;pNe&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDp&gt; oder der Zeiger &lt;pNe&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="DirRead.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes a file or a directory.&#13;&#10;Wildcard characters are not supported.&#13;&#10;&#13;&#10;Löscht eine Datei oder ein Verzeichnis.&#13;&#10;Wildcard-Zeichen werden nicht unterstützt." Name="FileRemove"/>
	FUNCTION GLOBAL FileRemove
		VAR_INPUT
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the object to be deleted (file or directory).&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension des zu löschenden Objekts (Datei oder Verzeichnis).&#13;&#10;Dies ist ein UTF8-String." Name="FileRemove.pDpne"/>
			updateProgress 	: BOOL;			//! <Variable Comment="TRUE: the data service should send progress frames.&#13;&#10;FALSE: the data service should not send progress frames.&#13;&#10;Progress frames will be passed to the method ProgressStatusPush() &#13;&#10;in the object where FileRemove() was called.&#13;&#10;&#13;&#10;TRUE: der Data Service soll Progress Frames verschicken.&#13;&#10;FALSE: der Data Service soll keine Progress Frames verschicken.&#13;&#10;Die vom Data Service verschickten Progress Frames werden an die Methode ProgressStatusPush() &#13;&#10;in jenem Objekt übergeben in dem FileRemove() aufgerufen wurde." Name="FileRemove.updateProgress"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileRemove.MessageID"/>
		END_VAR;
				//! <Function Comment="Copies a file or a directory.&#13;&#10;Wildcard characters are not supported.&#13;&#10;&#13;&#10;Kopiert eine Datei oder ein Verzeichnis.&#13;&#10;Wildcard-Zeichen werden nicht unterstützt." Name="FileCopy"/>
	FUNCTION GLOBAL FileCopy
		VAR_INPUT
			pDpneSrc 	: ^CHAR;			//! <Variable Comment="Pointer to the path to the object to be copied (file or directory).&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf den Pfad zum Objekt das kopiert werden soll (Datei oder Verzeichnis).&#13;&#10;Dies ist ein UTF8-String." Name="FileCopy.pDpneSrc"/>
			pDpneDest 	: ^CHAR;			//! <Variable Comment="Pointer to the path to the target.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf den Pfad zum Ziel.&#13;&#10;Dies ist ein UTF8-String." Name="FileCopy.pDpneDest"/>
			updateProgress 	: BOOL;			//! <Variable Comment="TRUE: the data service should send progress frames.&#13;&#10;FALSE: the data service should not send progress frames.&#13;&#10;Progress frames will be passed to the method ProgressStatusPush() &#13;&#10;in the object where FileCopy() was called.&#13;&#10;&#13;&#10;TRUE: der Data Service soll Progress Frames verschicken.&#13;&#10;FALSE: der Data Service soll keine Progress Frames verschicken.&#13;&#10;Die vom Data Service verschickten Progress Frames werden an die Methode ProgressStatusPush() &#13;&#10;in jenem Objekt übergeben in dem FileCopy() aufgerufen wurde." Name="FileCopy.updateProgress"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpneSrc&gt; or the pointer &lt;pDpneDest&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpneSrc&gt; oder der Zeiger &lt;pDpneDest&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileCopy.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns information about a file.&#13;&#10;&#13;&#10;Gibt Informationen zu einer Datei zurück." Name="FileInfo"/>
	FUNCTION GLOBAL FileInfo
		VAR_INPUT
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the file.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der Datei.&#13;&#10;Dies ist ein UTF8-String." Name="FileInfo.pDpne"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileInfo.MessageID"/>
		END_VAR;
				//! <Function Comment="Changes the name of a file.&#13;&#10;&#13;&#10;Ändert den Namen einer Datei." Name="FileRename"/>
	FUNCTION GLOBAL FileRename
		VAR_INPUT
			pDpneOld 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the file to be renamed.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der Datei die umbenannt werden soll.&#13;&#10;Dies ist ein UTF8-String." Name="FileRename.pDpneOld"/>
			pDpneNew 	: ^CHAR;			//! <Variable Comment="Pointer to the new drive path name extension of the file.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die neue Drive-Path-Name-Extension der Datei.&#13;&#10;Dies ist ein UTF8-String." Name="FileRename.pDpneNew"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpneOld&gt; or the pointer &lt;pDpneNew&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpneOld&gt; oder der Zeiger &lt;pDpneNew&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileRename.MessageID"/>
		END_VAR;
				//! <Function Comment="Changes the attributes of a file.&#13;&#10;&#13;&#10;Ändert die Attribute einer Datei." Name="FileSetAttribute"/>
	FUNCTION GLOBAL FileSetAttribute
		VAR_INPUT
			pDpne 	: ^CHAR;			//! <Variable Comment="Pointer to the drive path name extension of the file.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf die Drive-Path-Name-Extension der Datei.&#13;&#10;Dies ist ein UTF8-String." Name="FileSetAttribute.pDpne"/>
			AttributeToSet 	: UDINT;			//! <Variable Comment="All attributes that are to be set.&#13;&#10;&#13;&#10;Alle Attribute welche neu gesetzt werden sollen." Name="FileSetAttribute.AttributeToSet"/>
			AttributeToReset 	: UDINT;			//! <Variable Comment="All attributes to be deleted.&#13;&#10;&#13;&#10;Alle Attribute welche gelöscht werden sollen." Name="FileSetAttribute.AttributeToReset"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpne&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpne&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileSetAttribute.MessageID"/>
		END_VAR;
				//! <Function Comment="Returns a list of all connected drives in the response data.&#13;&#10;&#13;&#10;Gibt in den Response-Daten eine Liste aller verbundenen Laufwerke zurück." Name="GetDriveList"/>
	FUNCTION GLOBAL GetDriveList
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="GetDriveList.MessageID"/>
		END_VAR;
				//! <Function Comment="Moves a file or a directory.&#13;&#10;Wildcard characters are not supported.&#13;&#10;&#13;&#10;Verschiebt eine Datei oder ein Verzeichnis.&#13;&#10;Wildcard-Zeichen werden nicht unterstützt." Name="FileMove"/>
	FUNCTION GLOBAL FileMove
		VAR_INPUT
			pDpneSrc 	: ^CHAR;			//! <Variable Comment="Pointer to the path to the object to be moved (file or directory).&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf den Pfad zum zu verschiebenden Objekt (Datei oder Verzeichnis).&#13;&#10;Dies ist ein UTF8-String." Name="FileMove.pDpneSrc"/>
			pDpneDest 	: ^CHAR;			//! <Variable Comment="Pointer to the path to the target.&#13;&#10;This is an UTF8-string.&#13;&#10;&#13;&#10;Zeiger auf den Pfad zum Ziel.&#13;&#10;Dies ist ein UTF8-String," Name="FileMove.pDpneDest"/>
			updateProgress 	: BOOL;			//! <Variable Comment="TRUE: the data service should send progress frames.&#13;&#10;FALSE: the data service should not send progress frames.&#13;&#10;Progress frames will be passed to the method ProgressStatusPush() &#13;&#10;in the object where FileMove() was called.&#13;&#10;&#13;&#10;TRUE: der Data Service soll Progress Frames verschicken.&#13;&#10;FALSE: der Data Service soll keine Progress Frames verschicken.&#13;&#10;Die vom Data Service verschickten Progress Frames werden an die Methode ProgressStatusPush() &#13;&#10;in jenem Objekt übergeben in dem FileMove() aufgerufen wurde." Name="FileMove.updateProgress"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pDpneSrc&gt; or the pointer &lt;pDpneDest&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pDpneSrc&gt; oder der Zeiger &lt;pDpneDest&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="FileMove.MessageID"/>
		END_VAR;
				//! <Function Comment="Adds an entry to the event journal.&#13;&#10;&#13;&#10;Fügt einen Eintrag zum Eventjournal hinzu." Name="EventjournalAdd"/>
	FUNCTION GLOBAL EventjournalAdd
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="EventjournalAdd.num"/>
			pEventjournalAdd 	: ^DSComm::_DS_EventjournalAddCmd;			//! <Variable Comment="Pointer to an array with &lt;num&gt; journal entries.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Journaleinträgen." Name="EventjournalAdd.pEventjournalAdd"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pEventjournalAdd&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pEventjournalAdd&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalAdd.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads an entry from the event journal.&#13;&#10;&#13;&#10;Liest einen Eintrag aus dem Eventjournal aus." Name="EventjournalGet"/>
	FUNCTION GLOBAL EventjournalGet
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="EventjournalGet.num"/>
			pJournalId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; IDs of the journal entries.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; IDs der Journaleinträge." Name="EventjournalGet.pJournalId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pJournalId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pJournalId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalGet.MessageID"/>
		END_VAR;
				//! <Function Comment="Reads all entries from the event journal.&#13;&#10;&#13;&#10;Liest alle Einträge aus dem Eventjournal aus." Name="EventjournalGetAll"/>
	FUNCTION GLOBAL EventjournalGetAll
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalGetAll.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes an entry from the event journal.&#13;&#10;&#13;&#10;Löscht einen Eintrag aus dem Eventjournal." Name="EventjournalDel"/>
	FUNCTION GLOBAL EventjournalDel
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="EventjournalDel.num"/>
			pJournalId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; IDs of the journal entries.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; IDs der Journaleinträge." Name="EventjournalDel.pJournalId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pJournalId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pJournalId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalDel.MessageID"/>
		END_VAR;
				//! <Function Comment="Deletes all entries from the event journal.&#13;&#10;&#13;&#10;Löscht das gesamte Eventjournal." Name="EventjournalDelAll"/>
	FUNCTION GLOBAL EventjournalDelAll
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalDelAll.MessageID"/>
		END_VAR;
				//! <Function Comment="Acknowledges one or more alarms.&#13;&#10;&#13;&#10;Quittiert einen oder mehrere Alarme." Name="EventjournalQuitAlarm"/>
	FUNCTION GLOBAL EventjournalQuitAlarm
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="EventjournalQuitAlarm.num"/>
			pAlarmId 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; variable IDs of the &lt;ClassSvr&gt; of one or more alarm objects (classes _AlarmX0Para - _AlarmX3Para).&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; Variablen IDs der &lt;ClassSvr&gt; von ein oder mehreren Alarm-Objekten (Klassen _AlarmX0Para - _AlarmX3Para)." Name="EventjournalQuitAlarm.pAlarmId"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pAlarmId&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pAlarmId&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalQuitAlarm.MessageID"/>
		END_VAR;
				//! <Function Comment="Acknowledge all alarms.&#13;&#10;&#13;&#10;Quittiert alle Alarme." Name="EventjournalQuitAll"/>
	FUNCTION GLOBAL EventjournalQuitAll
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="EventjournalQuitAll.MessageID"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetStationStatus() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetStationStatus() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStationStatusResp"/>
	FUNCTION VIRTUAL GLOBAL GetStationStatusResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetStationStatusResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetStationStatusResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="GetStationStatusResp.num"/>
			pStationStatusRsp 	: ^DSComm::_DS_StationStatusResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetStationStatusResp.pStationStatusRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileOpen() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileOpen() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileOpenResp"/>
	FUNCTION VIRTUAL GLOBAL FileOpenResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileOpenResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileOpenResp.ErrorNo"/>
			pFileOpenRsp 	: ^DSComm::_DS_FileOpenResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileOpenResp.pFileOpenRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileClose() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileClose() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileCloseResp"/>
	FUNCTION VIRTUAL GLOBAL FileCloseResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileCloseResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileCloseResp.ErrorNo"/>
			pFileCloseRsp 	: ^DSComm::_DS_FileCloseResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileCloseResp.pFileCloseRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileSeek() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileSeek() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileSeekResp"/>
	FUNCTION VIRTUAL GLOBAL FileSeekResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileSeekResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileSeekResp.ErrorNo"/>
			pFileSeekRsp 	: ^DSComm::_DS_FileSeekResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileSeekResp.pFileSeekRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileTell() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileTell() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileTellResp"/>
	FUNCTION VIRTUAL GLOBAL FileTellResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileTellResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileTellResp.ErrorNo"/>
			pFileTellRsp 	: ^DSComm::_DS_FileTellResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileTellResp.pFileTellRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileRead() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileRead() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileReadResp"/>
	FUNCTION VIRTUAL GLOBAL FileReadResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileReadResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileReadResp.ErrorNo"/>
			pFileReadRsp 	: ^DSComm::_DS_FileReadResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileReadResp.pFileReadRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileWrite() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileWrite() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileWriteResp"/>
	FUNCTION VIRTUAL GLOBAL FileWriteResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileWriteResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileWriteResp.ErrorNo"/>
			pFileWriteRsp 	: ^DSComm::_DS_FileWriteResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileWriteResp.pFileWriteRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileGet() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileGet() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileGetResp"/>
	FUNCTION VIRTUAL GLOBAL FileGetResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileGetResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileGetResp.ErrorNo"/>
			pFileGetRsp 	: ^DSComm::_DS_FileGetResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileGetResp.pFileGetRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FilePut() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FilePut() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FilePutResp"/>
	FUNCTION VIRTUAL GLOBAL FilePutResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FilePutResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FilePutResp.ErrorNo"/>
			pFilePutRsp 	: ^DSComm::_DS_FilePutResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FilePutResp.pFilePutRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileLength() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileLength() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileLengthResp"/>
	FUNCTION VIRTUAL GLOBAL FileLengthResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileLengthResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileLengthResp.ErrorNo"/>
			pFileLengthRsp 	: ^DSComm::_DS_FileLengthResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileLengthResp.pFileLengthRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileContent() is available.&#13;&#10;The method is called repeatedly until &lt;LastPacket&gt; has the value TRUE.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileContent() zur Verfügung stehen. &#13;&#10;Die Methode wird sooft aufgerufen, bis &lt;LastPacket&gt; den Wert TRUE hat. &#13;&#10;Die Response-Daten müssen bei Bedarf sofort umkopiert werden." Name="FileContentResp"/>
	FUNCTION VIRTUAL GLOBAL FileContentResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileContentResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileContentResp.ErrorNo"/>
			LastPacket 	: BOOL;			//! <Variable Comment="FALSE: more data packets will follow.&#13;&#10;TRUE: this is the last data packet.&#13;&#10;&#13;&#10;FALSE: es folgen noch weitere Datenpakete.&#13;&#10;TRUE: dies ist das letzte Datenpaket." Name="FileContentResp.LastPacket"/>
			pFileContentRsp 	: ^DSComm::_DS_FileContentResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileContentResp.pFileContentRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of DirCreate() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von DirCreate() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DirCreateResp"/>
	FUNCTION VIRTUAL GLOBAL DirCreateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="DirCreateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="DirCreateResp.ErrorNo"/>
			pDirCreateRsp 	: ^DSComm::_DS_DirCreateResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DirCreateResp.pDirCreateRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of DirRead() is available.&#13;&#10;The method is called repeatedly until &lt;LastPacket&gt; has the value TRUE.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von DirRead() zur Verfügung stehen. &#13;&#10;Die Methode wird sooft aufgerufen, bis &lt;LastPacket&gt; den Wert TRUE hat. &#13;&#10;Die Response-Daten müssen bei Bedarf sofort umkopiert werden." Name="DirReadResp"/>
	FUNCTION VIRTUAL GLOBAL DirReadResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="DirReadResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="DirReadResp.ErrorNo"/>
			DS_ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;&lt;&gt; 0: data server error code.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;&lt;&gt; 0: Errorcode vom DataService." Name="DirReadResp.DS_ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of entries contained in the packet. &#13;&#10;For the last packet, &lt;LastPacket&gt; has the value TRUE, otherwise FALSE.&#13;&#10;&#13;&#10;Die Anzahl der im Paket enthaltenen Einträge. &#13;&#10;Beim letzten Paket hat &lt;LastPacket&gt; den Wert TRUE, sonst FALSE." Name="DirReadResp.num"/>
			LastPacket 	: BOOL;			//! <Variable Comment="FALSE: more data packets will follow.&#13;&#10;TRUE: this is the last data packet.&#13;&#10;&#13;&#10;FALSE: es folgen noch weitere Datenpakete.&#13;&#10;TRUE: dies ist das letzte Datenpaket." Name="DirReadResp.LastPacket"/>
			pDirReadRsp 	: ^DSComm::_DS_DirReadResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="DirReadResp.pDirReadRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileRemove() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;If an entire directory is deleted, this method is only called at the end of the deletion process. &#13;&#10;During deletion, the ProgressStatusPush() method may also be called once or several times.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileRemove() zur Verfügung stehen. &#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden. &#13;&#10;Wenn ein ganzes Verzeichnis gelöscht wird, dann wird diese Methode erst am Ende des Löschvorgangs aufgerufen. &#13;&#10;Während des Löschens wird ev. auch die Methode ProgressStatusPush() einmal oder mehrmals aufgerufen." Name="FileRemoveResp"/>
	FUNCTION VIRTUAL GLOBAL FileRemoveResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileRemoveResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileRemoveResp.ErrorNo"/>
			pFileRemoveRsp 	: ^DSComm::_DS_FileRemoveResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileRemoveResp.pFileRemoveRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileCopy() is available. &#13;&#10;If these data are needed later, they must be copied immediately. &#13;&#10;If an entire directory is copied, this method is not called until the end of the copy process. &#13;&#10;During copying, the ProgressStatusPush() method may also be called once or several times.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileCopy() zur Verfügung stehen. &#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden. &#13;&#10;Wenn ein ganzes Verzeichnis kopiert wird, dann wird diese Methode erst am Ende des Kopiervorgangs aufgerufen. &#13;&#10;Während des Kopierens wird ev. auch die Methode ProgressStatusPush() einmal oder mehrmals aufgerufen." Name="FileCopyResp"/>
	FUNCTION VIRTUAL GLOBAL FileCopyResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileCopyResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileCopyResp.ErrorNo"/>
			pFileCopyRsp 	: ^DSComm::_DS_FileCopyResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileCopyResp.pFileCopyRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileInfo() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileInfo() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileInfoResp"/>
	FUNCTION VIRTUAL GLOBAL FileInfoResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileInfoResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileInfoResp.ErrorNo"/>
			pFileInfoRsp 	: ^DSComm::_DS_FileInfoResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileInfoResp.pFileInfoRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileRename() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileRename() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileRenameResp"/>
	FUNCTION VIRTUAL GLOBAL FileRenameResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileRenameResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileRenameResp.ErrorNo"/>
			pFileRenameRsp 	: ^DSComm::_DS_FileRenameResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileRenameResp.pFileRenameRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileSetAttribute() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileSetAttribute() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileSetAttributeResp"/>
	FUNCTION VIRTUAL GLOBAL FileSetAttributeResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileSetAttributeResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileSetAttributeResp.ErrorNo"/>
			pFileSetAttributeRsp 	: ^DSComm::_DS_FileSetAttributeResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileSetAttributeResp.pFileSetAttributeRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of GetDriveList() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von GetDriveList() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDriveListResp"/>
	FUNCTION VIRTUAL GLOBAL GetDriveListResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="GetDriveListResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="GetDriveListResp.ErrorNo"/>
			pGetDriveListRsp 	: ^DSComm::_DS_GetDriveListResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="GetDriveListResp.pGetDriveListRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of FileMove() is available. &#13;&#10;If these data are needed later, they must be copied immediately. &#13;&#10;If an entire directory is moved, this method is not called until the end of the move. &#13;&#10;During the move, the ProgressStatusPush() method may also be called once or several times.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von FileMove() zur Verfügung stehen. &#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden. &#13;&#10;Wenn ein ganzes Verzeichnis verschoben wird, dann wird diese Methode erst am Ende des Verschiebevorgangs aufgerufen. &#13;&#10;Während des Verschiebens wird ev. auch die Methode ProgressStatusPush() einmal oder mehrmals aufgerufen." Name="FileMoveResp"/>
	FUNCTION VIRTUAL GLOBAL FileMoveResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="FileMoveResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeoutLong, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeoutLong, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="FileMoveResp.ErrorNo"/>
			pFileMoveRsp 	: ^DSComm::_DS_FileMoveResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="FileMoveResp.pFileMoveRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalAdd() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalAdd() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalAddResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalAddResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalAddResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalAddResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalAddResp.num"/>
			pEventjournalAddRsp 	: ^DSComm::_DS_EventjournalAddResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalAddResp.pEventjournalAddRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalGet() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalGet() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalGetResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalGetResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalGetResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalGetResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalGetResp.num"/>
			pEventjournalGetRsp 	: ^DSComm::_DS_EventjournalGetResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalGetResp.pEventjournalGetRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalGetAll() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalGetAll() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalGetAllResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalGetAllResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalGetAllResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalGetAllResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalGetAllResp.num"/>
			LastPacket 	: BOOL;			//! <Variable Comment="FALSE: more data packets will follow.&#13;&#10;TRUE: this is the last data packet.&#13;&#10;&#13;&#10;FALSE: es folgen noch weitere Datenpakete.&#13;&#10;TRUE: dies ist das letzte Datenpaket." Name="EventjournalGetAllResp.LastPacket"/>
			pEventjournalGetAllRsp 	: ^DSComm::_DS_EventjournalGetResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalGetAllResp.pEventjournalGetAllRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalDel() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalDel() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalDelResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalDelResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalDelResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalDelResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalDelResp.num"/>
			pEventjournalDelRsp 	: ^DSComm::_DS_EventjournalDelResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalDelResp.pEventjournalDelRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalDelAll() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalDelAll() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalDelAllResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalDelAllResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalDelAllResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalDelAllResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalDelAllResp.num"/>
			pEventjournalDelAllRsp 	: ^DSComm::_DS_EventjournalDelAllResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalDelAllResp.pEventjournalDelAllRsp"/>
		END_VAR;
				//! <Function Comment="Automatic update of the journal list. Is sent by the Data Service with every entry in the event journal.&#13;&#10;Eventjournal updates are passed to the EventjournalUpdatePush() method in the object that &#13;&#10;registered itself with SubscribeEventjournalUpdates() for these updates.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Automatische Aktualisierung der Journalliste. Wird vom Data Service bei jedem Eintrag ins Eventjournal gesendet.&#13;&#10;Eventjournal Aktualisierungen werden an die Methode EventjournalUpdatePush() in jenem Objekt übergeben, welches &#13;&#10;sich mit SubscribeEventjournalUpdates() für diese Aktualisierungen registriert hat.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalUpdatePush"/>
	FUNCTION VIRTUAL GLOBAL EventjournalUpdatePush
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Currently always -1.&#13;&#10;&#13;&#10;Derzeit immer -1." Name="EventjournalUpdatePush.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="EventjournalUpdatePush.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalUpdatePush.num"/>
			pEventjournalUpd 	: ^DSComm::_DS_EventjournalGetResp;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalUpdatePush.pEventjournalUpd"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalQuitAlarm() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalQuitAlarm() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalQuitAlarmResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalQuitAlarmResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalQuitAlarmResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalQuitAlarmResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalQuitAlarmResp.num"/>
			pEventjournalQuitAlarmRsp 	: ^DSComm::_DS_EventjournalQuitAlarmResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalQuitAlarmResp.pEventjournalQuitAlarmRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of EventjournalQuitAll() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von EventjournalQuitAll() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalQuitAllResp"/>
	FUNCTION VIRTUAL GLOBAL EventjournalQuitAllResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="EventjournalQuitAllResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="EventjournalQuitAllResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="EventjournalQuitAllResp.num"/>
			pEventjournalQuitAllRsp 	: ^DSComm::_DS_EventjournalQuitAllResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="EventjournalQuitAllResp.pEventjournalQuitAllRsp"/>
		END_VAR;
				//! <Function Comment="Sends messages (MajorID and MinorID plus data) to different communication partners (= local/remote clients or stations).&#13;&#10;&#13;&#10;Sendet Nachrichten (MajorID und MinorID plus Daten) an verschiedene Kommunikationspartner (= local/remote Clients oder Stations)." Name="SendUserEvent"/>
	FUNCTION GLOBAL SendUserEvent
		VAR_INPUT
			MajorID 	: UINT;			//! <Variable Comment="MajorID assigned by the user for the user event. &#13;&#10;The MajorID must not be in the range 0xF000 to 0xFFFF.&#13;&#10;&#13;&#10;Vom Anwender vergebene MajorID für das User Event. &#13;&#10;Die MajorID darf nicht im Bereich 0xF000 bis 0xFFFF sein." Name="SendUserEvent.MajorID"/>
			MinorID 	: UINT;			//! <Variable Comment="MinorID assigned by the user for the user event. &#13;&#10;&#13;&#10;Vom Anwender vergebene MinorID für das User Event." Name="SendUserEvent.MinorID"/>
			SessionID 	: UINT;			//! <Variable Comment="The SessionId of the remote station. For stations, the SessionId corresponds to the station number.&#13;&#10;&#10;&#10;To be able to send messages to all devices of a group, broadcast addresses are available for each group as well as for all devices:&#13;&#10;&#13;&#10;&#10;&#10;From                  To                        Name                                 Description&#13;&#10;&#10;0x0000 (0)        0x00FF (255)        ID_STATION                      Unique station number&#13;&#10;&#10;0x0100 (256)                                 ID_STATION_ALL              Broadcast address of all stations&#13;&#10;&#10;0x0101 (257)    0x01FE (510)         ---                                    Reserved / Invalid&#10;&#13;&#10;0x01FF (511)                                 ID_DATASERVICE              The SessionID of the Data Service&#13;&#10;&#10;0x0200 (512)    0x03FF(1023)      ID_LOCAL_CLIENT             Unique Id of a local Client&#13;&#10;&#10;0x0400 (1024)                              ID_LOCAL_CLIENT_ALL      Broadcast Address of all local clients&#13;&#10;&#10;0x0401 (1025)  0x04FF (1279)      ---                                      Reserved / Invalid&#10;&#13;&#10;0x0500 (1280)  0x3FFF (16383)    ID_REMOTE_CLIENT          Unique Id of a remote Client&#13;&#10;&#10;0x4000 (16384)                             ID_REMOTE_CLIENT_ALL  Broadcast Address of all remote clients&#10;&#13;&#10;0x4001 (16385) 0x7FFF (32767)    ---                                     Reserved / Invalid&#13;&#10;&#10;0x8000 (32768)                             ID_CLIENTS                       Broadcast address of all clients (local + remote)&#13;&#10;&#10;0x8001 (32769) 0xFFFE (65534)    ---                                     Reserved / Invalid&#10;&#13;&#10;0xFFFF (65535)                              ID_ALL                               Broadcast Address of all devices (Clients + Stations)&#10;&#10;&#13;&#10;&#13;&#10;&#13;&#10;Die SessionId der Gegenstelle. Bei Stationen entspricht die SessionId der Stationsnummer.&#13;&#10;Um einfach Nachrichten an alle Geräte einer Gruppe senden zu können, sind Broadcast Adressen für jede Gruppe, sowie für alle Gräte vorhanden:&#13;&#10;&#13;&#10;Von                     Bis                       Name                                 Beschreibung&#13;&#10;0x0000 (0)         0x00FF (255)       ID_STATION                      Eindeutige Stationsnummer&#13;&#10;0x0100 (256)                                 ID_STATION_ALL               Broadcast Adresse aller Stationen&#13;&#10;0x0101 (257)      0x01FE (510)      ---                                     Reserved / Invalid&#13;&#10;0x01FF (511)                                  ID_DATASERVICE             Die SessionID des Dataservice&#13;&#10;0x0200 (512)      0x03FF(1023)     ID_LOCAL_CLIENT            Eindeutige Id eines lokalen Clients&#13;&#10;0x0400 (1024)                               ID_LOCAL_CLIENT_ALL     Broadcast Adresse aller lokalen Clients&#13;&#10;0x0401 (1025)    0x04FF (1279)     ---                                     Reserved / Invalid&#13;&#10;0x0500 (1280)    0x3FFF (16383)  ID_REMOTE_CLIENT          Eindeutige Id eines remote Clients&#13;&#10;0x4000 (16384)                             ID_REMOTE_CLIENT_ALL  Broadcast Adresse aller remote Clients&#13;&#10;0x4001 (16385)  0x7FFF (32767)  ---                                      Reserved / Invalid&#13;&#10;0x8000 (32768)                             ID_CLIENTS                       Broadcast Adresse aller Clients (local + remote)&#13;&#10;0x8001 (32769)  0xFFFE (65534)  ---                                      Reserved / Invalid&#13;&#10;0xFFFF (65535)                              ID_ALL                              Broadcast Adresse aller Geräte (Clients + Stations)" Name="SendUserEvent.SessionID"/>
			pDataSrc 	: pVoid;			//! <Variable Comment="Pointer to the data for the user event.&#13;&#10;&#13;&#10;Zeiger auf die Daten für das User Event." Name="SendUserEvent.pDataSrc"/>
			DataLen 	: UDINT;			//! <Variable Comment="Length of the data to be sent in bytes.&#13;&#10;&#13;&#10;Länge der zu sendenden Daten in Bytes." Name="SendUserEvent.DataLen"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;MajorID&gt; is out of range or the pointer &lt;pDataSrc&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;MajorID&gt; ist außerhalb des gültigen Bereichs oder der Zeiger &lt;pDataSrc&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SendUserEvent.MessageID"/>
		END_VAR;
				//! <Function Comment="Event journal updates are passed to the EventjournalUpdatePush() method in the object that called this method.&#13;&#10;&#13;&#10;Eventjournal Updates werden an die Methode EventjournalUpdatePush() in jenem Objekt übergeben, welches diese Methode aufgerufen hat." Name="SubscribeEventjournalUpdates"/>
	FUNCTION GLOBAL SubscribeEventjournalUpdates;
				//! <Function Comment="After calling this method, no more Eventjournal updates are passed to the EventjournalUpdatePush() method.&#13;&#10;&#13;&#10;Nach dem Aufruf dieser Methode werden keine Eventjournal Updates mehr an die Methode EventjournalUpdatePush() übergeben." Name="UnsubscribeEventjournalUpdates"/>
	FUNCTION GLOBAL UnsubscribeEventjournalUpdates;
				//! <Function Comment="With this method, an object logs on to receive user events. &#13;&#10;User events with the values &lt;MajorID&gt;&lt;MinorID&gt; are passed to the UserEventReceive() method in the object that called this method.&#13;&#10;&#13;&#10;Mit dieser Methode meldet sich ein Objekt für den Empfang von User Events an. &#13;&#10;User Events mit den Werten &lt;MajorID&gt;&lt;MinorID&gt; werden an die Methode UserEventReceive() in jenem Objekt übergeben, welches diese Methode aufgerufen hat." Name="SubscribeUserEvents"/>
	FUNCTION GLOBAL SubscribeUserEvents
		VAR_INPUT
			MajorID 	: UINT;			//! <Variable Comment="MajorID of the user event.&#13;&#10;&#13;&#10;MajorID des User Events." Name="SubscribeUserEvents.MajorID"/>
			MinorID 	: UINT;			//! <Variable Comment="MinorID of the user event. The value 65535 means that all MinorIDs are valid.&#13;&#10;&#13;&#10;MinorID des User Events. Der Wert 65535 bedeutet, dass alle MinorIDs gültig sind." Name="SubscribeUserEvents.MinorID"/>
		END_VAR
		VAR_OUTPUT
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_WRONG_PARAMETER: the MajorID must not be in the range 0xF000 to 0xFFFF.&#13;&#10;ERR_MEM_ALLOC: the buffer for the Minor-IDs could not be allocated.&#13;&#10;ERR_USER_EVENT_FULL: no further user events can be registered.&#13;&#10;ERR_USER_EVENT_EXISTS: the user event &lt;MajorID&gt;&lt;MinorID&gt; has already been registered.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_WRONG_PARAMETER: die MajorID darf nicht im Bereich 0xF000 bis 0xFFFF sein.&#13;&#10;ERR_MEM_ALLOC: der Puffer für die Minor-IDs konnte nicht angelegt werden.&#13;&#10;ERR_USER_EVENT_FULL: es können keine weiteren User Events registriert werden.&#13;&#10;ERR_USER_EVENT_EXISTS: das User Event &lt;MajorID&gt;&lt;MinorID&gt; wurde schon registriert." Name="SubscribeUserEvents.ErrorNo"/>
		END_VAR;
				//! <Function Comment="After calling this method, no more user events with the values &lt;MajorID&gt;&lt;MinorID&gt; are passed to the method UserEventReceive().&#13;&#10;Registered User Events with other values of &lt;MajorID&gt;&lt;MinorID&gt; are still passed to the method.&#13;&#10;&#13;&#10;Nach dem Aufruf dieser Methode werden keine User Events mehr mit den Werten &lt;MajorID&gt;&lt;MinorID&gt; an die Methode UserEventReceive() übergeben.&#13;&#10;Registrierte User Events mit anderen Werten von &lt;MajorID&gt;&lt;MinorID&gt; werden weiterhin übergeben." Name="UnsubscribeUserEvents"/>
	FUNCTION GLOBAL UnsubscribeUserEvents
		VAR_INPUT
			MajorID 	: UINT;			//! <Variable Comment="MajorID of the user event.&#13;&#10;&#13;&#10;MajorID des User Events." Name="UnsubscribeUserEvents.MajorID"/>
			MinorID 	: UINT;			//! <Variable Comment="MinorID of the user event. The value 65535 makes all MinorIDs invalid.&#13;&#10;&#13;&#10;MinorID des User Events. Mit dem Wert 65535 werden alle MinorIDs abgemeldet." Name="UnsubscribeUserEvents.MinorID"/>
		END_VAR
		VAR_OUTPUT
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_WRONG_PARAMETER: the MajorID must not be in the range 0xF000 to 0xFFFF.&#13;&#10;ERR_USER_EVENT_NOT_FOUND: UserEvent (MajorID / MinorID) not found.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_WRONG_PARAMETER: die &lt;MajorID&gt; darf nicht im Bereich 0xF000 bis 0xFFFF sein.&#13;&#10;ERR_USER_EVENT_NOT_FOUND: UserEvent (MajorID / MinorID) nicht gefunden." Name="UnsubscribeUserEvents.ErrorNo"/>
		END_VAR;
				//! <Function Comment="Sets software parameters.&#13;&#10;&#13;&#10;Setzt Software Parameter." Name="SetParameter"/>
	FUNCTION GLOBAL SetParameter
		VAR_INPUT
			ParaNo 	: DSComm::_DS_Parameter;			//! <Variable Comment="Parameter number.&#13;&#10;&#13;&#10;Parameter Nummer." Name="SetParameter.ParaNo"/>
			Value 	: DINT;			//! <Variable Comment="Parameter value.&#13;&#10;&#13;&#10;Parameter Wert." Name="SetParameter.Value"/>
			Mode 	: DINT;			//! <Variable Comment="No significance at present.&#13;&#10;&#13;&#10;Derzeit ohne Bedeutung." Name="SetParameter.Mode"/>
		END_VAR
		VAR_OUTPUT
			Retcode 	: DINT;			//! <Variable Comment="ERR_WRONG_PARAMETER: &lt;ParaNo&gt; unknown.&#13;&#10;&#13;&#10;ERR_WRONG_PARAMETER: &lt;ParaNo&gt; unbekannt." Name="SetParameter.Retcode"/>
		END_VAR;
				//! <Function Comment="Reads software parameters.&#13;&#10;&#13;&#10;Liest Software Parameter." Name="GetParameter"/>
	FUNCTION GLOBAL GetParameter
		VAR_INPUT
			ParaNo 	: DSComm::_DS_Parameter;			//! <Variable Comment="Parameter number.&#13;&#10;&#13;&#10;Parameter Nummer." Name="GetParameter.ParaNo"/>
			pValue 	: ^DINT;			//! <Variable Comment="Pointer to a buffer for the parameter value.&#13;&#10;&#13;&#10;Zeiger auf einen Puffer für den Parameterwert." Name="GetParameter.pValue"/>
			Mode 	: DINT;			//! <Variable Comment="No significance at present.&#13;&#10;&#13;&#10;Derzeit ohne Bedeutung." Name="GetParameter.Mode"/>
		END_VAR
		VAR_OUTPUT
			Retcode 	: DINT;			//! <Variable Comment="ERR_WRONG_PARAMETER: &lt;ParaNo&gt; unknown or &lt;pValue&gt; invalid.&#13;&#10;&#13;&#10;ERR_WRONG_PARAMETER: &lt;ParaNo&gt; unbekannt oder &lt;pValue&gt; ungültig." Name="GetParameter.Retcode"/>
		END_VAR;
				//! <Function Comment="This method receives user events created with SendUserEvent().&#13;&#10;A user event with the values &lt;MajorID&gt;&lt;MinorID&gt; is passed to &#13;&#10;UserEventReceive() in the object that has registered itself with SubscribeUserEvents() for this value pair.&#13;&#10;&#13;&#10;Diese Methode empfängt mit SendUserEvent() erzeugte User Events.&#13;&#10;Ein User Event mit den Werten &lt;MajorID&gt;&lt;MinorID&gt; wird an &#13;&#10;UserEventReceive() in jenem Objekt übergeben, welches sich mit SubscribeUserEvents() für dieses Wertepaar registriert hat." Name="UserEventReceive"/>
	FUNCTION VIRTUAL GLOBAL UserEventReceive
		VAR_INPUT
			MajorID 	: UINT;			//! <Variable Comment="MajorID assigned by the user for the user event.&#13;&#10;&#13;&#10;Vom Anwender vergebene MajorID für das User Event." Name="UserEventReceive.MajorID"/>
			MinorID 	: UINT;			//! <Variable Comment="MinorID assigned by the user for the user event.&#13;&#10;&#13;&#10;Vom Anwender vergebene MinorID für das User Event." Name="UserEventReceive.MinorID"/>
			MessageID 	: DINT;			//! <Variable Comment="This value was created when SendUserEvent() was called.&#13;&#10;&#13;&#10;Dieser Wert wurde beim Aufruf von SendUserEvent() erzeugt." Name="UserEventReceive.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="UserEventReceive.ErrorNo"/>
			pData 	: pVoid;			//! <Variable Comment="Pointer to the data sent with SendUserEvent(). If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Daten welche mit SendUserEvent() verschickt wurden.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UserEventReceive.pData"/>
			Length 	: UDINT;			//! <Variable Comment="Lenght of the data in bytes pointed to by &lt;pData&gt;.&#13;&#10;&#13;&#10;Länge der Daten in Bytes, auf die &lt;pData&gt; zeigt." Name="UserEventReceive.Length"/>
		END_VAR;
				//! <Function Comment="After calling this method, attempts are made to establish a TCP connection again.&#13;&#10;&#13;&#10;Nach Aufruf dieser Methode wird wieder versucht eine TCP-Verbindung aufzubauen." Name="StartTCPComm"/>
	FUNCTION GLOBAL StartTCPComm;
				//! <Function Comment="When the alarm list changes, the method AlarmListUpdatePush() is called in the object that called this method.&#13;&#10;When an alarm is deleted, the method AlarmDeleteUpdatePush() is called in the object that called this method.&#13;&#10;&#13;&#10;Bei Änderungen der Alarmliste wird die Methode AlarmListUpdatePush() in jenem Objekt aufgerufen, welches diese Methode aufgerufen hat.&#13;&#10;Wenn Alarme gelöscht werden, dann wird die Methode AlarmDeleteUpdatePush() in jenem Objekt aufgerufen, welches diese Methode aufgerufen hat." Name="SubscribeAlarmListUpdate"/>
	FUNCTION GLOBAL SubscribeAlarmListUpdate
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SubscribeAlarmListUpdate.MessageID"/>
		END_VAR;
				//! <Function Comment="After calling this method, no more alarm list updates are passed to the AlarmListUpdatePush() method.&#13;&#10;&#13;&#10;Nach dem Aufruf dieser Methode werden Änderungen der Alarmliste nicht mehr an die Methode AlarmListUpdatePush() übergeben." Name="UnsubscribeAlarmListUpdate"/>
	FUNCTION GLOBAL UnsubscribeAlarmListUpdate
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="UnsubscribeAlarmListUpdate.MessageID"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SubscribeAlarmListUpdate() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SubscribeAlarmListUpdate() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SubscribeAlarmListUpdateResp"/>
	FUNCTION VIRTUAL GLOBAL SubscribeAlarmListUpdateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SubscribeAlarmListUpdateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SubscribeAlarmListUpdateResp.ErrorNo"/>
			pAlarmListUpdateAddRsp 	: ^DSComm::_DS_AlarmListUpdateAddResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SubscribeAlarmListUpdateResp.pAlarmListUpdateAddRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UnsubscribeAlarmListUpdate() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UnsubscribeAlarmListUpdate() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UnsubscribeAlarmListUpdateResp"/>
	FUNCTION VIRTUAL GLOBAL UnsubscribeAlarmListUpdateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UnsubscribeAlarmListUpdateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UnsubscribeAlarmListUpdateResp.ErrorNo"/>
			pAlarmListUpdateSubRsp 	: ^DSComm::_DS_AlarmListUpdateSubResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UnsubscribeAlarmListUpdateResp.pAlarmListUpdateSubRsp"/>
		END_VAR;
				//! <Function Comment="Updating the alarm list. Sent by the Data Service when the contents of the alarm list change and when &#13;&#10;an object has registered itself for these updates with SubscribeAlarmListUpdate().&#13;&#10;The updates of the alarm list are passed to the AlarmListUpdatePush() method in the registered object.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Aktualisierung der Alarmliste. Wird vom Data Service verschickt, wenn sich der Inhalt der Alarmliste ändert &#13;&#10;und wenn sich ein Objekt mit SubscribeAlarmListUpdate() für diese Aktualisierungen registriert hat.&#13;&#10;Die Aktualisierungen der Alarmliste werden an die Methode AlarmListUpdatePush() im registrierten Objekt übergeben.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmListUpdatePush"/>
	FUNCTION VIRTUAL GLOBAL AlarmListUpdatePush
		VAR_INPUT
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="AlarmListUpdatePush.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="AlarmListUpdatePush.num"/>
			pAlarmListUpd 	: ^DSComm::_DS_AlarmListUpdate;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmListUpdatePush.pAlarmListUpd"/>
		END_VAR;
				//! <Function Comment="When a HotAlarm changes, the HotAlarmUpdatePush() method is called in the object that called this method.&#13;&#10;&#13;&#10;Wenn sich ein HotAlarm ändert, wird die Methode HotAlarmUpdatePush() in jenem Objekt aufgerufen, welches diese Methode aufgerufen hat." Name="SubscribeHotAlarmUpdate"/>
	FUNCTION GLOBAL SubscribeHotAlarmUpdate
		VAR_INPUT
			pHotAlarm 	: ^DSComm::_DS_HotAlarmAddCmd;			//! <Variable Comment="Pointer to the HotAlarm data.&#13;&#10;&#13;&#10;Zeiger auf die HotAlarm Daten." Name="SubscribeHotAlarmUpdate.pHotAlarm"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pHotAlarm&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pHotAlarm&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="SubscribeHotAlarmUpdate.MessageID"/>
		END_VAR;
				//! <Function Comment="After calling this method, HotAlarm changes are no longer passed to the HotAlarmtUpdatePush() method.&#13;&#10;&#13;&#10;Nach dem Aufruf dieser Methode werden Änderungen eines HotAlarms nicht mehr an die Methode HotAlarmtUpdatePush() übergeben." Name="UnsubscribeHotAlarmUpdate"/>
	FUNCTION GLOBAL UnsubscribeHotAlarmUpdate
		VAR_INPUT
			pHotAlarm 	: ^DSComm::_DS_HotAlarmSubCmd;			//! <Variable Comment="Pointer to the HotAlarm data.&#13;&#10;&#13;&#10;Zeiger auf die HotAlarm Daten." Name="UnsubscribeHotAlarmUpdate.pHotAlarm"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: the pointer &lt;pHotAlarm&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Zeiger &lt;pHotAlarm&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="UnsubscribeHotAlarmUpdate.MessageID"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of SubscribeHotAlarmUpdate() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von SubscribeHotAlarmUpdate() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SubscribeHotAlarmUpdateResp"/>
	FUNCTION VIRTUAL GLOBAL SubscribeHotAlarmUpdateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="SubscribeHotAlarmUpdateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="SubscribeHotAlarmUpdateResp.ErrorNo"/>
			pHotAlarmUpdateAddRsp 	: ^DSComm::_DS_HotAlarmAddResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="SubscribeHotAlarmUpdateResp.pHotAlarmUpdateAddRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of UnsubscribeHotAlarmUpdate() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von UnsubscribeHotAlarmUpdate() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UnsubscribeHotAlarmUpdateResp"/>
	FUNCTION VIRTUAL GLOBAL UnsubscribeHotAlarmUpdateResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="UnsubscribeHotAlarmUpdateResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="UnsubscribeHotAlarmUpdateResp.ErrorNo"/>
			pHotAlarmUpdateSubRsp 	: ^DSComm::_DS_HotAlarmSubResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="UnsubscribeHotAlarmUpdateResp.pHotAlarmUpdateSubRsp"/>
		END_VAR;
				//! <Function Comment="Updating the HotAlarm. Sent by the Data Service when the HotAlarm changes and when &#13;&#10;an object has registered itself for these updates with SubscribeHotAlarmUpdate().&#13;&#10;The updates of the HotAlarm are passed to the HotAlarmUpdatePush() method in the registered object.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Aktualisierung des HotAlarms. Wird vom Data Service verschickt, wenn sich der HotAlarm ändert &#13;&#10;und wenn sich ein Objekt mit SubscribeHotAlarmUpdate() für diese Aktualisierungen registriert hat.&#13;&#10;Die Aktualisierungen des HotAlarms werden an die Methode HotAlarmUpdatePush() im registrierten Objekt übergeben.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="HotAlarmUpdatePush"/>
	FUNCTION VIRTUAL GLOBAL HotAlarmUpdatePush
		VAR_INPUT
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="HotAlarmUpdatePush.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="HotAlarmUpdatePush.num"/>
			pHotAlarmUpd 	: ^DSComm::_DS_HotAlarmUpdate;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="HotAlarmUpdatePush.pHotAlarmUpd"/>
		END_VAR;
				//! <Function Comment="Marks the specified alarms corresponding to &lt;toDelState&gt; as deleted.&#13;&#10;&#13;&#10;Markiert die angegebenen Alarme, die &lt;toDelState&gt; entsprechen, als gelöscht." Name="AlarmDelete"/>
	FUNCTION GLOBAL AlarmDelete
		VAR_INPUT
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Anzahl der übergebenen Einträge." Name="AlarmDelete.num"/>
			toDelState 	: USINT;			//! <Variable Comment="Bitmask: 0 = all alarms, Bit 0 = all  acknowledged alarms, Bit 1 = all disappeared alarms.&#13;&#10;&#13;&#10;Bitmaske: 0 = Alle Alarme, Bit 0 = alle quittierten Alarme, Bit 1 = alle gegangenen Alarme." Name="AlarmDelete.toDelState"/>
			pAlarmID 	: ^UDINT;			//! <Variable Comment="Pointer to an array with &lt;num&gt; IDs of the alarm entries.&#13;&#10;&#13;&#10;Zeiger auf ein Array mit &lt;num&gt; IDs der Alarmeinträge." Name="AlarmDelete.pAlarmID"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_WRONG_PARAMETER: &lt;num&gt; is zero or the pointer &lt;pAlarm&gt; is invalid.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_WRONG_PARAMETER: der Wert von &lt;num&gt; ist null oder der Zeiger &lt;pAlarm&gt; ist ungültig.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="AlarmDelete.MessageID"/>
		END_VAR;
				//! <Function Comment="Marks alarms corresponding to &lt;toDelState&gt; as deleted.&#13;&#10;&#13;&#10;Markiert jene Alarme, die &lt;toDelState&gt; entsprechen, als gelöscht." Name="AlarmDeleteAll"/>
	FUNCTION GLOBAL AlarmDeleteAll
		VAR_INPUT
			toDelState 	: USINT;			//! <Variable Comment="Bitmask: 0 = all alarms, Bit 0 = all  acknowledged alarms, Bit 1 = all disappeared alarms.&#13;&#10;&#13;&#10;Bitmaske: 0 = Alle Alarme, Bit 0 = alle quittierten Alarme, Bit 1 = alle gegangenen Alarme." Name="AlarmDeleteAll.toDelState"/>
		END_VAR
		VAR_OUTPUT
			MessageID 	: DINT;			//! <Variable Comment="&gt;= 0: Used to match the response with the corresponding command.&#13;&#10;  &lt; 0: Error.&#13;&#10;  ERR_MALLOC_SEND_BUFFER: not enough RAM for the send buffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: the command journal is full.&#13;&#10;  ERR_TCPIP: not all data has been transferred.&#13;&#10;  ERR_DS_RESET: DataService is in RESET state.&#13;&#10;  ERR_NO_USER_LOGIN: there is no user logged in.&#13;&#10;&#13;&#10;&gt;= 0: Dient zum zusammenfinden der Response mit dem entsprechendem Command.&#13;&#10;  &lt; 0: Fehler&#13;&#10;  ERR_MALLOC_SEND_BUFFER: zu wenig RAM für den Sendepuffer.&#13;&#10;  ERR_JOB_JOURNAL_FULL: die Auftragsverwaltung ist voll.&#13;&#10;  ERR_TCPIP: es wurden nicht alle Daten übertragen.&#13;&#10;  ERR_DS_RESET: DataService ist im RESET-Zustand.&#13;&#10;  ERR_NO_USER_LOGIN: Es ist kein Benutzer angemeldet." Name="AlarmDeleteAll.MessageID"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of AlarmDelete() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von AlarmDelete() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteResp"/>
	FUNCTION VIRTUAL GLOBAL AlarmDeleteResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="AlarmDeleteResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="AlarmDeleteResp.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="AlarmDeleteResp.num"/>
			pAlarmDeleteRsp 	: ^DSComm::_DS_AlarmDeleteResp;			//! <Variable Comment="Pointer to the first entry of the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteResp.pAlarmDeleteRsp"/>
		END_VAR;
				//! <Function Comment="This method is called as soon as the response data of AlarmDeleteAll() is available.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Diese Methode wird aufgerufen, sobald die Response-Daten von AlarmDeleteAll() zur Verfügung stehen.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteAllResp"/>
	FUNCTION VIRTUAL GLOBAL AlarmDeleteAllResp
		VAR_INPUT
			MessageID 	: DINT;			//! <Variable Comment="Used to match the response with the corresponding command.&#13;&#10;&#13;&#10;Dient zum Zusammenfinden der Response mit dem entsprechendem Command." Name="AlarmDeleteAllResp.MessageID"/>
			ErrorNo 	: DINT;			//! <Variable Comment="0: no error.&#13;&#10;ERR_JOB_TIMEOUT: no response from the data service within the time set with SetParameter(_RespTimeout, ...).&#13;&#10;&lt;= -2000: TCP/IP error numbers.&#13;&#10;&#13;&#10;0: kein Fehler.&#13;&#10;ERR_JOB_TIMEOUT: kein Response vom Data Service innerhalb der mit SetParameter(_RespTimeout, ) eingestellten Zeit.&#13;&#10;&lt;= -2000: TCP/IP Fehlernummern." Name="AlarmDeleteAllResp.ErrorNo"/>
			pAlarmDeleteAllRsp 	: ^DSComm::_DS_AlarmDeleteAllResp;			//! <Variable Comment="Pointer to the response data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf die Response-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteAllResp.pAlarmDeleteAllRsp"/>
		END_VAR;
				//! <Function Comment="Sent by the Data Service when an alarm is marked as deleted and when an object has registered itself &#13;&#10;for these updates with SubscribeAlarmDeleteUpdate().&#13;&#10;The updates are passed to the AlarmDeleteUpdatePush() method in the registered object.&#13;&#10;If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Wird vom Data Service verschickt, wenn ein Alarm als gelöscht markiert wird und wenn sich ein Objekt mit &#13;&#10;SubscribeAlarmDeleteUpdate() für diese Aktualisierungen registriert hat.&#13;&#10;Die Aktualisierungen werden an die Methode AlarmDeleteUpdatePush() im registrierten Objekt übergeben.&#13;&#10;Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteUpdatePush"/>
	FUNCTION VIRTUAL GLOBAL AlarmDeleteUpdatePush
		VAR_INPUT
			ErrorNo 	: DINT;			//! <Variable Comment="Currently always 0.&#13;&#10;&#13;&#10;Derzeit immer 0." Name="AlarmDeleteUpdatePush.ErrorNo"/>
			num 	: UDINT;			//! <Variable Comment="The number of passed entries.&#13;&#10;&#13;&#10;Die Anzahl der übergebenen Einträge." Name="AlarmDeleteUpdatePush.num"/>
			pAlarmDeleteUpd 	: ^DSComm::_DS_AlarmDeleteUpdate;			//! <Variable Comment="Pointer to the first entry of the update data. If these data are needed later, they must be copied immediately.&#13;&#10;&#13;&#10;Zeiger auf den ersten Eintrag der Update-Daten. Diese Daten müssen bei Bedarf sofort umkopiert werden." Name="AlarmDeleteUpdatePush.pAlarmDeleteUpd"/>
		END_VAR;
				//! <Function Comment="Returns the number of characters, not bytes in the UTF8-String. Without end character \0.&#13;&#10;&#13;&#10;Liefert die Anzahl der Zeichen, nicht der Bytes, im UTF8-String. Ohne Endezeichen \0." Name="StrLenUtf8"/>
	FUNCTION GLOBAL StrLenUtf8
		VAR_INPUT
			Str_Utf8 	: ^CHAR;			//! <Variable Comment="Pointer to a null-terminated UTF8-String.&#13;&#10;&#13;&#10;Zeiger auf einen Null-terminierten UTF8-String." Name="StrLenUtf8.Str_Utf8"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Number of characters, not bytes in the UTF8-String. Without end character \0.&#13;&#10;&#13;&#10;Anzahl der Zeichen, nicht der Bytes, im UTF8-String. Ohne Endezeichen \0." Name="StrLenUtf8.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd DSComm


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DSComm_Interface::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_DSCOMM_INTERFACE
2$UINT, 3$UINT, (SIZEOF(::DSComm_Interface))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1124413560), "DSComm_Interface", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DSComm_Interface.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::DSComm_Interface.DSComm.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3848629641), "DSComm", TO_UDINT(3848629641), "DSComm", 2$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_DSComm_Interface 100

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DSComm_Interface] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DSComm_Interface::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DSComm_Interface, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #CancelCommandResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #GetVersionResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetProjectInfoResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #SendUserEventResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #SubscribeStateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #UnsubscribeStateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #Get_StateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #UpdateStatePush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #LoopResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #ProgressStatusPush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #RecipeLoadResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #RecipeSaveResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #SendToAllResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #SendToAllPush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #ResetDataserviceResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #RestartDataserviceResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #AddLocalClientResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #AddLocalClientRangeResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[19]		:= #RemoveThisLocalClientResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[20]		:= #RemoveLocalClientResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[21]		:= #RemoveLocalClientRangeResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[22]		:= #ClearLocalClientListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[23]		:= #GetCurrentIDResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[24]		:= #GetLocalClientListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[25]		:= #GetLocalClientListDetailsResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[26]		:= #GetLocalClientByIDResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[27]		:= #UserLoginResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[28]		:= #UserLogoutResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[29]		:= #UserPasswordChangeResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[30]		:= #CheckAccessLevelResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[31]		:= #CreateUserResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[32]		:= #ChangeUserSettingsResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[33]		:= #DeleteUserResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[34]		:= #GetUserListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[35]		:= #GetUserDetailsResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[36]		:= #CreateRoleResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[37]		:= #ChangeRoleResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[38]		:= #DeleteRoleResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[39]		:= #GetRoleListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[40]		:= #GetRoleDetailsResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[41]		:= #GetVarIdFromNameResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[42]		:= #GetVarIdFromLasalIdResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[43]		:= #GetLasalIdFromNameResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[44]		:= #GetLasalIdFromVarIdResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[45]		:= #GetNameFromVarIdResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[46]		:= #GetNameFromLasalIdResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[47]		:= #GetDpListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[48]		:= #GetDpInfoResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[49]		:= #GetVarIdFromCRCResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[50]		:= #GetCRCfromVarIdResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[51]		:= #GetValueResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[52]		:= #GetStringResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[53]		:= #SetValueResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[54]		:= #SetStringResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[55]		:= #IncValueResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[56]		:= #DecValueResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[57]		:= #RefListAddResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[58]		:= #RefListSubResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[59]		:= #RefListUpdatePush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[60]		:= #RefListUpdateStringPush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[61]		:= #GetStationListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[62]		:= #GetStationStatusResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[63]		:= #FileOpenResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[64]		:= #FileCloseResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[65]		:= #FileSeekResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[66]		:= #FileTellResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[67]		:= #FileReadResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[68]		:= #FileWriteResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[69]		:= #FileGetResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[70]		:= #FilePutResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[71]		:= #FileLengthResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[72]		:= #FileContentResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[73]		:= #DirCreateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[74]		:= #DirReadResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[75]		:= #FileRemoveResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[76]		:= #FileCopyResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[77]		:= #FileInfoResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[78]		:= #FileRenameResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[79]		:= #FileSetAttributeResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[80]		:= #GetDriveListResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[81]		:= #FileMoveResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[82]		:= #EventjournalAddResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[83]		:= #EventjournalGetResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[84]		:= #EventjournalGetAllResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[85]		:= #EventjournalDelResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[86]		:= #EventjournalDelAllResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[87]		:= #EventjournalUpdatePush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[88]		:= #EventjournalQuitAlarmResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[89]		:= #EventjournalQuitAllResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[90]		:= #UserEventReceive();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[91]		:= #SubscribeAlarmListUpdateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[92]		:= #UnsubscribeAlarmListUpdateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[93]		:= #AlarmListUpdatePush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[94]		:= #SubscribeHotAlarmUpdateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[95]		:= #UnsubscribeHotAlarmUpdateResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[96]		:= #HotAlarmUpdatePush();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[97]		:= #AlarmDeleteResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[98]		:= #AlarmDeleteAllResp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[99]		:= #AlarmDeleteUpdatePush();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#pragma using DSComm


FUNCTION GLOBAL DSComm_Interface::GetVersion
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetVersion(pThis:=this);
END_FUNCTION

#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetVersionResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pGetVersionRsp 	: ^DSComm::_DS_GetVersionResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)

#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetProjectInfoResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pGetProjectInfoRsp 	: ^DSComm::_DS_GetProjectInfoResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UserLogin
	VAR_INPUT
		pUserName 	: ^UINT;
		pPassword 	: ^UINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UserLogin(pThis:=this, pUserName, pPassword);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UserLoginResp
	VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pUserLoginData : ^DSComm::_DS_UserLoginResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetValue
	VAR_INPUT
		num 	: UDINT;
		pGetValue 	: ^DSComm::_DS_GetValueCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetValue(pThis:=this, num, pGetValue);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetValueResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetValueRsp: ^DSComm::_DS_GetValueResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SetValue
	VAR_INPUT
		num 	: UDINT;
		pSetValue 	: ^DSComm::_DS_SetValueCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SetValue(pThis:=this, num, pSetValue);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SetValueResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pSetValueRsp: ^DSComm::_DS_SetValueResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetString
	VAR_INPUT
		num 	: UDINT;
		pGetString 	: ^DSComm::_DS_GetStringCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetString(pThis:=this, num, pGetString);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetStringResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetStringRsp: ^DSComm::_DS_GetStringResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SetString
	VAR_INPUT
		num 	: UDINT;
		pSetString 	: ^DSComm::_DS_SetStringCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SetString(pThis:=this, num, pSetString);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SetStringResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pSetStringRsp: ^DSComm::_DS_SetStringResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::CancelCommand
	VAR_INPUT
		HandleID 	: DINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.CancelCommand(pThis:=this, HandleID$UDINT);
  MessageID += 1;
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::CancelCommandResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pCancelRsp 	: ^DSComm::_DS_CancelResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::Loop
	VAR_INPUT
		Station 	: UDINT;
		pDataSrc 	: pVoid;
		DataLen 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.Loop(pThis:=this, Station, pDataSrc, DataLen);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::LoopResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		Station 	: UDINT;
		pData 	: pVoid;
		Length 	: UDINT;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RecipeLoad
	VAR_INPUT
		pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;
		pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;
		crc 	: UDINT;
		pDpne 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RecipeLoad(pThis:=this, pFilterIncl, pFilterExcl, crc, pDpne);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RecipeLoadResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pRecipeLoadRsp 	: ^DSComm::_DS_RecipeLoadResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RecipeSave
	VAR_INPUT
		pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;
		pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;
		pDpne 	: ^CHAR;
		pHeaderText 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RecipeSave(pThis:=this, pFilterIncl, pFilterExcl, pDpne, pHeaderText);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RecipeSaveResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pRecipeSaveRsp 	: ^DSComm::_DS_RecipeSaveResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SendToAll
	VAR_INPUT
		pDataSrc 	: pVoid;
		DataLen 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SendToAll(pThis:=this, pDataSrc, DataLen);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SendToAllResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UserLogout
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UserLogout(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UserLogoutResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UserPasswordChange
	VAR_INPUT
		pOldPassword 	: ^UINT;
		pNewPassword 	: ^UINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UserPasswordChange(pThis:=this, pOldPassword, pNewPassword);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UserPasswordChangeResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pUserPasswordChangeRsp 	: ^DSComm::_DS_UserPasswordChangeResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::CheckAccessLevel
	VAR_INPUT
		num 	: UDINT;
		pCheckAccessLevel 	: ^DSComm::_DS_CheckAccessLevelCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.CheckAccessLevel(pThis:=this, num, pCheckAccessLevel);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::CheckAccessLevelResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pCheckAccessLevelRsp 	: ^DSComm::_DS_CheckAccessLevelResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::CreateUser
	VAR_INPUT
		num 	: UDINT;
		pCreateUser 	: ^DSComm::_DS_CreateUserCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.CreateUser(pThis:=this, num, pCreateUser);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::CreateUserResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pCreateUserRsp : ^DSComm::_DS_CreateUserResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::ChangeUserSettings
	VAR_INPUT
		num 	: UDINT;
		pChangeUsrSettings 	: ^DSComm::_DS_ChangeUserSettingsCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.ChangeUserSettings(pThis:=this, num, pChangeUsrSettings);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::ChangeUserSettingsResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pChangeUserRsp 	: ^DSComm::_DS_ChangeUserSettingsResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::DeleteUser
	VAR_INPUT
		num 	: UDINT;
		pUserID 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.DeleteUser(pThis:=this, num, pUserID);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::DeleteUserResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pDeleteUserRsp : ^DSComm::_DS_DeleteUserResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetUserList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetUserList(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetUserListResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetUserListRsp: ^DSComm::_DS_GetUserListResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetUserDetails
	VAR_INPUT
		userID 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetUserDetails(pThis:=this, userID);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetUserDetailsResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pUserDetails 	: ^DSComm::_DS_UserLoginResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::CreateRole
	VAR_INPUT
		num 	: UDINT;
		pCreateRolePara 	: ^DSComm::_DS_CreateRoleCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.CreateRole(pThis:=this, num, pCreateRolePara);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::CreateRoleResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pCreateRoleRsp : ^DSComm::_DS_CreateRoleResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::ChangeRole
	VAR_INPUT
		num 	: UDINT;
		pChangeRole 	: ^DSComm::_DS_ChangeRoleCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.ChangeRole(pThis:=this, num, pChangeRole);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::ChangeRoleResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pChangeRoleRsp : ^DSComm::_DS_ChangeRoleResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::DeleteRole
	VAR_INPUT
		num 	: UDINT;
		pRoleID 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.DeleteRole(pThis:=this, num, pRoleID);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::DeleteRoleResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pDeleteRoleRsp : ^DSComm::_DS_DeleteRoleResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetRoleList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetRoleList(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetRoleListResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetRoleListRsp: ^DSComm::_DS_GetRoleListResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetRoleDetails
	VAR_INPUT
		roleID 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetRoleDetails(pThis:=this, roleID);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetRoleDetailsResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pGetRoleDetailsRsp : ^DSComm::_DS_GetRoleDetailsResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetVarIdFromName
	VAR_INPUT
		num 	: UDINT;
		ppName 	: ^pChar;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetVarIdFromName(pThis:=this, num, ppName);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetVarIdFromNameResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetVarIdFromNameRsp: ^DSComm::_DS_GetVarIdFromNameResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetVarIdFromLasalId
	VAR_INPUT
		num 	: UDINT;
		pLasalId 	: ^DSComm::_DS_GetVarIdFromLasalIdCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetVarIdFromLasalId(pThis:=this, num, pLasalId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetVarIdFromLasalIdResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetVarIdFromLasalIdRsp: ^DSComm::_DS_GetVarIdFromLasalIdResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLasalIdFromName
	VAR_INPUT
		num 	: UDINT;
		ppName 	: ^pChar;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetLasalIdFromName(pThis:=this, num, ppName);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetLasalIdFromNameResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetLasalIdFromNameRsp: ^DSComm::_DS_GetLasalIdFromNameResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLasalIdFromVarId
	VAR_INPUT
		num 	: UDINT;
		pVarId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetLasalIdFromVarId(pThis:=this, num, pVarId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetLasalIdFromVarIdResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetLasalIdIdFromVarIdRsp: ^DSComm::_DS_GetLasalIdIdFromVarIdResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetNameFromVarId
	VAR_INPUT
		num 	: UDINT;
		pVarId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetNameFromVarId(pThis:=this, num, pVarId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetNameFromVarIdResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetNameFromVarIdRsp: ^DSComm::_DS_GetNameFromVarIdResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetNameFromLasalId
	VAR_INPUT
		num 	: UDINT;
		pLasalId 	: ^DSComm::_DS_GetNameFromLasalIdCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetNameFromLasalId(pThis:=this, num, pLasalId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetNameFromLasalIdResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetNameFromLasalIdRsp: ^DSComm::_DS_GetNameFromLasalIdResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::IncValue
	VAR_INPUT
		num 	: UDINT;
		pdpId : ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.IncValue(pThis:=this, num, pdpId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::IncValueResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pIncValueRsp: ^DSComm::_DS_IncDecValueResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::DecValue
	VAR_INPUT
		num 	: UDINT;
		pdpId : ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.DecValue(pThis:=this, num, pdpId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::DecValueResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pDecValueRsp: ^DSComm::_DS_IncDecValueResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RefListAdd
	VAR_INPUT
		channel 	: UDINT;
		num 	: UDINT;
		pDpId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RefListAdd(pThis:=this, channel, num, pDpId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RefListAddResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		Channel 	: UDINT;
		num 	: UDINT;
		pRefListAddRsp 	: ^DSComm::_DS_RefListAddResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RefListSub
	VAR_INPUT
		channel 	: UDINT;
		num 	: UDINT;
		pDpId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RefListSub(pThis:=this, channel, num, pDpId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RefListSubResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		Channel 	: UDINT;
		num 	: UDINT;
		pRefListSubRsp 	: ^DSComm::_DS_RefListSubResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RefListUpdatePush
	VAR_INPUT
		ErrorNo 	: DINT;
		channel 	: UDINT;
		num 	: UDINT;
		pRefListUpdate 	: ^DSComm::_DS_RefListUpdate;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RefListUpdateStringPush
	VAR_INPUT
		ErrorNo 	: DINT;
		channel 	: UDINT;
		num 	: UDINT;
		pRefListUpdateString 	: ^DSComm::_DS_RefListUpdateString;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetDpInfo
	VAR_INPUT
		num 	: UDINT;
		pVarId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetDpInfo(pThis:=this, num, pVarId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetDpInfoResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetDpInfoRsp: ^DSComm::_DS_GetDpInfoResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetDpList
	VAR_INPUT
		pFilterIncl 	: ^DSComm::_DS_UnsLongLongInt;
		pFilterExcl 	: ^DSComm::_DS_UnsLongLongInt;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetDpList(pThis:=this, pFilterIncl, pFilterExcl);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetDpListResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		TotalNum 	: UDINT;
		num 	: UDINT;
		LastPacket 	: BOOL;
		pGetDpListRsp 	: ^DSComm::_DS_GetDpListResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)

#pragma warning(disable: 73)

FUNCTION GLOBAL DSComm_Interface::FileOpen
	VAR_INPUT
		pDpne 	: ^CHAR;
		pMode 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileOpen(pThis:=this, pDpne, pMode);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileOpenResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileOpenRsp: ^DSComm::_DS_FileOpenResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileClose
	VAR_INPUT
		handle 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileClose(pThis:=this, handle);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileCloseResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileCloseRsp: ^DSComm::_DS_FileCloseResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileSeek
	VAR_INPUT
		handle 	: UDINT;
		start 	: UDINT;
		offset 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileSeek(pThis:=this, handle, start, offset);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileSeekResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileSeekRsp: ^DSComm::_DS_FileSeekResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileTell
	VAR_INPUT
		handle 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileTell(pThis:=this, handle);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileTellResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pFileTellRsp 	: ^DSComm::_DS_FileTellResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileRead
	VAR_INPUT
		handle 	: UDINT;
		length 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileRead(pThis:=this, handle, length);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileReadResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileReadRsp: ^DSComm::_DS_FileReadResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileWrite
	VAR_INPUT
		handle 	: UDINT;
		length 	: UDINT;
		pWriteData 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileWrite(pThis:=this, handle, length, pWriteData);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileWriteResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileWriteRsp: ^DSComm::_DS_FileWriteResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileGet
	VAR_INPUT
		handle 	: UDINT;
		length 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileGet(pThis:=this, handle, length);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileGetResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileGetRsp: ^DSComm::_DS_FileGetResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FilePut
	VAR_INPUT
		handle 	: UDINT;
		pString 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FilePut(pThis:=this, handle, pString);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FilePutResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFilePutRsp: ^DSComm::_DS_FilePutResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileLength
	VAR_INPUT
		handle 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileLength(pThis:=this, handle);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileLengthResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pFileLengthRsp 	: ^DSComm::_DS_FileLengthResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileContent
	VAR_INPUT
		pDpne 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileContent(pThis:=this, pDpne);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileContentResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		LastPacket 	: BOOL;
		pFileContentRsp 	: ^DSComm::_DS_FileContentResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::DirCreate
	VAR_INPUT
		pDp 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.DirCreate(pThis:=this, pDp);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::DirCreateResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pDirCreateRsp: ^DSComm::_DS_DirCreateResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::DirRead
	VAR_INPUT
		FilterIncl 	: UDINT;
		FilterExcl 	: UDINT;
		pDp 	: ^CHAR;
		pNe 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.DirRead(pThis:=this, FilterIncl, FilterExcl, pDp, pNe);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::DirReadResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		DS_ErrorNo 	: DINT;
		num 	: UDINT;
		LastPacket 	: BOOL;
		pDirReadRsp 	: ^DSComm::_DS_DirReadResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileRemove
	VAR_INPUT
		pDpne 	: ^CHAR;
		updateProgress 	: BOOL;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileRemove(pThis:=this, pDpne, updateProgress);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileRemoveResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileRemoveRsp: ^DSComm::_DS_FileRemoveResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileCopy
	VAR_INPUT
		pDpneSrc 	: ^CHAR;
		pDpneDest 	: ^CHAR;
		updateProgress 	: BOOL;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileCopy(pThis:=this, pDpneSrc, pDpneDest, updateProgress);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileCopyResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileCopyRsp: ^DSComm::_DS_FileCopyResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileInfo
	VAR_INPUT
		pDpne 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileInfo(pThis:=this, pDpne);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileInfoResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileInfoRsp: ^DSComm::_DS_FileInfoResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileRename
	VAR_INPUT
		pDpneOld 	: ^CHAR;
		pDpneNew 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileRename(pThis:=this, pDpneOld, pDpneNew);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileRenameResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileRenameRsp: ^DSComm::_DS_FileRenameResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileSetAttribute
	VAR_INPUT
		pDpne 	: ^CHAR;
		AttributeToSet 	: UDINT;
		AttributeToReset 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileSetAttribute(pThis:=this, pDpne, AttributeToSet, AttributeToReset);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileSetAttributeResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileSetAttributeRsp: ^DSComm::_DS_FileSetAttributeResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetDriveList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetDriveList(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetDriveListResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pGetDriveListRsp: ^DSComm::_DS_GetDriveListResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::FileMove
	VAR_INPUT
		pDpneSrc 	: ^CHAR;
		pDpneDest 	: ^CHAR;
		updateProgress 	: BOOL;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.FileMove(pThis:=this, pDpneSrc, pDpneDest, updateProgress);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::FileMoveResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pFileMoveRsp:^DSComm::_DS_FileMoveResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalAdd
	VAR_INPUT
		num 	: UDINT;
		pEventjournalAdd 	: ^DSComm::_DS_EventjournalAddCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalAdd(pThis:=this, num, pEventjournalAdd);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalAddResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pEventjournalAddRsp: ^DSComm::_DS_EventjournalAddResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalGet
	VAR_INPUT
		num 	: UDINT;
		pJournalId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalGet(pThis:=this, num, pJournalId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalGetResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pEventjournalGetRsp: ^DSComm::_DS_EventjournalGetResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalGetAll
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalGetAll(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalGetAllResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		LastPacket 	: BOOL;
		pEventjournalGetAllRsp 	: ^DSComm::_DS_EventjournalGetResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalDel
	VAR_INPUT
		num 	: UDINT;
		pJournalId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalDel(pThis:=this, num, pJournalId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalDelResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pEventjournalDelRsp: ^DSComm::_DS_EventjournalDelResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalDelAll
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalDelAll(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalDelAllResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pEventjournalDelAllRsp 	: ^DSComm::_DS_EventjournalDelAllResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalUpdatePush
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pEventjournalUpd 	: ^DSComm::_DS_EventjournalGetResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalQuitAlarm
	VAR_INPUT
		num 	: UDINT;
		pAlarmId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalQuitAlarm(pThis:=this, num, pAlarmId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalQuitAlarmResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pEventjournalQuitAlarmRsp: ^DSComm::_DS_EventjournalQuitAlarmResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::EventjournalQuitAll
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.EventjournalQuitAll(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::EventjournalQuitAllResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pEventjournalQuitAllRsp: ^DSComm::_DS_EventjournalQuitAllResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::ResetDataservice
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.ResetDataservice(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::ResetDataserviceResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pResetDataserviceRsp : ^DSComm::_DS_ResetDataserviceResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RestartDataservice
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RestartDataservice(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RestartDataserviceResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    pRestartDataserviceRsp : ^DSComm::_DS_RestartDataserviceResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetStationStatus
	VAR_INPUT
		num 	: UDINT;
		pStationNo 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetStationStatus(pThis:=this, num, pStationNo);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetStationStatusResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pStationStatusRsp: ^DSComm::_DS_StationStatusResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetVarIdFromCRC
	VAR_INPUT
		num 	: UDINT;
		pCRC 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetVarIdFromCRC(pThis:=this, num, pCRC);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetVarIdFromCRCResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetVarIdFromCRCRsp: ^DSComm::_DS_GetVarIdFromCRCResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetCRCfromVarId
	VAR_INPUT
		num 	: UDINT;
		pVarId 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetCRCfromVarId(pThis:=this, num, pVarId);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetCRCfromVarIdResp
VAR_INPUT
    MessageID   : DINT;
    ErrorNo     : DINT;
    num         : UDINT;
    pGetCRCfromVarIdRsp: ^DSComm::_DS_GetCRCfromVarIdResp;
END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::IsConnected
	VAR_OUTPUT
		OutParam 	: BOOL;
	END_VAR

  OutParam := DSComm.IsConnected();
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLoginInfo
	VAR_OUTPUT
		userID 	: UDINT;
	END_VAR

  userID := DSComm.GetLoginInfo();
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::ProgressStatusPush
	VAR_INPUT
		pProgressStatus 	: ^DSComm::_DS_ProgressStatus;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetStationListResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pGetStationListRsp 	: ^DSComm::_DS_StationListResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetStationList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetStationList(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SendToAllPush
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pData 	: ^CHAR;
		Length 	: UDINT;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SendUserEvent
	VAR_INPUT
		MajorID 	: UINT;
		MinorID 	: UINT;
		SessionID 	: UINT;
		pDataSrc 	: pVoid;
		DataLen 	: UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SendUserEvent(pThis:=this, MajorID, MinorID, SessionID, pDataSrc, DataLen);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SendUserEventResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pUserEventRsp 	: ^DSComm::_DS_UserEventResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SubscribeEventjournalUpdates

  DSComm.SubscribeEventjournalUpdates(pThis:=this);

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UnsubscribeEventjournalUpdates

  DSComm.UnsubscribeEventjournalUpdates();

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SubscribeUserEvents
	VAR_INPUT
		MajorID 	: UINT;
		MinorID 	: UINT;
	END_VAR
	VAR_OUTPUT
		ErrorNo 	: DINT;
	END_VAR

  ErrorNo := DSComm.SubscribeUserEvents(MajorID, MinorID, this);

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UnsubscribeUserEvents
	VAR_INPUT
		MajorID 	: UINT;
		MinorID 	: UINT;
	END_VAR
	VAR_OUTPUT
		ErrorNo 	: DINT;
	END_VAR

  ErrorNo := DSComm.UnsubscribeUserEvents(MajorID, MinorID, this);

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SetParameter
	VAR_INPUT
		ParaNo 	: DSComm::_DS_Parameter;
		Value 	: DINT;
		Mode 	: DINT;
	END_VAR
	VAR_OUTPUT
		Retcode 	: DINT;
	END_VAR

  Retcode := DSComm.SetParameter(ParaNo, Value, Mode);

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetParameter
	VAR_INPUT
		ParaNo 	: DSComm::_DS_Parameter;
		pValue 	: ^DINT;
		Mode 	: DINT;
	END_VAR
	VAR_OUTPUT
		Retcode 	: DINT;
	END_VAR

  Retcode := DSComm.GetParameter(ParaNo, pValue, Mode);

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::StartTCPComm

  DSComm.StartTCPComm();

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UserEventReceive
	VAR_INPUT
		MajorID 	: UINT;
		MinorID 	: UINT;
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pData 	: pVoid;
		Length 	: UDINT;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DSComm_Interface::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

	state := READY;

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AddLocalClientResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pAddLocalClientRsp 	: ^DSComm::_DS_AddLocalClientResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AddLocalClientRangeResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pAddLocalClientRangeRsp 	: ^DSComm::_DS_AddLocalClientRangeResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RemoveThisLocalClientResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pRemoveThisLocalClientRsp 	: ^DSComm::_DS_RemoveThisLocalClientResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RemoveLocalClientResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pRemoveLocalClientRsp 	: ^DSComm::_DS_RemoveLocalClientResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::RemoveLocalClientRangeResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pRemoveLocalClientRangeRsp 	: ^DSComm::_DS_RemoveLocalClientRangeResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::ClearLocalClientListResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pClearLocalClientListRsp 	: ^DSComm::_DS_ClearLocalClientListResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetCurrentIDResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pGetCurrentIDRsp 	: ^DSComm::_DS_GetCurrentIDResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetLocalClientListResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pGetLocalClientListRsp 	: ^DSComm::_DS_GetLocalClientListResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetLocalClientListDetailsResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pGetLocalClientListDetailsRsp 	: ^DSComm::_DS_GetLocalClientDetailsResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::GetLocalClientByIDResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pGetLocalClientByIDRsp 	: ^DSComm::_DS_GetLocalClientDetailsResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetProjectInfo
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetProjectInfo(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::AddLocalClient
	VAR_INPUT
		pLocalClient 	: ^DSComm::_DS_AddLocalClientCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.AddLocalClient(pThis:=this, pLocalClient);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::AddLocalClientRange
	VAR_INPUT
		pLocalClientRange 	: ^DSComm::_DS_AddLocalClientRangeCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.AddLocalClientRange(pThis:=this, pLocalClientRange);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetCurrentID
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetCurrentID(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RemoveThisLocalClient
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RemoveThisLocalClient(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RemoveLocalClient
	VAR_INPUT
		pLocalClient 	: ^DSComm::_DS_RemoveLocalClientCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RemoveLocalClient(pThis:=this, pLocalClient);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::RemoveLocalClientRange
	VAR_INPUT
		pLocalClientRange 	: ^DSComm::_DS_RemoveLocalClientRangeCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.RemoveLocalClientRange(pThis:=this, pLocalClientRange);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::ClearLocalClientList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.ClearLocalClientList(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLocalClientList
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetLocalClientList(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLocalClientListDetails
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetLocalClientListDetails(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::GetLocalClientByID
	VAR_INPUT
		pLocalClient 	: ^DSComm::_DS_GetLocalClientByIDCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.GetLocalClientByID(pThis:=this, pLocalClient);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SubscribeAlarmListUpdate
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SubscribeAlarmListUpdate(pThis:=this);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UnsubscribeAlarmListUpdate
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UnsubscribeAlarmListUpdate(pThis:=this);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SubscribeAlarmListUpdateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pAlarmListUpdateAddRsp 	: ^DSComm::_DS_AlarmListUpdateAddResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UnsubscribeAlarmListUpdateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pAlarmListUpdateSubRsp 	: ^DSComm::_DS_AlarmListUpdateSubResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AlarmListUpdatePush
	VAR_INPUT
		ErrorNo 	: DINT;
		num 	: UDINT;
		pAlarmListUpd 	: ^DSComm::_DS_AlarmListUpdate;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SubscribeHotAlarmUpdate
	VAR_INPUT
		pHotAlarm 	: ^DSComm::_DS_HotAlarmAddCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SubscribeHotAlarmUpdate(pThis:=this, pHotAlarm);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UnsubscribeHotAlarmUpdate
	VAR_INPUT
		pHotAlarm 	: ^DSComm::_DS_HotAlarmSubCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UnsubscribeHotAlarmUpdate(pThis:=this, pHotAlarm);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SubscribeHotAlarmUpdateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pHotAlarmUpdateAddRsp 	: ^DSComm::_DS_HotAlarmAddResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UnsubscribeHotAlarmUpdateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pHotAlarmUpdateSubRsp 	: ^DSComm::_DS_HotAlarmSubResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::HotAlarmUpdatePush
	VAR_INPUT
		ErrorNo 	: DINT;
		num 	: UDINT;
		pHotAlarmUpd 	: ^DSComm::_DS_HotAlarmUpdate;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::AlarmDelete
	VAR_INPUT
		num 	: UDINT;
		toDelState 	: USINT;
		pAlarmID 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.AlarmDelete(pThis:=this, num, toDelState, pAlarmID);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::AlarmDeleteAll
	VAR_INPUT
		toDelState 	: USINT;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.AlarmDeleteAll(pThis:=this, toDelState);
END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AlarmDeleteResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		num 	: UDINT;
		pAlarmDeleteRsp 	: ^DSComm::_DS_AlarmDeleteResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AlarmDeleteAllResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pAlarmDeleteAllRsp 	: ^DSComm::_DS_AlarmDeleteAllResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::AlarmDeleteUpdatePush
	VAR_INPUT
		ErrorNo 	: DINT;
		num 	: UDINT;
		pAlarmDeleteUpd 	: ^DSComm::_DS_AlarmDeleteUpdate;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION

FUNCTION GLOBAL DSComm_Interface::StrLenUtf8
	VAR_INPUT
		Str_Utf8 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := DSComm.StrLenUtf8(Str_Utf8);

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::SubscribeStateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pSubscribeStateRsp 	: ^DSComm::_DS_SubscribeStateResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UnsubscribeStateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pUnsubscribeStateRsp 	: ^DSComm::_DS_UnsubscribeStateResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::Get_StateResp
	VAR_INPUT
		MessageID 	: DINT;
		ErrorNo 	: DINT;
		pGetStateRsp 	: ^DSComm::_DS_GetStateResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL DSComm_Interface::UpdateStatePush
	VAR_INPUT
		pUpdateState 	: ^DSComm::_DS_GetStateResp;
	END_VAR
#pragma warning(default: 73)

END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::SubscribeState
	VAR_INPUT
		pCmdData 	: ^DSComm::_DS_SubscribeStateCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.SubscribeState(pThis:=this, pCmdData);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::UnsubscribeState
	VAR_INPUT
		pCmdData 	: ^DSComm::_DS_UnsubscribeStateCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.UnsubscribeState(pThis:=this, pCmdData);
END_FUNCTION


FUNCTION GLOBAL DSComm_Interface::Get_State
	VAR_INPUT
		pCmdData 	: ^DSComm::_DS_GetStateCmd;
	END_VAR
	VAR_OUTPUT
		MessageID 	: DINT;
	END_VAR

  MessageID := DSComm.Get_State(pThis:=this, pCmdData);
END_FUNCTION
