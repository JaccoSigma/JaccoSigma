//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "SCP011_111"
	Revision           = "1.1"
	GUID               = "{E4C8EEBC-B06F-4F27-84BD-1C8F03174338}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "200 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\scp.ico"
	SharedCommandTable = "true"
	Objectsize         = "(690,120)"
	Comment            = "Class to handle the SDIAS safety module SCP011 or SCP111">
	<Channels>
		<Server Name="ApplCRC" GUID="{ECACFC96-BDCC-442A-A63A-897F9C5EB57F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the CRC of the safety logic (see CRC Dialog in the SafetyDesigner)"/>
		<Server Name="CanOut" GUID="{0565257C-C7DB-440E-B190-476B8C8CABA9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassState" GUID="{8D5BE997-E420-4C63-8823-B97F8A5CE07D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the current Status of the Hardware Class."/>
		<Server Name="DesignerPrjConfigCRC" GUID="{2B7A725D-843D-41FB-BD43-DCAD442C4FE4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the CRC of the whole SafetyDesigner project configuration (see CRC Dialog in the SafetyDesigner)"/>
		<Server Name="DesignerPrjName" GUID="{2A25EDB5-7AEB-454E-8625-310BE111A715}" Class="String" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="DesignerPrjName"/>
		<Server Name="DesignerPrjRev" GUID="{08B25EA2-CDDA-493D-B529-58E0243F09CA}" Class="String" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="DesignerPrjRev"/>
		<Server Name="DeviceID" GUID="{B77E3258-874C-421B-BB87-C878D86704E8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the DeviceID of the Hardware Module."/>
		<Server Name="ErrorState" GUID="{D3CC650A-4C59-463E-B37B-C6FD69D72187}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="0: no error&#13;&#10;1: error&#13;&#10;2: communication timeout on input data from other safety modules"/>
		<Server Name="FastUnsafeInputs" GUID="{89F68665-5C1B-496F-A690-F2262A2AD5F3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="FastUnsafeInputs"/>
		<Server Name="FastUnsafeOutputs" GUID="{4CCC642E-4D45-4DB3-BB4E-8567880865EA}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="FastUnsafeOutputs"/>
		<Server Name="FirmwareVersion" GUID="{29E88D8B-1727-47B9-B631-21738580B94D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Firmware version&#13;&#10;&#13;&#10;Format:&#13;&#10;16#XXXXYYYY&#13;&#10;&#13;&#10;XXXX = Major Revision&#13;&#10;YYYY = Minor Revision"/>
		<Server Name="FPGAVersion" GUID="{20D78A73-3222-4F8A-B582-D305E87519F4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Server shows the actual FPGA Version of the Module in the format x.y&#13;&#10;&#13;&#10;e.g. 16#10 means v1.0"/>
		<Server Name="GetDiagConnect" GUID="{A375AF1B-66D8-48F2-8C9F-D3F932E02286}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="HWCRC" GUID="{5AAED14E-B5E9-4F8E-976C-C70B8CE93CEF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the CRC of the hardware configuration (see CRC Dialog in the SafetyDesigner)"/>
		<Server Name="QuitComError" GUID="{91158AA2-EA2E-411C-9AE1-D3E522992F61}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Write to this server to quit communication errors (indicated if Server ErrorState = 2)&#13;&#10;This server can also quit general errors (Server ErrorState = 1) if the safety.dlm is used.&#13;&#10;&#13;&#10;To detect the used quit method, read the server directly after writing. In both cases the error quitting is done asynchronously (= not immediately).&#13;&#10;&#13;&#10;Server shows actual quit-state&#13;&#10;  2..busy with quitting general errors (safety dll version 6 or higher required)&#13;&#10;  1..busy with quitting communication error&#13;&#10;  0..ready&#13;&#10; -1..error at creating a new safety state&#13;&#10; -2..failed to disable user prompt for quit error&#13;&#10; -3..failed to select module via safety number&#13;&#10; -4..error at establishing connection to module (safety designer must not be online at the same time!)&#13;&#10; -5..failed to send the quit error command to the module&#13;&#10; -6..failed to delete the created safety state"/>
		<Server Name="RetryCounter" GUID="{D835B7EF-A588-4CB5-A28F-D25E867876A4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of Retries on SDIAS-Bus."/>
		<Server Name="RunState" GUID="{498F38F8-2777-44A9-BC5A-416C69CDF26E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="0: not running&#13;&#10;1: running in operational or temporary operational mode"/>
		<Server Name="SafetyNumber" GUID="{F7678895-D7D4-4E0F-8606-6E2DC36BC257}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the unique safety number of this module"/>
		<Server Name="SafetyRetryCounter" GUID="{8D6F4BD4-9586-4D59-9CAE-67C380158141}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows the amount of all retries on the safety bus."/>
		<Server Name="SafetyState" GUID="{2208AC8D-02BD-4343-AD5B-5FA287044DAF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Shows state of safety module&#13;&#10;&#13;&#10;_ModuleNotFound:&#13;&#10; - Module has not been found at the given position&#13;&#10;&#13;&#10;_WaitForSynchronicity:&#13;&#10; - Waiting to get synchrony with interacting modules&#13;&#10;&#13;&#10;_SafetyClassOK:&#13;&#10; - Module has been found and no errors reported&#13;&#10;&#13;&#10;_MemAllocFailed: &#13;&#10; - Failed to allocate or reallocate some memory for the module&#13;&#10;&#13;&#10;_ReadFWVerFailed:&#13;&#10; - Failed to read firmware version of module&#13;&#10;&#13;&#10;_ReinitConfig:&#13;&#10; - Only for CPU: Config of CPU has changed and update is in progress&#13;&#10;&#13;&#10;_ModFromCfgNotFound (Only for CPU):&#13;&#10; - Module in configuration, which is not physically available and HW-Class is placed&#13;&#10; - Module in configuration, which is not physically available and no HW-Class is placed&#13;&#10; - Module in configuration, which is not a CDIAS module (according to it&apos;s HW-Path)&#13;&#10;&#13;&#10;_UnsafeVarNotFound (Only for CPU):&#13;&#10; - Couldn&apos;t find an unsafe variable in the project. Compare spelling in Designer and in project.&#13;&#10;&#13;&#10;_UnknownCfgError (Only for CPU):&#13;&#10; - Error in reading config or creating routing tables occured.&#13;&#10;&#13;&#10;_AsyncComError: &#13;&#10; - Too many consecutive asynchronous commands failed! Please contact Sigmatek Support! &#13;&#10; &#13;&#10;_DOsIncreasedRestartApp: &#13;&#10; - Number or size of module accesses increased with new safety project! &#13;&#10; - =&gt; Can&apos;t continue, because the new data is not covered by the actual accesses! Restart Application! &#13;&#10; &#13;&#10;_LostPowerSupply: &#13;&#10; - The power supply of the safe CPU has been lost. &#13;&#10; &#13;&#10;_WrongSafetyHW: &#13;&#10; - The Safety objects in the project do not match the physical modules. &#13;&#10; - For every physical module a safety object must be placed in the project!"/>
		<Server Name="SdiasSafetyOut" GUID="{1A2FC742-E8CD-4712-AF00-E4AA78212B97}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SerialNo" GUID="{22C5004F-3EA6-4045-82E9-14000D702937}" Class="String" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Serial number of the Hardware Module."/>
		<Server Name="ServiceMode" GUID="{BC74B755-D3F7-4482-B114-D52B34FF980A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="0: operational mode&#13;&#10;1: service mode or temporary operational mode&#13;&#10;2: check configuration phase"/>
		<Server Name="ValidationButtonState" GUID="{983567D2-300E-46F4-8D52-5159749196DB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="ValidationButtonState"/>
		<Client Name="ModuleSelect" Required="true" Internal="false" Comment="Select the module used at this place&#13;&#10;0 = SCP011&#13;&#10;1 = SCP111"/>
		<Client Name="Place" Required="false" Internal="false" Comment="Place of SDIAS Modul [0..63]."/>
		<Client Name="PrjNameStr" Required="true" Internal="true"/>
		<Client Name="PrjRevStr" Required="true" Internal="true"/>
		<Client Name="Required" Required="true" Internal="false" Comment="0 = module is not required&#13;&#10;1 = module is required (CPU will crash if module is missing)"/>
		<Client Name="SCP011" Required="true" Internal="true"/>
		<Client Name="SCP011_111_Switch1" Required="true" Internal="true"/>
		<Client Name="SCP111" Required="true" Internal="true"/>
		<Client Name="SdiasIn" Required="true" Internal="false" Comment="This Clients must be connected to a SDIAS_Out_[x] Server."/>
		<Client Name="SerialNoStr" Required="true" Internal="true"/>
		<Client Name="ServerUpdateTime" Required="false" Internal="false" Comment="Time in ms, how long the Servers (unsafe variables in Safety Designer) should take to update.&#13;&#10;This Client is automatically updated, if the given time is too short to handle with the current amount of servers."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="RamAnd"/>
		<Dokumentation Revision="1.1" Date="06.07.2021" Author="RamAnd" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="SCP011_111">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "PrjNameStr"
				GUID       = "{484049E3-CAFC-4471-8692-D87E84660FC9}"
				Class      = "String"
				Position   = "(1890,1140)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "PrjRevStr"
				GUID       = "{9CECB8F4-9623-472B-BE04-21702A1AB0B3}"
				Class      = "String"
				Position   = "(1890,1290)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "SCP011"
				GUID       = "{7378FF3C-DBB1-4AD9-A1C3-6DD1015C8FAE}"
				Class      = "SCP011"
				Position   = "(960,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ApplCRC"/>
					<Server Name="CanOut"/>
					<Server Name="ClassState"/>
					<Server Name="DesignerPrjConfigCRC"/>
					<Server Name="DesignerPrjName"/>
					<Server Name="DesignerPrjRev"/>
					<Server Name="DeviceID"/>
					<Server Name="ErrorState"/>
					<Server Name="FastUnsafeInputs"/>
					<Server Name="FastUnsafeOutputs"/>
					<Server Name="FirmwareVersion"/>
					<Server Name="FPGAVersion"/>
					<Server Name="GetDiagConnect"/>
					<Server Name="HwCRC"/>
					<Server Name="HwVersion"/>
					<Server Name="QuitComError"/>
					<Server Name="RetryCounter"/>
					<Server Name="RunState"/>
					<Server Name="SafetyNumber"/>
					<Server Name="SafetyRetryCounter"/>
					<Server Name="SafetyState"/>
					<Server Name="SdiasSafetyOut"/>
					<Server Name="SerialNo"/>
					<Server Name="ServiceMode"/>
					<Server Name="ValidationButtonState"/>
					<Client Name="Place"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ServerUpdateTime" Value="50"/>
					<Parameter KeyName="PdoReadSize" Value="28"/>
					<Parameter KeyName="PdoWriteNo" Value="0"/>
					<Parameter KeyName="PdoWriteSize" Value="28"/>
				</Channels>
				<AdditionalData>
					<Entry Name="DeviceType" Value="SCP011"/>
				</AdditionalData>
			</Object>
			<Object
				Name       = "SCP011_111_Switch1"
				GUID       = "{8569B5D2-18F7-4176-8770-7D2CA626638E}"
				Class      = "_SCP011_111_Switch"
				Position   = "(300,630)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="SCP011_Place"/>
					<Server Name="SCP111_Place"/>
					<Client Name="ModuleSelect"/>
					<Client Name="Place"/>
				</Channels>
			</Object>
			<Object
				Name       = "SCP111"
				GUID       = "{4C646991-BE4A-44D8-B4C3-3A421C58AFDC}"
				Class      = "SCP111"
				Position   = "(960,1710)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ApplCRC"/>
					<Server Name="CanOut"/>
					<Server Name="ClassState"/>
					<Server Name="DesignerPrjConfigCRC"/>
					<Server Name="DesignerPrjName"/>
					<Server Name="DesignerPrjRev"/>
					<Server Name="DeviceID"/>
					<Server Name="ErrorState"/>
					<Server Name="FastUnsafeInputs"/>
					<Server Name="FastUnsafeOutputs"/>
					<Server Name="FCN_Command"/>
					<Server Name="FCN_HostSafetyNumber"/>
					<Server Name="FCN_StateMachine"/>
					<Server Name="FirmwareVersion"/>
					<Server Name="FPGAVersion"/>
					<Server Name="GetDiagConnect"/>
					<Server Name="HGWOut"/>
					<Server Name="HwCRC"/>
					<Server Name="QuitComError"/>
					<Server Name="RetryCounter"/>
					<Server Name="RunState"/>
					<Server Name="SafetyNumber"/>
					<Server Name="SafetyRetryCounter"/>
					<Server Name="SafetyState"/>
					<Server Name="SdiasSafetyOut"/>
					<Server Name="SerialNo"/>
					<Server Name="ServiceMode"/>
					<Server Name="ValidationButtonState"/>
					<Client Name="Place"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ServerUpdateTime" Value="50"/>
					<Parameter KeyName="PdoReadSize" Value="6"/>
					<Parameter KeyName="PdoWriteSize" Value="6"/>
				</Channels>
				<AdditionalData>
					<Entry Name="DeviceType" Value="SCP111"/>
				</AdditionalData>
			</Object>
			<Object
				Name       = "SerialNoStr"
				GUID       = "{90C5BBF3-B1AE-4D57-830A-3FD45BD4E163}"
				Class      = "String"
				Position   = "(1920,420)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.SCP011" Destination="SCP011.ClassState"/>
			<Connection Source="this.SCP111" Destination="SCP111.ClassState"/>
			<Connection Source="this.SCP011_111_Switch1" Destination="SCP011_111_Switch1.ClassSvr"/>
			<Connection Source="SCP011.SdiasIn" Destination="this.SdiasIn" Vertices="(960,210),(38,210),"/>
			<Connection Source="SCP011.Place" Destination="SCP011_111_Switch1.SCP011_Place" Vertices="(960,270),(900,270),(900,780),(790,780),"/>
			<Connection Source="SCP011.Required" Destination="this.Required" Vertices="(960,330),(38,330),"/>
			<Connection Source="SCP011.ServerUpdateTime" Destination="this.ServerUpdateTime" Vertices="(960,390),(38,390),"/>
			<Connection Source="SCP111.SdiasIn" Destination="this.SdiasIn" Vertices="(960,1800),(38,210),"/>
			<Connection Source="SCP111.Place" Destination="SCP011_111_Switch1.SCP111_Place" Vertices="(960,1860),(900,1860),(900,840),(790,840),"/>
			<Connection Source="SCP111.Required" Destination="this.Required" Vertices="(960,1920),(38,330),"/>
			<Connection Source="SCP111.ServerUpdateTime" Destination="this.ServerUpdateTime" Vertices="(960,1980),(38,390),"/>
			<Connection Source="SCP011_111_Switch1.ModuleSelect" Destination="this.ModuleSelect" Vertices="(300,780),(38,450),"/>
			<Connection Source="SCP011_111_Switch1.Place" Destination="this.Place" Vertices="(300,720),(38,270),"/>
			<Connection Source="this.PrjRevStr" Destination="PrjRevStr.Data"/>
			<Connection Source="this.PrjNameStr" Destination="PrjNameStr.Data"/>
			<Connection Source="this.DesignerPrjName" Destination="PrjNameStr.Data" Vertices="(2528,1110),(2326,1230),"/>
			<Connection Source="this.DesignerPrjRev" Destination="PrjRevStr.Data" Vertices="(2528,1170),(2326,1380),"/>
			<Connection Source="this.SerialNoStr" Destination="SerialNoStr.Data"/>
			<Connection Source="this.SerialNo" Destination="SerialNoStr.Data" Vertices="(2528,390),(2356,510),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
SCP011_111 : CLASS
  //Servers:
	ClassState 	: SvrChCmd_t_e_VaranErrors;
	DeviceID 	: SvrCh_UDINT;
	FPGAVersion 	: SvrCh_HDINT;
	SerialNo 	: SvrChCmd_UDINT;
	RetryCounter 	: SvrCh_UDINT;
	SafetyState 	: SvrCh_SafetyConfigStateType;
	RunState 	: SvrCh_DINT;
	ServiceMode 	: SvrCh_DINT;
	ErrorState 	: SvrCh_DINT;
	QuitComError 	: SvrCh_DINT;
	FirmwareVersion 	: SvrCh_HDINT;
	SafetyNumber 	: SvrCh_HDINT;
	DesignerPrjConfigCRC 	: SvrCh_HDINT;
	ApplCRC 	: SvrCh_HDINT;
	HWCRC 	: SvrCh_HDINT;
	DesignerPrjName 	: SvrChCmd_UDINT;
	DesignerPrjRev 	: SvrChCmd_UDINT;
	ValidationButtonState 	: SvrCh_DINT;
	FastUnsafeInputs 	: SvrCh_BDINT;
	FastUnsafeOutputs 	: SvrCh_BDINT;
	SdiasSafetyOut 	: SvrChCmd_DINT;
	CanOut 	: SvrChCmd_DINT;
	SafetyRetryCounter 	: SvrCh_DINT;
	GetDiagConnect 	: SvrChCmd_DINT;
  //Clients:
	SCP011_111_Switch1 	: CltChCmd__SCP011_111_Switch;
	SdiasIn 	: CltChCmd_DINT;
	Place 	: CltCh_UDINT;
	Required 	: CltCh_DINT;
	ServerUpdateTime 	: CltCh_UDINT;
	ModuleSelect 	: CltCh_DINT;
	SerialNoStr 	: CltChCmd_String;
	PrjNameStr 	: CltChCmd_String;
	PrjRevStr 	: CltChCmd_String;
	SCP011 	: CltChCmd_SCP011;
	SCP111 	: CltChCmd_SCP111;
  //Variables:
		udLastUpdateTime 	: UDINT;
  //Functions:
	
	FUNCTION SCP011_111
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION UpdateServers;
	
	FUNCTION GLOBAL FetchDiagState;
	
	FUNCTION GLOBAL GetDiagState
		VAR_INPUT
			pDiagState 	: ^SafetyDiagState;
		END_VAR
		VAR_OUTPUT
			StateReady 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL FetchDiagInfo
		VAR_INPUT
			ucChoice 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetDiagInfo
		VAR_INPUT
			pDiagInfo 	: ^SafetyDiagInfo;
		END_VAR
		VAR_OUTPUT
			StateReady 	: BOOL;
		END_VAR;
				//! <Function Name="ClassState.NewInst" UseBaseCmd="true"/>
	FUNCTION VIRTUAL GLOBAL ClassState::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QuitComError::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QuitComError::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FastUnsafeInputs::Read
		VAR_OUTPUT
			output (EAX) 	: BDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FastUnsafeInputs::Write
		VAR_INPUT
			input (EAX) 	: BDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: BDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FastUnsafeOutputs::Read
		VAR_OUTPUT
			output (EAX) 	: BDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL FastUnsafeOutputs::Write
		VAR_INPUT
			input (EAX) 	: BDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: BDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SdiasSafetyOut::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CanOut::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetDiagConnect::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _SCP011_111_Switch
#pragma using SCP011
#pragma using SCP111
#pragma using String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SCP011_111::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_SCP011_111
1$UINT, 1$UINT, (SIZEOF(::SCP011_111))$UINT, 
24$UINT, 11$UINT, 0$UINT, 
TO_UDINT(3654348430), "SCP011_111", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SCP011_111.ClassState.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1096059024), "ClassState", 
(::SCP011_111.DeviceID.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4261957967), "DeviceID", 
(::SCP011_111.FPGAVersion.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2929703442), "FPGAVersion", 
(::SCP011_111.SerialNo.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1856804640), "SerialNo", 
(::SCP011_111.RetryCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3383993698), "RetryCounter", 
(::SCP011_111.SafetyState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1504224158), "SafetyState", 
(::SCP011_111.RunState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2759549320), "RunState", 
(::SCP011_111.ServiceMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1978843086), "ServiceMode", 
(::SCP011_111.ErrorState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2975757027), "ErrorState", 
(::SCP011_111.QuitComError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1389350282), "QuitComError", 
(::SCP011_111.FirmwareVersion.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(389440282), "FirmwareVersion", 
(::SCP011_111.SafetyNumber.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2430374202), "SafetyNumber", 
(::SCP011_111.DesignerPrjConfigCRC.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(349909197), "DesignerPrjConfigCRC", 
(::SCP011_111.ApplCRC.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2412485999), "ApplCRC", 
(::SCP011_111.HWCRC.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3992965099), "HWCRC", 
(::SCP011_111.DesignerPrjName.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2397083450), "DesignerPrjName", 
(::SCP011_111.DesignerPrjRev.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2854741250), "DesignerPrjRev", 
(::SCP011_111.ValidationButtonState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2335086012), "ValidationButtonState", 
(::SCP011_111.FastUnsafeInputs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1891345754), "FastUnsafeInputs", 
(::SCP011_111.FastUnsafeOutputs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(766673388), "FastUnsafeOutputs", 
(::SCP011_111.SdiasSafetyOut.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1660330439), "SdiasSafetyOut", 
(::SCP011_111.CanOut.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(4133122455), "CanOut", 
(::SCP011_111.SafetyRetryCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1159647258), "SafetyRetryCounter", 
(::SCP011_111.GetDiagConnect.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1383671281), "GetDiagConnect", 
//Clients:
(::SCP011_111.SCP011_111_Switch1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1665788576), "SCP011_111_Switch1", TO_UDINT(2353643498), "_SCP011_111_Switch", 1$UINT, 0$UINT, 
(::SCP011_111.SdiasIn.pCh)$UINT, _CH_CLT_CMD$UINT, 2#0000000000000110$UINT, TO_UDINT(3019270524), "SdiasIn", 
(::SCP011_111.Place.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(2202636669), "Place", 
(::SCP011_111.Required.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(648558917), "Required", 
(::SCP011_111.ServerUpdateTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(247674937), "ServerUpdateTime", 
(::SCP011_111.ModuleSelect.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(1576288034), "ModuleSelect", 
(::SCP011_111.SerialNoStr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(321148131), "SerialNoStr", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::SCP011_111.PrjNameStr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1471578768), "PrjNameStr", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::SCP011_111.PrjRevStr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1767415182), "PrjRevStr", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::SCP011_111.SCP011.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1550718169), "SCP011", TO_UDINT(1550718169), "SCP011", 1$UINT, 55$UINT, 
(::SCP011_111.SCP111.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1571585774), "SCP111", TO_UDINT(1571585774), "SCP111", 1$UINT, 39$UINT, 
END_FUNCTION


#define USER_CNT_SCP011_111 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SCP011_111] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION SCP011_111::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_SCP011_111, pCmd := #vmt.CmdTable);
	vmt.CmdTable.NewInstr		:= #NewInst();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SerialNo.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #SerialNo::M_WR_DIRECT();
	SerialNo.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SerialNo.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QuitComError.pMeth			:= StoreMethod( #QuitComError::Read(), #QuitComError::Write() );
	IF QuitComError.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, DesignerPrjName.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #DesignerPrjName::M_WR_DIRECT();
	DesignerPrjName.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF DesignerPrjName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, DesignerPrjRev.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #DesignerPrjRev::M_WR_DIRECT();
	DesignerPrjRev.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF DesignerPrjRev.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FastUnsafeInputs.pMeth			:= StoreMethod( #FastUnsafeInputs::Read(), #FastUnsafeInputs::Write() );
	IF FastUnsafeInputs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FastUnsafeOutputs.pMeth			:= StoreMethod( #FastUnsafeOutputs::Read(), #FastUnsafeOutputs::Write() );
	IF FastUnsafeOutputs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, SdiasSafetyOut.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.NewInstr		:= #SdiasSafetyOut::NewInst();
	SdiasSafetyOut.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasSafetyOut.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, CanOut.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.NewInstr		:= #CanOut::NewInst();
	CanOut.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF CanOut.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, GetDiagConnect.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.NewInstr		:= #GetDiagConnect::NewInst();
	GetDiagConnect.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF GetDiagConnect.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= SCP011_111();

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL SCP011_111::SdiasSafetyOut::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^Results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR

  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    ret_code := SCP011.SdiasSafetyManager1.SdiasSafetyOut.NewInst(pPara, pResult);
  elsif ModuleSelect = 1 then
    ret_code := SCP111.SdiasSafetyManagerFSoE1.SdiasSafetyOut.NewInst(pPara, pResult);
  else
    // invalid module selection
    ret_code := ERROR;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  if (ClassState = _ClassOk) & ((ops.tAbsolute - udLastUpdateTime) > 1000) then
    UpdateServers();
  else
    UpdateServers();
  end_if;

	state := READY;

END_FUNCTION


FUNCTION SCP011_111::UpdateServers
  VAR
  	StrLen : UDINT;
    TmpStr : ARRAY [0..199] OF CHAR;
  END_VAR

  if ModuleSelect = 0 then
    // show the SCP011 server values
    ClassState            := SCP011.ClassState;
    DeviceID              := SCP011.DeviceID;
    FPGAVersion           := SCP011.FPGAVersion;

    StrLen                := SCP011.SerialNoStr.StrLen();
    SCP011.SerialNoStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    SerialNoStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);
    
    RetryCounter          := SCP011.RetryCounter;
    SafetyState           := SCP011.SdiasSafetyManager1.SafetyState;
    RunState              := SCP011.RunState;
    ServiceMode           := SCP011.ServiceMode;
    ErrorState            := SCP011.ErrorState;
    QuitComError          := SCP011.SdiasSafetyManager1.QuitComError;
    FirmwareVersion       := SCP011.SdiasSafetyManager1.FirmwareVersion;
    SafetyNumber          := SCP011.SdiasSafetyManager1.SafetyNumber;
    DesignerPrjConfigCRC  := SCP011.SdiasSafetyManager1.DesignerPrjConfigCRC;
    ApplCRC               := SCP011.SdiasSafetyManager1.ApplCRC;
    HWCRC                 := SCP011.SdiasSafetyManager1.HwCRC;
    
    StrLen                := SCP011.SdiasSafetyManager1.ProjectNameStr.StrLen();
    SCP011.SdiasSafetyManager1.ProjectNameStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    PrjNameStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);

    StrLen                := SCP011.SdiasSafetyManager1.ProjectRevisionStr.StrLen();
    SCP011.SdiasSafetyManager1.ProjectRevisionStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    PrjRevStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);

    ValidationButtonState := SCP011.ValidationButtonState;
    
    SafetyRetryCounter    := SCP011.SafetyRetryCounter.Read();

  elsif ModuleSelect = 1 then
    // show the SCP111 server values
    ClassState            := SCP111.ClassState;
    DeviceID              := SCP111.DeviceID;
    FPGAVersion           := SCP111.FPGAVersion;

    StrLen                := SCP111.SerialNoStr.StrLen();
    SCP111.SerialNoStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    SerialNoStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);

    RetryCounter          := SCP111.RetryCounter;
    SafetyState           := SCP111.SdiasSafetyManagerFSoE1.SafetyState;
    RunState              := SCP111.RunState;
    ServiceMode           := SCP111.ServiceMode;
    ErrorState            := SCP111.ErrorState;
    QuitComError          := SCP111.SdiasSafetyManagerFSoE1.QuitComError;
    FirmwareVersion       := SCP111.SdiasSafetyManagerFSoE1.FirmwareVersion;
    SafetyNumber          := SCP111.SdiasSafetyManagerFSoE1.SafetyNumber;
    DesignerPrjConfigCRC  := SCP111.SdiasSafetyManagerFSoE1.DesignerPrjConfigCRC;
    ApplCRC               := SCP111.SdiasSafetyManagerFSoE1.ApplCRC;
    HWCRC                 := SCP111.SdiasSafetyManagerFSoE1.HwCRC;

    StrLen                := SCP111.SdiasSafetyManagerFSoE1.ProjectNameStr.StrLen();
    SCP111.SdiasSafetyManagerFSoE1.ProjectNameStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    PrjNameStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);

    StrLen                := SCP111.SdiasSafetyManagerFSoE1.ProjectRevisionStr.StrLen();
    SCP111.SdiasSafetyManagerFSoE1.ProjectRevisionStr.ReadDataOff(udOff:=0, pData:=#TmpStr[0], udMax:=StrLen);
    PrjRevStr.WriteDataOff(udLen:=StrLen, udOff:=0, pData:=#TmpStr[0]);

    ValidationButtonState := SCP111.ValidationButtonState;

    SafetyRetryCounter    := SCP111.SafetyRetryCounter.Read();
  else
    // invalid module selection
  end_if;
  
  udLastUpdateTime := ops.tAbsolute;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::CanOut::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^Results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR

  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    ret_code := SCP011.SdiasSafetyManager1.CanOut.NewInst(pPara, pResult);
  elsif ModuleSelect = 1 then
    ret_code := SCP111.SdiasSafetyManagerFSoE1.CanOut.NewInst(pPara, pResult);
  else
    // invalid module selection
    ret_code := ERROR;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::GetDiagConnect::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^Results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR

  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    ret_code := SCP011.SdiasSafetyManager1.GetDiagConnect.NewInst(pPara, pResult);
  elsif ModuleSelect = 1 then
    ret_code := SCP111.SdiasSafetyManagerFSoE1.GetDiagConnect.NewInst(pPara, pResult);
  else
    // invalid module selection
    ret_code := ERROR;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::FastUnsafeInputs::Read
	VAR_OUTPUT
		output (EAX) 	: BDINT;
	END_VAR

  if ModuleSelect = 0 then
    FastUnsafeInputs := SCP011.SdiasSafetyManager1.FastUnsafeInputs.Read();
  elsif ModuleSelect = 1 then
    FastUnsafeInputs := SCP111.SdiasSafetyManagerFSoE1.FastUnsafeInputs.Read();
  end_if;
  
	output := FastUnsafeInputs;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::FastUnsafeInputs::Write
	VAR_INPUT
		input (EAX) 	: BDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: BDINT;
	END_VAR
  
  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    result := SCP011.SdiasSafetyManager1.FastUnsafeInputs.Write(input);
  elsif ModuleSelect = 1 then
    result := SCP111.SdiasSafetyManagerFSoE1.FastUnsafeInputs.Write(input);
  else
    // invalid module selection
    result := input;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::FastUnsafeOutputs::Read
	VAR_OUTPUT
		output (EAX) 	: BDINT;
	END_VAR

  if ModuleSelect = 0 then
    FastUnsafeOutputs := SCP011.SdiasSafetyManager1.FastUnsafeOutputs.Read();
  elsif ModuleSelect = 1 then
    FastUnsafeOutputs := SCP111.SdiasSafetyManagerFSoE1.FastUnsafeOutputs.Read();
  end_if;

	output := FastUnsafeOutputs;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::FastUnsafeOutputs::Write
	VAR_INPUT
		input (EAX) 	: BDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: BDINT;
	END_VAR

  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    result := SCP011.SdiasSafetyManager1.FastUnsafeOutputs.Write(input);
  elsif ModuleSelect = 1 then
    result := SCP111.SdiasSafetyManagerFSoE1.FastUnsafeOutputs.Write(input);
  else
    // invalid module selection
    result := input;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::QuitComError::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if ModuleSelect = 0 then
    QuitComError := input;
    result := SCP011.QuitComError.Write(QuitComError);
  elsif ModuleSelect = 1 then
    QuitComError := input;
    result := SCP111.QuitComError.Write(QuitComError);
  else
    // invalid module selection
    result := input;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::QuitComError::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  if ModuleSelect = 0 then
    QuitComError := SCP011.QuitComError.Read();
    output := QuitComError;
  elsif ModuleSelect = 1 then
    QuitComError := SCP111.QuitComError.Read();
    output := QuitComError;
  else
    // invalid module selection
    output := -4;
  end_if;

END_FUNCTION


FUNCTION SCP011_111::SCP011_111
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  ClassState := _NotInitialized;

	ret_code := C_OK;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::ClassState::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^Results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: IprStates;
	END_VAR

  ModuleSelect := ModuleSelect.Read();

  if ModuleSelect = 0 then
    ret_code := SCP011.ClassState.NewInst(pPara, pResult);
  elsif ModuleSelect = 1 then
    ret_code := SCP111.ClassState.NewInst(pPara, pResult);
  else
    // invalid module selection
    ret_code := ERROR;
  end_if;

END_FUNCTION


FUNCTION GLOBAL SCP011_111::FetchDiagState

  if ModuleSelect = 0 then
    SCP011.FetchDiagState();
  elsif ModuleSelect = 1 then
    SCP111.FetchDiagState();
  end_if;

END_FUNCTION


FUNCTION GLOBAL SCP011_111::GetDiagState
	VAR_INPUT
		pDiagState 	: ^SafetyDiagState;
	END_VAR
	VAR_OUTPUT
		StateReady 	: BOOL;
	END_VAR

  if ModuleSelect = 0 then
    StateReady := SCP011.GetDiagState(pDiagState);
  elsif ModuleSelect = 1 then
    StateReady := SCP111.GetDiagState(pDiagState);
  else
    // invalid module selection
    StateReady := FALSE;
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL SCP011_111::FetchDiagInfo
  VAR_INPUT
    ucChoice 	: USINT;
  END_VAR

  if ModuleSelect = 0 then
    SCP011.FetchDiagInfo(ucChoice);
  elsif ModuleSelect = 1 then
    SCP111.FetchDiagInfo(ucChoice);
  end_if;

END_FUNCTION


FUNCTION GLOBAL SCP011_111::GetDiagInfo
	VAR_INPUT
		pDiagInfo 	: ^SafetyDiagInfo;
	END_VAR
	VAR_OUTPUT
		StateReady 	: BOOL;
	END_VAR

  if ModuleSelect = 0 then
    StateReady := SCP011.GetDiagInfo(pDiagInfo);
  elsif ModuleSelect = 1 then
    StateReady := SCP111.GetDiagInfo(pDiagInfo);
  else
    // invalid module selection
    StateReady := FALSE;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL SCP011_111::Init

  ModuleSelect := ModuleSelect.Read();

END_FUNCTION
