//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define DEVICE_ID_DI169 1062    

#define DI169_DIGITAL_INPUTS_AVAILABLE 16

#define DI169_COUNTER_MODE          16#0014         
#define DI169_SDO_RESPONSE_TIMEOUT  SDIAS_SDO_TIMEOUT * 2

#define DI169_OFFSET_COUNTER_SERVERS (#Counter2)$UDINT - (#Counter1)$UDINT

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "DI169"
	Revision           = "1.9"
	GUID               = "{4FAA86C4-DB9F-4795-86EF-B38328AD8822}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\s-dias.ico"
	SharedCommandTable = "true"
	Objectsize         = "(586,120)"
	Comment            = "This hardware class is used to control the DI169 hardware module with 16 digital counter inputs&#13;&#10;It is possible to reset count servers with write methode.">
	<Channels>
		<Server Name="Counter1" GUID="{C90E41B2-0CF8-415C-833E-CCEE54E90248}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter10" GUID="{C2BE4C20-D653-435C-B9A1-F40B1BDC2B7D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter11" GUID="{F6E3E123-4444-4969-8B08-E7BF12E62B3B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter12" GUID="{0094CB81-694D-4432-BC29-7B36CC33B5E5}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter13" GUID="{B5B97F78-8D5A-40FC-A5C4-C5FD07ADC1CF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter14" GUID="{F8D01973-3D2A-4588-B0A9-59B8396BB057}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter15" GUID="{4374B6B0-CDF3-4227-B5C8-D80966FC5F2F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter16" GUID="{9C46D6C3-2799-47F1-917A-7921D2F68072}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter2" GUID="{15411ABB-8EE7-48F3-8FEF-BDB9628BE26C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter3" GUID="{6632B66B-5B2B-4690-AF77-20087A2A0529}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter4" GUID="{4BE6BBCA-F9A0-4BA5-84F0-6582E1D91636}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter5" GUID="{142E4B95-DDD2-4806-98EC-B69DFC135DDF}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter6" GUID="{05BE3DCE-165C-4293-9386-A643095B162D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter7" GUID="{B5D1274F-C60F-46A1-95D9-58983333E2D6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter8" GUID="{41B7A9A2-B0C0-49E5-8FF0-38BB4E5D0E02}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Counter9" GUID="{47810D5A-8CB8-4FA0-B452-9B6B67D94B93}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Shows the counter value of the respective input."/>
		<Server Name="Input1" GUID="{907BF6FC-8FA2-4D98-B81F-D563F88AC86F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 1 value"/>
		<Server Name="Input10" GUID="{1CBD1BF7-B983-4C6A-A783-7482D78628A9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 10 value"/>
		<Server Name="Input10Latched" GUID="{025A9321-ADD2-4DFA-AA5C-4E347BA3EFB3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input11" GUID="{4F4A1E6E-3505-486B-8B81-1F6672997F61}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 11 value"/>
		<Server Name="Input11Latched" GUID="{CC6F8C26-864E-49CE-9A52-20239FC8F16A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input12" GUID="{EE3E6C86-B7C8-499E-80F0-73F7633F2655}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 12 value"/>
		<Server Name="Input12Latched" GUID="{81F32BC8-5971-409A-98E6-5E9330273B68}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input13" GUID="{E27B8614-7D62-4C8F-8BDA-F4362645E89E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 13 value"/>
		<Server Name="Input13Latched" GUID="{AFD62AA9-B714-4F65-A3D1-33626422D1FB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input14" GUID="{FA9F111F-5BB8-4B4B-BA81-F6011890BC53}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 14 value"/>
		<Server Name="Input14Latched" GUID="{5D867073-284E-4D75-9635-DABE75B0633D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input15" GUID="{995DDFAB-0630-46B0-A0EA-F5758C8045FC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 15 value"/>
		<Server Name="Input15Latched" GUID="{4E1DC4DA-C49E-4B62-81B3-85FCC2D612B1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input16" GUID="{5A5728CD-6159-4FA7-A29B-2672B8793FF7}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 16 value"/>
		<Server Name="Input16Latched" GUID="{7A507CE6-37F9-4D4E-AFE7-F704D4CB60B4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input1Latched" GUID="{805A0BA4-B42A-4439-A68A-1059D6B6B960}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input2" GUID="{0E327983-6EF4-4A13-B414-7F3D4939FC64}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 2 value"/>
		<Server Name="Input2Latched" GUID="{0DCC6661-3B17-408F-B67B-42BE205C7EF0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input3" GUID="{84B77271-FB61-4AC4-BE75-0AA217D25CC0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 3 value"/>
		<Server Name="Input3Latched" GUID="{ED5F9C06-77BA-47F3-A055-7A032CE32F08}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input4" GUID="{39150810-0DD4-422A-B1C4-8DC7DE7235FC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 4 value"/>
		<Server Name="Input4Latched" GUID="{90A2C40C-91B5-4C0D-A285-52EBCE52A8C4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input5" GUID="{AC510DAE-9818-4B8D-A37D-605B8DA6D4BD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 5 value"/>
		<Server Name="Input5Latched" GUID="{333C442F-C2EA-4CD0-8977-DBD1704DF001}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input6" GUID="{AF66F8AC-D6A8-4268-9C03-E7F6A6408EA2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 6 value"/>
		<Server Name="Input6Latched" GUID="{F44BFB6E-2521-4D0A-B8F8-DF3A76064D87}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input7" GUID="{A1173D82-AD5B-4359-883C-F72A90CC2F0C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 7 value"/>
		<Server Name="Input7Latched" GUID="{04CAF2B7-5C3B-495D-8FEC-057307394484}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input8" GUID="{73B88B5D-503E-4848-95EF-15BE6780A124}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 8 value"/>
		<Server Name="Input8Latched" GUID="{E5A214FF-2DE7-41B8-B721-B6DEA2D9B700}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="Input9" GUID="{DCFB4229-A8E7-4BB5-AB8D-1B1C611155E6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 9 value"/>
		<Server Name="Input9Latched" GUID="{2443FB1A-3381-452D-91AB-8711BD231258}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server shows the latched input state of the input.&#13;&#10;1 = input has been latched (is reset when read() method is called)"/>
		<Server Name="InputWord" GUID="{F570C6AF-586D-48C0-93BF-563CCF73CB5E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Bit 0 to 15 ... Input 1 to 16"/>
		<Client Name="CounterDirection1" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection10" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection11" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection12" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection13" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection14" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection15" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection16" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection2" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection3" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection4" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection5" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection6" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection7" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection8" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterDirection9" Required="false" Internal="false" Comment="Set this client to set the counter direction of the respective input. As init value.&#13;&#10;0 .. count up on detected edge&#13;&#10;1 .. count down on detected edge"/>
		<Client Name="CounterEdge1" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge10" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge11" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge12" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge13" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge14" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge15" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge16" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge2" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge3" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge4" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge5" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge6" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge7" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge8" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterEdge9" Required="false" Internal="false" Comment="Set this client to configure the trigger type of the respective input. As init value!&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges&#13;&#10;&#13;&#10;Important: If CounterModeCh[x] is set to 1 or 2, &#13;&#10;CounterEdge must be set on a different value than 0!!!"/>
		<Client Name="CounterModeCh1" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 1 and Input 2: Channel 1 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter1 Server.&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh2" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 3 and Input 4: Channel 2 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter3 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh3" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 5 and Input 6: Channel 3 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter5 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh4" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 7 and Input 8: Channel 4 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter7 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh5" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 9 and Input 10: Channel 5 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter9 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh6" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 11 and Input 12: Channel 6 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter11 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh7" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 13 and Input 14: Channel 7 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter13 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="CounterModeCh8" Required="false" Internal="false" Comment="Count mode:&#13;&#10;Input 15 and Input 16: Channel 8 modus switch&#13;&#10;&#13;&#10;Result is shown on the Counter15 Server&#13;&#10;&#13;&#10;Mode select:&#13;&#10;0 ... selected channel is functioning as normal counter&#13;&#10;1 ... Incremental Encoder 1 Edge&#13;&#10;2 ... Incremental Encoder 4 Edges"/>
		<Client Name="Input10Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input11Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input12Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input13Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input14Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input15Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input16Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input1Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input2Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input3Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input4Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input5Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input6Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input7Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input8Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
		<Client Name="Input9Latch" Required="false" Internal="false" Comment="Set this client of configure the latch type of the respective input. As init value.&#13;&#10;0 .. No Edge&#13;&#10;1 .. Rising Edge&#13;&#10;2 .. Falling Edge&#13;&#10;3 .. Both Edges"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="EisMic"/>
		<Dokumentation Revision="1.9" Date="12.08.2019" Author="LazJos" Company="Sigmatek" Description="Added support for HWAlarms."/>
		<Dokumentation Revision="1.8" Date="09.01.2019" Author="FurDom" Company="Sigmatek" Description="Added function for Spi Write in SdiasBase class."/>
		<Dokumentation Revision="1.7" Date="27.08.2018" Author="HaeTho" Company="Sigmatek" Description="Corrected initializtion for CounterModeChX"/>
		<Dokumentation Revision="1.6" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated."/>
		<Dokumentation Revision="1.5" Date="23.01.2018" Author="RamAnd" Company="Sigmatek" Description="Log messages have been standardized for easier maintenance, easier use in any class and to allow spam filtering. Code for the logging functions is now only located in HwControl."/>
		<Dokumentation Revision="1.4" Date="16.05.2017" Author="RamAnd" Company="Sigmatek" Description="When adding an SDO (i.e. via ReadSPIData) from background priority it was possible that the adding process got interrupted by receiving the answer to this SDO which is handled in cyclic priority. In the error case the answer was unexpected and therefore ignored. Then the class signals a timeout while waiting for the answer, which already arrived before waiting for it. Added mutex and changed instruction order to prevent this error."/>
		<Dokumentation Revision="1.3" Date="12.07.2016" Author="SeiChr" Company="Sigmatek" Description="Added Values for the total Current calculation. SA 31571"/>
		<Dokumentation Revision="1.2" Date="01.03.2016" Author="EisMic" Company="Sigmatek" Description="Corrected BoundExceed Error in base class at Write method of LEDControl Server when Place = LSL_DEACTIVATED."/>
		<Dokumentation Revision="1.1" Date="22.02.2016" Author="PieSte" Company="Sigmatek" Description="Add comment for &quot;CounterEdge&quot; settings."/>
		<Dokumentation Revision="1.0" Date="18.06.2015" Author="EisMic" Company="Sigmatek" Description="Initial Version"/>
	</RevDoku>
	<Network Name="DI169">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{F2000852-2E44-4116-B4E0-810EFB77E1C6}"
				Class      = "SdiasBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassState"/>
					<Server Name="DeviceID"/>
					<Server Name="FPGAVersion"/>
					<Server Name="HwVersion"/>
					<Server Name="LEDControl" Value="0"/>
					<Server Name="RetryCounter"/>
					<Server Name="SDOState"/>
					<Server Name="SerialNo"/>
					<Client Name="Place" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ToStdLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(804,210),(632,210),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(804,270),(632,270),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(804,450),(632,450),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(804,510),(632,510),"/>
			<Connection Source="_base.SdiasIn" Destination="this.SdiasIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.LEDControl" Destination="_base.LEDControl" Vertices="(804,570),(632,570),"/>
			<Connection Source="this.FPGAVersion" Destination="_base.FPGAVersion" Vertices="(804,330),(632,330),"/>
			<Connection Source="this.HwVersion" Destination="_base.HwVersion" Vertices="(804,390),(632,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using SdiasBase

DI169 : CLASS
: SdiasBase
	TYPE
	  t_InitSSW :  //! <Type Comment="State definition for Initialization." Name="t_InitSSW"/>
	  (
	    _InitVariables,
	    _ConfigModule,
	    _Finish,
	    _InitError
	  )$UDINT;
	  t_ResponseState :  //! <Type Comment="SDO Response states." Name="t_ResponseState"/>
	  (
	    _idle,
	    _wait,
	    _valid
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_ConfigSDO : STRUCT  //! <Type Comment="Structure for config data." Name="t_s_ConfigSDO"/>
	    LatchRisingEdge : BINT
	    [
	    ];
	    LatchFallingEdge : BINT
	    [
	    ];
	    CounterRisingEdge : BINT
	    [
	    ];
	    CounterFallingEdge : BINT
	    [
	    ];
	    CounterDirection : BINT
	    [
	    ];
	    CounterMode : BINT
	    [
	    ];
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ReadData : STRUCT  //! <Type Comment="Structure of Read Data." Name="t_s_ReadData"/>
	    DigitalInputs : BINT
	    [
	    ];
	    LatchSourceRegister : BINT
	    [
	      1 DigIn1Latched,
	      2 DigIn2Latched,
	      3 DigIn3Latched,
	      4 DigIn4Latched,
	      5 DigIn5Latched,
	      6 DigIn6Latched,
	      7 DigIn7Latched,
	      8 DigIn8Latched,
	      9 DigIn9Latched,
	      10 DigIn10Latched,
	      11 DigIn11Latched,
	      12 DigIn12Latched,
	      13 DigIn13Latched,
	      14 DigIn14Latched,
	      15 DigIn15Latched,
	      16 DigIn16Latched,
	    ];
	    Counter : ARRAY [0..15] OF USINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	Input1 	: SvrCh_DINT;
	Input1Latched 	: SvrCh_DINT;
	Counter1 	: SvrCh_DINT;
	Input2 	: SvrCh_DINT;
	Input2Latched 	: SvrCh_DINT;
	Counter2 	: SvrCh_DINT;
	Input3 	: SvrCh_DINT;
	Input3Latched 	: SvrCh_DINT;
	Counter3 	: SvrCh_DINT;
	Input4 	: SvrCh_DINT;
	Input4Latched 	: SvrCh_DINT;
	Counter4 	: SvrCh_DINT;
	Input5 	: SvrCh_DINT;
	Input5Latched 	: SvrCh_DINT;
	Counter5 	: SvrCh_DINT;
	Input6 	: SvrCh_DINT;
	Input6Latched 	: SvrCh_DINT;
	Counter6 	: SvrCh_DINT;
	Input7 	: SvrCh_DINT;
	Input7Latched 	: SvrCh_DINT;
	Counter7 	: SvrCh_DINT;
	Input8 	: SvrCh_DINT;
	Input8Latched 	: SvrCh_DINT;
	Counter8 	: SvrCh_DINT;
	Input9 	: SvrCh_DINT;
	Input9Latched 	: SvrCh_DINT;
	Counter9 	: SvrCh_DINT;
	Input10 	: SvrCh_DINT;
	Input10Latched 	: SvrCh_DINT;
	Counter10 	: SvrCh_DINT;
	Input11 	: SvrCh_DINT;
	Input11Latched 	: SvrCh_DINT;
	Counter11 	: SvrCh_DINT;
	Input12 	: SvrCh_DINT;
	Input12Latched 	: SvrCh_DINT;
	Counter12 	: SvrCh_DINT;
	Input13 	: SvrCh_DINT;
	Input13Latched 	: SvrCh_DINT;
	Counter13 	: SvrCh_DINT;
	Input14 	: SvrCh_DINT;
	Input14Latched 	: SvrCh_DINT;
	Counter14 	: SvrCh_DINT;
	Input15 	: SvrCh_DINT;
	Input15Latched 	: SvrCh_DINT;
	Counter15 	: SvrCh_DINT;
	Input16 	: SvrCh_DINT;
	Input16Latched 	: SvrCh_DINT;
	Counter16 	: SvrCh_DINT;
	InputWord 	: SvrCh_BDINT;
  //Clients:
	CounterModeCh1 	: CltCh_DINT;
	CounterModeCh2 	: CltCh_DINT;
	CounterModeCh3 	: CltCh_DINT;
	CounterModeCh4 	: CltCh_DINT;
	CounterModeCh5 	: CltCh_DINT;
	CounterModeCh6 	: CltCh_DINT;
	CounterModeCh7 	: CltCh_DINT;
	CounterModeCh8 	: CltCh_DINT;
	Input1Latch 	: CltCh_DINT;
	CounterEdge1 	: CltCh_DINT;
	CounterDirection1 	: CltCh_DINT;
	Input2Latch 	: CltCh_DINT;
	CounterEdge2 	: CltCh_DINT;
	CounterDirection2 	: CltCh_DINT;
	Input3Latch 	: CltCh_DINT;
	CounterEdge3 	: CltCh_DINT;
	CounterDirection3 	: CltCh_DINT;
	Input4Latch 	: CltCh_DINT;
	CounterEdge4 	: CltCh_DINT;
	CounterDirection4 	: CltCh_DINT;
	Input5Latch 	: CltCh_DINT;
	CounterEdge5 	: CltCh_DINT;
	CounterDirection5 	: CltCh_DINT;
	Input6Latch 	: CltCh_DINT;
	CounterEdge6 	: CltCh_DINT;
	CounterDirection6 	: CltCh_DINT;
	Input7Latch 	: CltCh_DINT;
	CounterEdge7 	: CltCh_DINT;
	CounterDirection7 	: CltCh_DINT;
	Input8Latch 	: CltCh_DINT;
	CounterEdge8 	: CltCh_DINT;
	CounterDirection8 	: CltCh_DINT;
	Input9Latch 	: CltCh_DINT;
	CounterEdge9 	: CltCh_DINT;
	CounterDirection9 	: CltCh_DINT;
	Input10Latch 	: CltCh_DINT;
	CounterEdge10 	: CltCh_DINT;
	CounterDirection10 	: CltCh_DINT;
	Input11Latch 	: CltCh_DINT;
	CounterEdge11 	: CltCh_DINT;
	CounterDirection11 	: CltCh_DINT;
	Input12Latch 	: CltCh_DINT;
	CounterEdge12 	: CltCh_DINT;
	CounterDirection12 	: CltCh_DINT;
	Input13Latch 	: CltCh_DINT;
	CounterEdge13 	: CltCh_DINT;
	CounterDirection13 	: CltCh_DINT;
	Input14Latch 	: CltCh_DINT;
	CounterEdge14 	: CltCh_DINT;
	CounterDirection14 	: CltCh_DINT;
	Input15Latch 	: CltCh_DINT;
	CounterEdge15 	: CltCh_DINT;
	CounterDirection15 	: CltCh_DINT;
	Input16Latch 	: CltCh_DINT;
	CounterEdge16 	: CltCh_DINT;
	CounterDirection16 	: CltCh_DINT;
  //Variables:
		pReadData 	: ^t_s_ReadData;			//! <Variable Comment="Read-Data from the Module." Name="pReadData"/>
		eInitSSW 	: t_InitSSW;			//! <Variable Comment="Initialisation Statemachine." Name="eInitSSW"/>
		eResponseState 	: t_ResponseState;			//! <Variable Comment="Actual Response State of the SDO Communication." Name="eResponseState"/>
		udSDOTimeout 	: UDINT;			//! <Variable Comment="Timeout for SDO-Communication." Name="udSDOTimeout"/>
		eInitSSWErrorStep 	: t_InitSSW;			//! <Variable Comment="Initialisation Statemachine in case of an Error." Name="eInitSSWErrorStep"/>
		biLatchReaded : BINT
		[
		  1 Input1,
		  2 Input2,
		  3 Input3,
		  4 Input4,
		  5 Input5,
		  6 Input6,
		  7 Input7,
		  8 Input8,
		  9 Input9,
		  10 Input10,
		  11 Input11,
		  12 Input12,
		  13 Input13,
		  14 Input14,
		  15 Input15,
		  16 Input16,
		];
			//! <Variable Comment="Bitfield to reset latch in next rt run." Name="biLatchReaded"/>
		aOldCounterVal : ARRAY [0..DI169_DIGITAL_INPUTS_AVAILABLE] OF DINT;
			//! <Variable Comment="Array to store the last counter value." Name="aOldCounterVal"/>
		sCfgData 	: t_s_ConfigSDO;			//! <Variable Comment="Structure of Configdata of FPGA." Name="sCfgData"/>
  //Functions:
				//! <Function Comment="Realtime Update Methode which runs in PreScan." Name="UpdateRt"/>
	FUNCTION VIRTUAL GLOBAL UpdateRt;
				//! <Function Comment="Methode is called if this Module gets connected." Name="ConnectEvent"/>
	FUNCTION VIRTUAL GLOBAL ConnectEvent;
				//! <Function Comment="Methode is called if this Module gets disconnected." Name="DisconnectEvent"/>
	FUNCTION VIRTUAL GLOBAL DisconnectEvent;
				//! <Function Comment="Methode should be used to run a Statemachine to Initialize the Module." Name="InitModule"/>
	FUNCTION VIRTUAL GLOBAL InitModule
		VAR_OUTPUT
			eModuleInitState 	: iprStates;			//! <Variable Comment="Return BUSY until the Initialisation is finished." Name="InitModule.eModuleInitState"/>
		END_VAR;
				//! <Function Comment="This Methode should is used, to check the DeviceID of the Module." Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			udID2Check 	: UDINT;			//! <Variable Comment="Device ID of connected Module." Name="CheckDeviceID.udID2Check"/>
		END_VAR
		VAR_OUTPUT
			bIsOK 	: BOOL;			//! <Variable Comment="FALSE = Wrong DeviceID for Module&#13;&#10;TRUE  = DeviceID of Module is correct" Name="CheckDeviceID.bIsOK"/>
		END_VAR;
				//! <Function Comment="Methode to receive the Response in case of SDO-Communication." Name="ReceiveSDOResponse"/>
	FUNCTION VIRTUAL ReceiveSDOResponse
		VAR_INPUT
			eCommand 	: t_SDIAS_SDO_Cmd;			//! <Variable Comment="Type of SDO-Command" Name="ReceiveSDOResponse.eCommand"/>
			hOffset 	: HINT;			//! <Variable Comment="Address-Offset in Module." Name="ReceiveSDOResponse.hOffset"/>
			usLength 	: USINT;			//! <Variable Comment="Length of Data." Name="ReceiveSDOResponse.usLength"/>
			eResult 	: iprStates;			//! <Variable Comment="State of SDO-Communication." Name="ReceiveSDOResponse.eResult"/>
			pResponseBuffer 	: ^USINT;			//! <Variable Comment="Pointer of ResponseBuffer, where the SDO-Data is located." Name="ReceiveSDOResponse.pResponseBuffer"/>
			ResponseLength 	: USINT;			//! <Variable Comment="Size of the ResponseBuffer." Name="ReceiveSDOResponse.ResponseLength"/>
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;			//! <Variable Comment="Indicates if the Methode was successful." Name="ReceiveSDOResponse.ret_code"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetTaskCfg
		VAR_OUTPUT
			TaskCfg 	: BDINT;			//! <Variable Comment="Select which tasks will be available for this module:&#13;&#10;Bit0..Realtime PreScan&#13;&#10;Bit1..Realtime PostScan&#13;&#10;Bit2..Cyclic&#13;&#10;&#13;&#10;e.g. if only realtime postscan is needed:&#13;&#10;2#010" Name="GetTaskCfg.TaskCfg"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input1Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input2Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input3Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input4Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input5Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input6Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input7Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input8Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input9Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input10Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input11Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input12Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input13Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input14Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input15Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Input16Latched::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DI169::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_DI169
1$UINT, 9$UINT, (SIZEOF(::DI169))$UINT, 
49$UINT, 56$UINT, 0$UINT, 
TO_UDINT(2130544889), "DI169", //Class
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 60$UINT, //Baseclass
//Servers:
(::DI169.Input1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1344628668), "Input1", 
(::DI169.Input1Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(751816755), "Input1Latched", 
(::DI169.Counter1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(547260585), "Counter1", 
(::DI169.Input2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3375117830), "Input2", 
(::DI169.Input2Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2722158544), "Input2Latched", 
(::DI169.Counter2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3113736467), "Counter2", 
(::DI169.Input3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3190490768), "Input3", 
(::DI169.Input3Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1860884302), "Input3Latched", 
(::DI169.Counter3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3465603461), "Counter3", 
(::DI169.Input4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(542085939), "Input4", 
(::DI169.Input4Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1680858711), "Input4Latched", 
(::DI169.Counter4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1358199846), "Counter4", 
(::DI169.Input5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1464378277), "Input5", 
(::DI169.Input5Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2827345609), "Input5Latched", 
(::DI169.Counter5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(670256304), "Counter5", 
(::DI169.Input6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3460428319), "Input6", 
(::DI169.Input6Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(638245162), "Input6Latched", 
(::DI169.Counter6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3204062474), "Counter6", 
(::DI169.Input7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3108422281), "Input7", 
(::DI169.Input7Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3936410036), "Input7Latched", 
(::DI169.Counter7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3388812700), "Counter7", 
(::DI169.Input8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(704241432), "Input8", 
(::DI169.Input8Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(864078616), "Input8Latched", 
(::DI169.Counter8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1497509901), "Counter8", 
(::DI169.Input9.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1593765774), "Input9", 
(::DI169.Input9Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4280994694), "Input9Latched", 
(::DI169.Counter9.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(776274075), "Counter9", 
(::DI169.Input10.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(912000481), "Input10", 
(::DI169.Input10Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3246316660), "Input10Latched", 
(::DI169.Counter10.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1542544101), "Counter10", 
(::DI169.Input11.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1096496503), "Input11", 
(::DI169.Input11Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(232053994), "Input11Latched", 
(::DI169.Counter11.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(754346611), "Counter11", 
(::DI169.Input12.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3629278413), "Input12", 
(::DI169.Input12Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2203835145), "Input12Latched", 
(::DI169.Counter12.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3053403081), "Counter12", 
(::DI169.Input13.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2941604955), "Input13", 
(::DI169.Input13Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1341250455), "Input13Latched", 
(::DI169.Counter13.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3271035743), "Counter13", 
(::DI169.Input14.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(825344504), "Input14", 
(::DI169.Input14Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1161089678), "Input14Latched", 
(::DI169.Counter14.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1553768188), "Counter14", 
(::DI169.Input15.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1178005870), "Input15", 
(::DI169.Input15Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2308887056), "Input15Latched", 
(::DI169.Counter15.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(731623018), "Counter15", 
(::DI169.Input16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3745489108), "Input16", 
(::DI169.Input16Latched.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(118609395), "Input16Latched", 
(::DI169.Counter16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2995978192), "Counter16", 
(::DI169.InputWord.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3456773996), "InputWord", 
//Clients:
(::DI169.CounterModeCh1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2756208751), "CounterModeCh1", 
(::DI169.CounterModeCh2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1027684821), "CounterModeCh2", 
(::DI169.CounterModeCh3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1246103875), "CounterModeCh3", 
(::DI169.CounterModeCh4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3559038176), "CounterModeCh4", 
(::DI169.CounterModeCh5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2737155190), "CounterModeCh5", 
(::DI169.CounterModeCh6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(976027084), "CounterModeCh6", 
(::DI169.CounterModeCh7.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1294716250), "CounterModeCh7", 
(::DI169.CounterModeCh8.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3717517515), "CounterModeCh8", 
(::DI169.Input1Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1200938485), "Input1Latch", 
(::DI169.CounterEdge1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2609704365), "CounterEdge1", 
(::DI169.CounterDirection1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(323702262), "CounterDirection1", 
(::DI169.Input2Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3238047579), "Input2Latch", 
(::DI169.CounterEdge2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(42318871), "CounterEdge2", 
(::DI169.CounterDirection2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2319588428), "CounterDirection2", 
(::DI169.Input3Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(173833470), "Input3Latch", 
(::DI169.CounterEdge3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1971489921), "CounterEdge3", 
(::DI169.CounterDirection3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4249169114), "CounterDirection3", 
(::DI169.Input4Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(391728198), "Input4Latch", 
(::DI169.CounterEdge4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3957725474), "CounterEdge4", 
(::DI169.CounterDirection4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1663154553), "CounterDirection4", 
(::DI169.Input5Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3691356131), "Input5Latch", 
(::DI169.CounterEdge5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2632001972), "CounterEdge5", 
(::DI169.CounterDirection5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(338069999), "CounterDirection5", 
(::DI169.Input6Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1519512909), "Input6Latch", 
(::DI169.CounterEdge6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(99121166), "CounterEdge6", 
(::DI169.CounterDirection6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2368723029), "CounterDirection6", 
(::DI169.Input7Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2446147304), "Input7Latch", 
(::DI169.CounterEdge7.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1928284312), "CounterEdge7", 
(::DI169.CounterDirection7.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4196985027), "CounterDirection7", 
(::DI169.Input8Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1620806717), "Input8Latch", 
(::DI169.CounterEdge8.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3796915465), "CounterEdge8", 
(::DI169.CounterDirection8.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1788343634), "CounterDirection8", 
(::DI169.Input9Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2881970072), "Input9Latch", 
(::DI169.CounterEdge9.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2505532831), "CounterEdge9", 
(::DI169.CounterDirection9.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(496027076), "CounterDirection9", 
(::DI169.Input10Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2126477049), "Input10Latch", 
(::DI169.CounterEdge10.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1546095769), "CounterEdge10", 
(::DI169.CounterDirection10.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2685846341), "CounterDirection10", 
(::DI169.Input11Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3051595100), "Input11Latch", 
(::DI169.CounterEdge11.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(723565583), "CounterEdge11", 
(::DI169.CounterDirection11.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3608277971), "CounterDirection11", 
(::DI169.Input12Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(863492082), "Input12Latch", 
(::DI169.CounterEdge12.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2989092277), "CounterEdge12", 
(::DI169.CounterDirection12.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1310237289), "CounterDirection12", 
(::DI169.Input13Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4163568727), "Input13Latch", 
(::DI169.CounterEdge13.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3308182819), "CounterEdge13", 
(::DI169.CounterDirection13.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(958370559), "CounterDirection13", 
(::DI169.Input14Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3845010671), "Input14Latch", 
(::DI169.CounterEdge14.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1531594880), "CounterEdge14", 
(::DI169.CounterDirection14.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2809857884), "CounterDirection14", 
(::DI169.Input15Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(779282250), "Input15Latch", 
(::DI169.CounterEdge15.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(743274518), "CounterEdge15", 
(::DI169.CounterDirection15.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3497801674), "CounterDirection15", 
(::DI169.Input16Latch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2833683940), "Input16Latch", 
(::DI169.CounterEdge16.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3041143212), "CounterEdge16", 
(::DI169.CounterDirection16.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1232430704), "CounterDirection16", 
END_FUNCTION


#define USER_CNT_DI169 25

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DI169] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DI169::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= SdiasBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= SdiasBase::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, SdiasBase::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_DI169;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #UpdateRt();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #ConnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #DisconnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #InitModule();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #ReceiveSDOResponse();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #GetTaskCfg();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #GetDeviceID();

#pragma warning (default : 74)
	SdiasBase::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasBase::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input1Latched.pMeth			:= StoreMethod( #Input1Latched::Read(), #M_NO_F() );
	IF Input1Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input2Latched.pMeth			:= StoreMethod( #Input2Latched::Read(), #M_NO_F() );
	IF Input2Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input3Latched.pMeth			:= StoreMethod( #Input3Latched::Read(), #M_NO_F() );
	IF Input3Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input4Latched.pMeth			:= StoreMethod( #Input4Latched::Read(), #M_NO_F() );
	IF Input4Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter4.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input5Latched.pMeth			:= StoreMethod( #Input5Latched::Read(), #M_NO_F() );
	IF Input5Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter5.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter5.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input6Latched.pMeth			:= StoreMethod( #Input6Latched::Read(), #M_NO_F() );
	IF Input6Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter6.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input7Latched.pMeth			:= StoreMethod( #Input7Latched::Read(), #M_NO_F() );
	IF Input7Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter7.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input8Latched.pMeth			:= StoreMethod( #Input8Latched::Read(), #M_NO_F() );
	IF Input8Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter8.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input9Latched.pMeth			:= StoreMethod( #Input9Latched::Read(), #M_NO_F() );
	IF Input9Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter9.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter9.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input10Latched.pMeth			:= StoreMethod( #Input10Latched::Read(), #M_NO_F() );
	IF Input10Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter10.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter10.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input11Latched.pMeth			:= StoreMethod( #Input11Latched::Read(), #M_NO_F() );
	IF Input11Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter11.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter11.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input12Latched.pMeth			:= StoreMethod( #Input12Latched::Read(), #M_NO_F() );
	IF Input12Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter12.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter12.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input13Latched.pMeth			:= StoreMethod( #Input13Latched::Read(), #M_NO_F() );
	IF Input13Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter13.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter13.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input14Latched.pMeth			:= StoreMethod( #Input14Latched::Read(), #M_NO_F() );
	IF Input14Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter14.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter14.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input15Latched.pMeth			:= StoreMethod( #Input15Latched::Read(), #M_NO_F() );
	IF Input15Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter15.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter15.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Input16Latched.pMeth			:= StoreMethod( #Input16Latched::Read(), #M_NO_F() );
	IF Input16Latched.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter16.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL DI169::UpdateRt
  VAR
    TempReadData          : t_s_ReadData;
    us_temp               : USINT;
    ss_delta              : SINT;
    pClt                  : ^DINT; 
    pSvr                  : ^DINT; 
    i                     : SINT;
  END_VAR  
  
  TempReadData := pReadData^;
  
  //Update Input Server Values
  InputWord := TempReadData.DigitalInputs;
  
  Input1 := InputWord.1;
  Input2 := InputWord.2;
  Input3 := InputWord.3;
  Input4 := InputWord.4;
  Input5 := InputWord.5;
  Input6 := InputWord.6;
  Input7 := InputWord.7;
  Input8 := InputWord.8;
  Input9 := InputWord.9;
  Input10 := InputWord.10;
  Input11 := InputWord.11;
  Input12 := InputWord.12;
  Input13 := InputWord.13;
  Input14 := InputWord.14;
  Input15 := InputWord.15;
  Input16 := InputWord.16; 
   
  //Update Latched Inputs
  // check for latched bits
  if (TempReadData.LatchSourceRegister AND 16#FFFF) | biLatchReaded then
    
    //Input1 latched
    if ( TempReadData.LatchSourceRegister.DigIn1Latched ) | biLatchReaded.Input1 then
      biLatchReaded.Input1 := FALSE;
      Input1Latched := TempReadData.LatchSourceRegister.DigIn1Latched; //Reset of Bit is done with Read-Access
    end_if;  
        
    //Input2 latched
    if ( TempReadData.LatchSourceRegister.DigIn2Latched ) | biLatchReaded.Input2 then
      biLatchReaded.Input2 := FALSE;
      Input2Latched := TempReadData.LatchSourceRegister.DigIn2Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input3 latched
    if ( TempReadData.LatchSourceRegister.DigIn3Latched ) | biLatchReaded.Input3 then
      biLatchReaded.Input3 := FALSE;
      Input3Latched := TempReadData.LatchSourceRegister.DigIn3Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input4 Latched
    if ( TempReadData.LatchSourceRegister.DigIn4Latched ) | biLatchReaded.Input4 then
      biLatchReaded.Input4 := FALSE;
      Input4Latched := TempReadData.LatchSourceRegister.DigIn4Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input5 latched
    if ( TempReadData.LatchSourceRegister.DigIn5Latched ) | biLatchReaded.Input5 then
      biLatchReaded.Input5 := FALSE;
      Input5Latched := TempReadData.LatchSourceRegister.DigIn5Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input6 latched
    if ( TempReadData.LatchSourceRegister.DigIn6Latched ) | biLatchReaded.Input6 then
      biLatchReaded.Input6 := FALSE;
      Input6Latched := TempReadData.LatchSourceRegister.DigIn6Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input7 latched
    if ( TempReadData.LatchSourceRegister.DigIn7Latched ) | biLatchReaded.Input7 then
      biLatchReaded.Input7 := FALSE;
      Input7Latched := TempReadData.LatchSourceRegister.DigIn7Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input8 latched
    if ( TempReadData.LatchSourceRegister.DigIn8Latched ) | biLatchReaded.Input8 then
      biLatchReaded.Input8 := FALSE;
      Input8Latched := TempReadData.LatchSourceRegister.DigIn8Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input9 latched
    if ( TempReadData.LatchSourceRegister.DigIn9Latched ) | biLatchReaded.Input9 then
      biLatchReaded.Input9 := FALSE;
      Input9Latched := TempReadData.LatchSourceRegister.DigIn9Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input10 latched
    if ( TempReadData.LatchSourceRegister.DigIn10Latched ) | biLatchReaded.Input10 then
      biLatchReaded.Input10 := FALSE;
      Input10Latched := TempReadData.LatchSourceRegister.DigIn10Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input11 latched
    if ( TempReadData.LatchSourceRegister.DigIn11Latched ) | biLatchReaded.Input11 then
      biLatchReaded.Input11 := FALSE;
      Input11Latched := TempReadData.LatchSourceRegister.DigIn11Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input12 latched
    if ( TempReadData.LatchSourceRegister.DigIn12Latched ) | biLatchReaded.Input12 then
      biLatchReaded.Input12 := FALSE;
      Input12Latched := TempReadData.LatchSourceRegister.DigIn12Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input13 latched
    if ( TempReadData.LatchSourceRegister.DigIn13Latched ) | biLatchReaded.Input13 then
      biLatchReaded.Input13 := FALSE;
      Input13Latched := TempReadData.LatchSourceRegister.DigIn13Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input14 latched
    if ( TempReadData.LatchSourceRegister.DigIn14Latched ) | biLatchReaded.Input14 then
      biLatchReaded.Input14 := FALSE;
      Input14Latched := TempReadData.LatchSourceRegister.DigIn14Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input15 latched
    if ( TempReadData.LatchSourceRegister.DigIn15Latched ) | biLatchReaded.Input15 then
      biLatchReaded.Input15 := FALSE;
      Input15Latched := TempReadData.LatchSourceRegister.DigIn15Latched; //Reset of Bit is done with Read-Access
    end_if;  
    
    //Input16 latched
    if ( TempReadData.LatchSourceRegister.DigIn16Latched ) | biLatchReaded.Input16 then
      biLatchReaded.Input16 := FALSE;
      Input16Latched := TempReadData.LatchSourceRegister.DigIn16Latched; //Reset of Bit is done with Read-Access
    end_if;  
  
  end_if;  
  
  //Counter Values
  pClt := #CounterEdge1.dData ;
  pSvr := #Counter1.dData;
    
  for i:=0  to DI169_DIGITAL_INPUTS_AVAILABLE - 1 do
    if pClt^  then
      us_temp := TempReadData.Counter[i];
      ss_delta := TO_SINT(us_temp - aOldCounterVal[i]);
      pSvr^ += TO_DINT(ss_delta);
      aOldCounterVal[i] := us_temp;
    end_if;
    
    //Increase Offset so the the pointer points to the next counter server / client
    pSvr += sizeof(SvrCh) * 3;
    pClt += sizeof(CltCh) * 3;
   end_for; 
   
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::CheckDeviceID
	VAR_INPUT
		udID2Check 	: UDINT;
	END_VAR
	VAR_OUTPUT
		bIsOK 	: BOOL;
	END_VAR
  
  //look if it is right hardware
	if ( udID2Check <> DEVICE_ID_DI169 ) then
		bIsOK := FALSE;
	else
    bIsOK := TRUE;
	end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::ConnectEvent

  // start the accesses on the SDIAS (initialize the control byte in the DPRAM)
  if DefaultAccesses.ReadAccess.pControlByte then
    pReadData := DefaultAccesses.ReadAccess.pData$^t_s_ReadData;

    DefaultAccesses.ReadAccess.pControlByte^.EnableDO := TRUE;
  else
    eInitState := _DOHandleInvalid;
    return;
  end_if;

  eInitSSW := _InitVariables;
  eResponseState := _idle;
  eInitState := _NotInitialized;
 
END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::DisconnectEvent

  // reset general module information shown on servers
  SdiasBase::DisconnectEvent();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::InitModule
	VAR_OUTPUT
		eModuleInitState 	: iprStates;
	END_VAR
  VAR
  	TmpRetcode        : iprStates;
  END_VAR

  eModuleInitState := BUSY;
  
 case eInitSSW of
//**************************************************************************************************************************************** 
    _InitVariables:   
         
//*****************************************************************************
//** Get Client values                                                       **
//*****************************************************************************

      Input1Latch := Input1Latch.Read() AND 0x03;
      Input2Latch := Input2Latch.Read() AND 0x03;
      Input3Latch := Input3Latch.Read() AND 0x03;
      Input4Latch := Input4Latch.Read() AND 0x03;
      Input5Latch := Input5Latch.Read() AND 0x03;
      Input6Latch := Input6Latch.Read() AND 0x03;
      Input7Latch := Input7Latch.Read() AND 0x03;
      Input8Latch := Input8Latch.Read() AND 0x03;
      Input9Latch := Input9Latch.Read() AND 0x03;
      Input10Latch := Input10Latch.Read() AND 0x03;
      Input11Latch := Input11Latch.Read() AND 0x03;
      Input12Latch := Input12Latch.Read() AND 0x03;
      Input13Latch := Input13Latch.Read() AND 0x03;
      Input14Latch := Input14Latch.Read() AND 0x03;
      Input15Latch := Input15Latch.Read() AND 0x03;
      Input16Latch := Input16Latch.Read() AND 0x03;

      CounterDirection1 := CounterDirection1.Read() AND 0x01;
      CounterDirection2 := CounterDirection2.Read() AND 0x01;
      CounterDirection3 := CounterDirection3.Read() AND 0x01;
      CounterDirection4 := CounterDirection4.Read() AND 0x01;
      CounterDirection5 := CounterDirection5.Read() AND 0x01;
      CounterDirection6 := CounterDirection6.Read() AND 0x01;
      CounterDirection7 := CounterDirection7.Read() AND 0x01;
      CounterDirection8 := CounterDirection8.Read() AND 0x01;
      CounterDirection9 := CounterDirection9.Read() AND 0x01;
      CounterDirection10 := CounterDirection10.Read() AND 0x01;
      CounterDirection11 := CounterDirection11.Read() AND 0x01;
      CounterDirection12 := CounterDirection12.Read() AND 0x01;
      CounterDirection13 := CounterDirection13.Read() AND 0x01;
      CounterDirection14 := CounterDirection14.Read() AND 0x01;
      CounterDirection15 := CounterDirection15.Read() AND 0x01;
      CounterDirection16 := CounterDirection16.Read() AND 0x01;
        
      CounterEdge1 := CounterEdge1.Read() AND 0x03;
      CounterEdge2 := CounterEdge2.Read() AND 0x03;
      CounterEdge3 := CounterEdge3.Read() AND 0x03;
      CounterEdge4 := CounterEdge4.Read() AND 0x03;
      CounterEdge5 := CounterEdge5.Read() AND 0x03;
      CounterEdge6 := CounterEdge6.Read() AND 0x03;
      CounterEdge7 := CounterEdge7.Read() AND 0x03;
      CounterEdge8 := CounterEdge8.Read() AND 0x03;
      CounterEdge9 := CounterEdge9.Read() AND 0x03;
      CounterEdge10 := CounterEdge10.Read() AND 0x03;
      CounterEdge11 := CounterEdge11.Read() AND 0x03;
      CounterEdge12 := CounterEdge12.Read() AND 0x03;
      CounterEdge13 := CounterEdge13.Read() AND 0x03;
      CounterEdge14 := CounterEdge14.Read() AND 0x03;
      CounterEdge15 := CounterEdge15.Read() AND 0x03;
      CounterEdge16 := CounterEdge16.Read() AND 0x03;
      
      CounterModeCh1 := CounterModeCh1.Read() AND 0x03;
      CounterModeCh2 := CounterModeCh2.Read() AND 0x03;
      CounterModeCh3 := CounterModeCh3.Read() AND 0x03;
      CounterModeCh4 := CounterModeCh4.Read() AND 0x03;
      CounterModeCh5 := CounterModeCh5.Read() AND 0x03;
      CounterModeCh6 := CounterModeCh6.Read() AND 0x03;
      CounterModeCh7 := CounterModeCh7.Read() AND 0x03;
      CounterModeCh8 := CounterModeCh8.Read() AND 0x03;
    
//*****************************************************************************
//** Masking the direction and detection of the Counters and Latched Values  **
//*****************************************************************************    

      sCfgData.LatchRisingEdge.1 := ((Input1Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.2 := ((Input2Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.3 := ((Input3Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.4 := ((Input4Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.5 := ((Input5Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.6 := ((Input6Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.7 := ((Input7Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.8 := ((Input8Latch and 2#1 ) = 1);
      sCfgData.LatchRisingEdge.9 := ((Input9Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.10 := ((Input10Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.11 := ((Input11Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.12 := ((Input12Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.13 := ((Input13Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.14 := ((Input14Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.15 := ((Input15Latch AND 2#1 ) = 1);
      sCfgData.LatchRisingEdge.16 := ((Input16Latch AND 2#1 ) = 1);

      sCfgData.LatchFallingEdge.1 := ((Input1Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.2 := ((Input2Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.3 := ((Input3Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.4 := ((Input4Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.5 := ((Input5Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.6 := ((Input6Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.7 := ((Input7Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.8 := ((Input8Latch and 2#10 ) = 2);
      sCfgData.LatchFallingEdge.9 := ((Input9Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.10 := ((Input10Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.11 := ((Input11Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.12 := ((Input12Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.13 := ((Input13Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.14 := ((Input14Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.15 := ((Input15Latch AND 2#10 ) = 2);
      sCfgData.LatchFallingEdge.16 := ((Input16Latch AND 2#10 ) = 2);

      sCfgData.CounterDirection.1 := (CounterDirection1 = 1);
      sCfgData.CounterDirection.2 := (CounterDirection2 = 1);
      sCfgData.CounterDirection.3 := (CounterDirection3 = 1);
      sCfgData.CounterDirection.4 := (CounterDirection4 = 1);
      sCfgData.CounterDirection.5 := (CounterDirection5 = 1);
      sCfgData.CounterDirection.6 := (CounterDirection6 = 1);
      sCfgData.CounterDirection.7 := (CounterDirection7 = 1);
      sCfgData.CounterDirection.8 := (CounterDirection8 = 1);
      sCfgData.CounterDirection.9 := (CounterDirection9 = 1);
      sCfgData.CounterDirection.10 := (CounterDirection10 = 1);
      sCfgData.CounterDirection.11 := (CounterDirection11 = 1);
      sCfgData.CounterDirection.12 := (CounterDirection12 = 1);
      sCfgData.CounterDirection.13 := (CounterDirection13 = 1);
      sCfgData.CounterDirection.14 := (CounterDirection14 = 1);
      sCfgData.CounterDirection.15 := (CounterDirection15 = 1);
      sCfgData.CounterDirection.16 := (CounterDirection16 = 1);
      
      sCfgData.CounterRisingEdge.1 := ((CounterEdge1 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.2 := ((CounterEdge2 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.3 := ((CounterEdge3 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.4 := ((CounterEdge4 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.5 := ((CounterEdge5 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.6 := ((CounterEdge6 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.7 := ((CounterEdge7 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.8 := ((CounterEdge8 and 2#1 ) = 1);
      sCfgData.CounterRisingEdge.9 := ((CounterEdge9 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.10 := ((CounterEdge10 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.11 := ((CounterEdge11 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.12 := ((CounterEdge12 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.13 := ((CounterEdge13 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.14 := ((CounterEdge14 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.15 := ((CounterEdge15 AND 2#1 ) = 1);
      sCfgData.CounterRisingEdge.16 := ((CounterEdge16 AND 2#1 ) = 1);

      sCfgData.CounterFallingEdge.1 := ((CounterEdge1 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.2 := ((CounterEdge2 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.3 := ((CounterEdge3 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.4 := ((CounterEdge4 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.5 := ((CounterEdge5 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.6 := ((CounterEdge6 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.7 := ((CounterEdge7 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.8 := ((CounterEdge8 and 2#10 ) = 2);
      sCfgData.CounterFallingEdge.9 := ((CounterEdge9 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.10 := ((CounterEdge10 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.11 := ((CounterEdge11 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.12 := ((CounterEdge12 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.13 := ((CounterEdge13 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.14 := ((CounterEdge14 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.15 := ((CounterEdge15 AND 2#10 ) = 2);
      sCfgData.CounterFallingEdge.16 := ((CounterEdge16 AND 2#10 ) = 2);
      
//*****************************************************************************
//** Setting counter modes  **
//*****************************************************************************    

      case CounterModeCh1 of
        0: sCfgData.CounterMode.1 := 0;
           sCfgData.CounterMode.2 := 0;
        1: sCfgData.CounterMode.1 := 0;
           sCfgData.CounterMode.2 := 1;
        2: sCfgData.CounterMode.1 := 1;
           sCfgData.CounterMode.2 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh1");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
      
      case CounterModeCh2 of
        0: sCfgData.CounterMode.3 := 0;
           sCfgData.CounterMode.4 := 0;
        1: sCfgData.CounterMode.3 := 0;
           sCfgData.CounterMode.4 := 1;
        2: sCfgData.CounterMode.3 := 1;
           sCfgData.CounterMode.4 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh2");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
      
      case CounterModeCh3 of
        0: sCfgData.CounterMode.5 := 0;
           sCfgData.CounterMode.6 := 0;
        1: sCfgData.CounterMode.5 := 0;
           sCfgData.CounterMode.6 := 1;
        2: sCfgData.CounterMode.5 := 1;
           sCfgData.CounterMode.6 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh3");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
            
      case CounterModeCh4 of
        0: sCfgData.CounterMode.7 := 0;
           sCfgData.CounterMode.8 := 0;
        1: sCfgData.CounterMode.7 := 0;
           sCfgData.CounterMode.8 := 1;
        2: sCfgData.CounterMode.7 := 1;
           sCfgData.CounterMode.8 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh4");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
            
      case CounterModeCh5 of
        0: sCfgData.CounterMode.9 := 0;
           sCfgData.CounterMode.10 := 0;
        1: sCfgData.CounterMode.9 := 0;
           sCfgData.CounterMode.10 := 1;
        2: sCfgData.CounterMode.9 := 1;
           sCfgData.CounterMode.10 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh5");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
            
      case CounterModeCh6 of
        0: sCfgData.CounterMode.11 := 0;
           sCfgData.CounterMode.12 := 0;
        1: sCfgData.CounterMode.11 := 0;
           sCfgData.CounterMode.12 := 1;
        2: sCfgData.CounterMode.11 := 1;
           sCfgData.CounterMode.12 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh6");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
            
      case CounterModeCh7 of
        0: sCfgData.CounterMode.13 := 0;
           sCfgData.CounterMode.14 := 0;
        1: sCfgData.CounterMode.13 := 0;
           sCfgData.CounterMode.14 := 1;
        2: sCfgData.CounterMode.13 := 1;
           sCfgData.CounterMode.14 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh7");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;
            
      case CounterModeCh8 of
        0: sCfgData.CounterMode.15 := 0;
           sCfgData.CounterMode.16 := 0;
        1: sCfgData.CounterMode.15 := 0;
           sCfgData.CounterMode.16 := 1;
        2: sCfgData.CounterMode.15 := 1;
           sCfgData.CounterMode.16 := 1;
      else
        LogError("@ZZZZ (DI169::InitModule) Invalid setting for client CounterModeCh8");
        eModuleInitState := ERROR;
        eInitState := _InvalidConfguration;
      end_case;            
      
      //Reset Counters
      Counter1 := 0;
      Counter2 := 0;
      Counter3 := 0;
      Counter4 := 0;
      Counter5 := 0;
      Counter6 := 0;
      Counter7 := 0;
      Counter8 := 0;
      Counter9 := 0;
      Counter10 := 0;
      Counter11 := 0;
      Counter12 := 0;
      Counter13 := 0;
      Counter14 := 0;
      Counter15 := 0;
      Counter16 := 0;
      
      eInitSSW := _ConfigModule;
//****************************************************************************************************************************************
    _ConfigModule:
      case eResponseState of
         _idle:
          TmpRetcode  := StartWriteSDO(hOffset:=DI169_COUNTER_MODE, usLength:=sizeof(t_s_ConfigSDO), pWriteBuffer:=(#sCfgData)$^USINT, eCommand:=SDIAS_SDO_CMD_MEM_WRITE);
          if TmpRetcode = READY then
            udSDOTimeout  := ops.tAbsolute;
            eResponseState:= _wait; 
          elsif TmpRetcode = ERROR then
            eModuleInitState := ERROR;
            LogError("@ZZZZ (DI169::InitModule) Failed to add write SDO for counter mode configuration");
            eInitState := _NoMem;
          end_if;
          //*****************************************************
        _wait:
          // wait for response
          if ((ops.tAbsolute - udSDOTimeout) > DI169_SDO_RESPONSE_TIMEOUT) then
            LogError("@ZZZZ (DI169::InitModule) SDO Response timeout config module");
            eInitSSWErrorStep := eInitSSW;
            eInitSSW := _InitError;
          end_if;
        //*****************************************************
        _valid:
          eInitSSW        := _Finish;
          eResponseState  := _idle;
        //*****************************************************
      end_case;     
      
//****************************************************************************************************************************************
     _Finish:
      eInitSSW         := _InitVariables;
      eModuleInitState := READY;
      eInitState       := _ClassOk;    
 
//****************************************************************************************************************************************
    _InitError:
      eModuleInitState := ERROR; 
      if (eInitState <> _InvalidConfguration) then
        eInitState      := _ClientNotready;
      end_if;  
  
//****************************************************************************************************************************************
 end_case;  

END_FUNCTION

FUNCTION VIRTUAL DI169::ReceiveSDOResponse
	VAR_INPUT
		eCommand 	: t_SDIAS_SDO_Cmd;
		hOffset 	: HINT;
		usLength 	: USINT;
		eResult 	: iprStates;
		pResponseBuffer 	: ^USINT;
		ResponseLength 	: USINT;
	END_VAR
	VAR_OUTPUT
		ret_code 	: iprStates;
	END_VAR

  ret_code := SdiasBase::ReceiveSDOResponse(eCommand, hOffset, usLength, eResult, pResponseBuffer, ResponseLength);

  // spi access from baseclass                                         
  if bSDOResponseHandle = TRUE then
    return;
  end_if;  
  
  if eResult = READY then
    
    case eCommand of
      SDIAS_SDO_CMD_MEM_WRITE:
        case hOffset of
          DI169_COUNTER_MODE:
            if eResponseState = _wait then
              eResponseState := _valid;
            end_if;           
        end_case;        
    end_case;
    
    if eResponseState <> _valid then
      LogError("@ZZZZ (DI169::ReceiveSDOResponse) Error in response data of SDO");
      eInitSSW := _InitError;      
    end_if;
  else
    case eCommand of
      SDIAS_SDO_CMD_MEM_WRITE:
        LogError("@ZZZZ (DI169::ReceiveSDOResponse) Error while writing the configuration");
    end_case;
    eInitSSW := _InitError;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL DI169::GetTaskCfg
	VAR_OUTPUT
		TaskCfg 	: BDINT;
	END_VAR

  TaskCfg := SDIAS_TASK_MASK_RT_PRE;

END_FUNCTION



FUNCTION VIRTUAL DI169::GetDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR
  
  output := DEVICE_ID_DI169;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input1Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  //Return Latch
	output := Input1Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input1 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input2Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input2Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input2 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input3Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input3Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input3 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input4Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input4Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input4 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input5Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input5Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input5 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input6Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input6Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input6 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input7Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input7Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input7 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input8Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input8Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input8 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input9Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input9Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input9 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input10Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input10Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input10 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input11Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input11Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input11 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input12Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input12Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input12 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input13Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input13Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input13 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input14Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input14Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input14 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input15Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input15Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input15 := TRUE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI169::Input16Latched::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  //Return Latch
	output := Input16Latched;

  //Reset Latch in next rt-run
  biLatchReaded.Input16 := TRUE;

END_FUNCTION
