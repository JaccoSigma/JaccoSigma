//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include <.\lsl_st_tcp_user.h>

(*!
<Class
	Name               = "_IP"
	Revision           = "1.10"
	GUID               = "{BB88FEBE-8A75-4FA3-898D-206C6B5B36A8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "true"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "The OS interface library class _IP can be used to perform some IP configurations, as set an IP address, subnet mask or gateway address.&#10;&#10;_IP Class Error Codes: &#10; * IPAPI_ERR_NONE                         0:  no errors &#10; * IPAPI_ERR_OSI_FNC                  -1:  operating system is too old, the funtion is not available &#10; * IPAPI_ERR_NULL                   -1000:  invalid pointer (NIL-pointer) &#10; * IPAPI_ERR_IFACE                 -1001:  IP interface not available &#10; * IPAPI_ERR_IFACE_FNC        -1002:  IP interface function not available &#10; * IPAPI_ERR_ETHER_IFACE    -1003:  ethernet Interface not available &#10; * IPAPI_ERR_NETWORK          -1004:  invalid network config. (same logical network on second ethernet interface) &#10; * IPAPI_ERR_ADDRESS           -1005:  error set/change ip-address &#10; * IPAPI_ERR_GATEWAY          -1006:  error set/change gateway address &#10; * IPAPI_ERR_PARAM               -1007:  error invalid parameter &#10; * IPAPI_ERR_OPTION             -1008:  error invalid option &#10; * IPAPI_ERR_IP_NOT_READY -1009:  error, ethernet interface available but not ready (no IP-address set)">
	<Channels>
		<Server Name="Server0" GUID="{31CBFA14-6D3D-4FED-83B7-1FCF4083D3BA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\code\OsiBaseNew.st"/>
			<File Path=".\Source\code\OsiBaseNew.h" Include="false"/>
			<File Path=".\IPTypes.h" Include="false"/>
			<File Path=".\lsl_st_tcp_user.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek GmbH &amp; Co KG" Author="schsas"/>
		<Dokumentation Revision="1.10" Date="2020-12-07" Author="fucher" Company="Sigmatek GmbH &amp; Co KG" Description="Added new function GetProperty."/>
		<Dokumentation Revision="1.9" Date="2019-09-23" Author="beiaur" Company="Sigmatek GmbH &amp; Co KG" Description="Added new function SetHostname"/>
		<Dokumentation Revision="1.8" Date="2017-03-01" Author="schsas" Company="Sigmatek GmbH &amp; Co KG" Description="Bestimmte Funktionspointer auf NULL prüfen (können bei LARS unbelegt sein)"/>
		<Dokumentation Revision="1.7" Date="2016-12-21" Author="schsas" Company="Sigmatek GmbH &amp; Co KG" Description="Added new function:&#13;&#10;Ping-Function (TCP_User)"/>
		<Dokumentation Revision="1.6" Date="2013-07-31" Author="kiltob" Company="Sigmatek GmbH &amp; Co KG" Description="Added new functions: ClearDNSHostCache, ClearDNSHostCacheTableEntry"/>
		<Dokumentation Revision="1.5" Date="2013-01-15" Author="kiltob" Company="Sigmatek GmbH &amp; Co KG" Description="Added new functions AddDNSServer, GetAllDNSServers, RemoveDNSServer, RemoveAllDNSServers, DeleteDNSServerByIdx"/>
	</RevDoku>
</Class>
*)
_IP : CLASS
	TYPE
	  LSL_IP_API : STRUCT
	    udVersion : UDINT;
	    udSize : UDINT;
	    SetIP : pVoid;
	    SetIPAddress : pVoid;
	    SetIPGateway : pVoid;
	    ConvertStrToBin : pVoid;
	    ConvertBinToStr : pVoid;
	    GetIPInfo : pVoid;
	    InstallChgEventCallback : pVoid;
	    CallChgEventCallback : pVoid;
	    SetPort : pVoid;
	    AddDNSServer : pVoid;
	    GetAllDNSServers : pVoid;
	    RemoveDNSServer : pVoid;
	    RemoveAllDNSServers : pVoid;
	    DeleteDNSServerByIdx : pVoid;
	    ClearDNSHostCache : pVoid;
	    ClearDNSHostCacheTableEntry : pVoid;
	    SetHostname : pVoid;
	    GetProperty : pVoid;
	  END_STRUCT;
	  LSLAPI_IP_PROPERTIES :  //! <Type Public="true" Comment="Properties of an ethernet interface." Name="LSLAPI_IP_PROPERTIES"/>
	  (
	    LSLAPI_IP_PROPERTY_RX_PACKETS:=1,  //! <Type Comment="Number of packets received." Name="LSLAPI_IP_PROPERTIES.LSLAPI_IP_PROPERTY_RX_PACKETS"/>
	    LSLAPI_IP_PROPERTY_RX_BROADCAST:=2,  //! <Type Comment="Number of broadcasts received." Name="LSLAPI_IP_PROPERTIES.LSLAPI_IP_PROPERTY_RX_BROADCAST"/>
	    LSLAPI_IP_PROPERTY_TX_PACKETS:=26,  //! <Type Comment="Number of packets sent." Name="LSLAPI_IP_PROPERTIES.LSLAPI_IP_PROPERTY_TX_PACKETS"/>
	    LSLAPI_IP_PROPERTY_TX_BROADCAST:=27  //! <Type Comment="Number of broadcasts sent." Name="LSLAPI_IP_PROPERTIES.LSLAPI_IP_PROPERTY_TX_BROADCAST"/>
	  )$UDINT;
	  OS_CLI : STRUCT
	    Set : pVoid;
	  END_STRUCT;
	END_TYPE
  //Servers:
	Server0 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION _IP
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment="This method can be used to set or change the current IP-Address, subnet mask or gateway address for a given ethernet interface.&#10;&#10;Requirements: &#10; * LasalOS Version 01.01.097 and higher for the following platforms (C-IPC, IPC, HGT831, CCL911 without CET281, VFS 111/113) &#10; * LasalOS Version 01.01.107 and higher for all platforms with an ethernet interface _IP Class Version 1.0 and higher" Name="SetIP"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SetIP
		VAR_INPUT
			InterfaceNumber 	: DINT;			//! <Variable Comment="The interface number of the ethernet interface for which the addresses should be set/changed." Name="SetIP.InterfaceNumber"/>
			Address 	: ^CHAR;			//! <Variable Comment="Pointer to a null-terminated string containing the IP-Address in dotted decimal format (e.g. &apos;10.10.116.10)." Name="SetIP.Address"/>
			SubnetMask 	: ^CHAR;			//! <Variable Comment="Pointer to a null-terminated string containing the subnet mask in dotted decimal format." Name="SetIP.SubnetMask"/>
			Gateway 	: ^CHAR;			//! <Variable Comment="Pointer to a null-terminated string containing the gateway in dotted decimal format." Name="SetIP.Gateway"/>
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: DINT;			//! <Variable Comment="Lasal OS version &lt; 01.01.107, 0 on success, &#10;      -1 if an error occurred &#10;Lasal OS version &gt;= 01.01.107 with _IP class &#10;      revision 1.0, 0 on success, -1 if an error &#10;      occurred. &#10;Lasal OS version &gt;= 01.01.107 with _IP class &#10;     revision &gt; 1.0, 0 on success, otherwise a &#10;     negative error value, see the _IP class comment for a &#10;     list of possible Error Codes." Name="SetIP.retcode"/>
		END_VAR;
				//! <Function Comment="This method can be used to set or change the current IP-Address and subnet mask for a given ethernet interface. &#10;&#10;Requirements: &#10;  LasalOS Version 01.01.107 or higher _IP Class Version 1.1 or higher" Name="SetIPAddress"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SetIPAddress
		VAR_INPUT
			udIPAddress 	: UDINT;			//! <Variable Comment="The IP address in 32-bit binary format (the method ConvertStrToBin can be used to convert an IP address from dotted string to binary format)" Name="SetIPAddress.udIPAddress"/>
			udSubnetMask 	: UDINT;			//! <Variable Comment="The subnet mask in 32-bit binary format" Name="SetIPAddress.udSubnetMask"/>
			dIfaceNum 	: DINT;			//! <Variable Comment="Interface number for the ethernet interface &#10;(1.. first, 2.. )" Name="SetIPAddress.dIfaceNum"/>
			udOption 	: UDINT;			//! <Variable Comment="Reserved for future use" Name="SetIPAddress.udOption"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see the _IP class comment for a list of possible Error Codes." Name="SetIPAddress.dRC"/>
		END_VAR;
				//! <Function Comment="This method can be used to set or change the gateway address for a given ethernet interface. &#10;&#10;Requirements: &#10;  LasalOS Version 01.01.107 or higher _IP Class Version 1.1 or higher" Name="SetIPGateway"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SetIPGateway
		VAR_INPUT
			udGatewayAddress 	: UDINT;			//! <Variable Comment="The gateay address in 32-bit binary format (the method ConvertStrToBin can be used to convert an IP address from dotted string to binary format)" Name="SetIPGateway.udGatewayAddress"/>
			dIfaceNum 	: DINT;			//! <Variable Comment="Interface number for the ethernet interface (1.. first, 2.. )" Name="SetIPGateway.dIfaceNum"/>
			udOption 	: UDINT;			//! <Variable Comment="Reserved for future use" Name="SetIPGateway.udOption"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see the _IP class comment for a list of possible Error Codes." Name="SetIPGateway.dRC"/>
		END_VAR;
				//! <Function Comment="This method converts an IP address in dotted string format to a 32-bit binary value.&#10;&#10;Requirements: &#10;  LasalOS Version 01.01.107 or higher _IP Class Version 1.1 or higher" Name="ConvertStrToBin"/>
	FUNCTION __CDECL VIRTUAL GLOBAL ConvertStrToBin
		VAR_INPUT
			strAddress 	: ^CHAR;			//! <Variable Comment="The IP address in dotted string format" Name="ConvertStrToBin.strAddress"/>
			pIPAddress 	: ^UDINT;			//! <Variable Comment="Pointer to an UDINT value to receive the IP address in 32-bit binary format" Name="ConvertStrToBin.pIPAddress"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see the _IP class comment for a list of possible Error Codes." Name="ConvertStrToBin.dRC"/>
		END_VAR;
				//! <Function Comment="This method converts an IP address in a 32-bit binary value to a dotted string format. &#10;&#10;Requirements: &#10;  LasalOS Version 01.01.127 or higher _IP Class Version 1.2 or higher" Name="ConvertBinToStr"/>
	FUNCTION __CDECL VIRTUAL GLOBAL ConvertBinToStr
		VAR_INPUT
			strAddress 	: ^CHAR;			//! <Variable Comment="Pointer to a buffer to receive the IP address in dotted string format" Name="ConvertBinToStr.strAddress"/>
			strAddressLen 	: UDINT;			//! <Variable Comment="Size of the buffer pointed to by strAddress. Must be at least 16 byte." Name="ConvertBinToStr.strAddressLen"/>
			IPAddress 	: UDINT;			//! <Variable Comment="The IP address as a 32-bit binary value." Name="ConvertBinToStr.IPAddress"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see _IP class comment for a list of possible Error Codes." Name="ConvertBinToStr.dRC"/>
		END_VAR;
				//! <Function Comment="This method can be used to receive some information of the current configuration of an ethernet interface. &#10;&#10;Requirements: &#10;  LasalOS Version 01.01.127 or higher _IP Class Version 1.2 or higher" Name="GetIPInfo"/>
	FUNCTION __CDECL VIRTUAL GLOBAL GetIPInfo
		VAR_INPUT
			dIface 	: DINT;			//! <Variable Comment="The number of ethernet interface. &#10;1 .. first, 2 .. second, ..." Name="GetIPInfo.dIface"/>
			dOption 	: DINT;			//! <Variable Comment="Specifies the information to receive. &#10;&#10;Available options and type of pValue: &#10; * IPAPI_OPT_ADDR IP: &#10;       pValue: Address as a 32-bit binary value   (OS Version: &gt;= 01.01.004) &#10; * IPAPI_OPT_SUBNETMASK:&#10;       pValue: Subnet Mask as a 32-bit binray value   (OS Version: &gt;= 01.01.004) &#10; * IPAPI_OPT_ETHERNET_ADDR: &#10;       pValue: The start address of memory area where the ethernet address is located.   (OS Version &gt;= 01.01.021) &#10; * IPAPI_OPT_GATEWAY: &#10;       pValue: Gateway Address as a 32-bit binary value   (OS Version &gt;= 01.01.127)" Name="GetIPInfo.dOption"/>
			pValue 	: ^UDINT;			//! <Variable Comment="Pointer to a variable to receive the information specifies by dOption" Name="GetIPInfo.pValue"/>
			addOpt 	: UDINT;			//! <Variable Comment="Reserved." Name="GetIPInfo.addOpt"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see _IP class comment for a list of possible Error Codes." Name="GetIPInfo.dRC"/>
		END_VAR;
				//! <Function Comment="Here you can specify a callback method. This method is called from the os if some changes occur. The following changes are propagated to the callback:&#13;&#10;&#13;&#10;#define IPAPI_CHG_ID_IP            1&#13;&#10;#define IPAPI_CHG_ID_GW_ADD        2&#13;&#10;#define IPAPI_CHG_ID_GW_REMOVE     3&#13;&#10;#define IPAPI_CHG_ID_ROUTE_ADD     4&#13;&#10;#define IPAPI_CHG_ID_ROUTE_REMOVE  5" Name="InstallChgEventCallback"/>
	FUNCTION __CDECL VIRTUAL GLOBAL InstallChgEventCallback
		VAR_INPUT
			pfChgEventCallback 	: pVoid;
			pThis 	: pVoid;
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;
		END_VAR;
				//! <Function Comment="This method can be used to set or change the current IP-Port for a given ethernet interface. Requirements: LasalOS Version 01.02.63 or higher _IP Class Version 1.4 or higher" Name="SetPort"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SetPort
		VAR_INPUT
			uiPort 	: UINT;			//! <Variable Comment="A new port number. Ensure the port is not used by another service." Name="SetPort.uiPort"/>
			dIfaceNum 	: DINT;			//! <Variable Comment="Interface number for the ethernet interface (1.. first, 2.. )" Name="SetPort.dIfaceNum"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="0 on success, otherwise a negative error value, see the _IP class comment for a list of possible Error Codes." Name="SetPort.dRC"/>
		END_VAR;
				//! <Function Comment="This method adds a new dns Server to the list. You can add max. 5 servers to the system list. Return codes are defined in IPTypes.h" Name="AddDNSServer"/>
	FUNCTION __CDECL VIRTUAL GLOBAL AddDNSServer
		VAR_INPUT
			DNSServer 	: ^UDINT;			//! <Variable Comment="Pointer of unsigned int (32BIT) which holds the ip address of the dns server." Name="AddDNSServer.DNSServer"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="Returncode from function which is listed in IPTypes.h" Name="AddDNSServer.dRC"/>
		END_VAR;
				//! <Function Comment="This method returns all dns servers from the ip stack. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;LasalOS Version 01.02.220 or higher _IP Class Version 1.5 or higher" Name="GetAllDNSServers"/>
	FUNCTION __CDECL VIRTUAL GLOBAL GetAllDNSServers
		VAR_INPUT
			DNSServers 	: ^UDINT;			//! <Variable Comment="Pointer to an array which can at least 5 DNS servers (5x32Bit)." Name="GetAllDNSServers.DNSServers"/>
			len 	: UDINT;			//! <Variable Comment="Length of the array in bytes" Name="GetAllDNSServers.len"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="Returncode from function which is listed in IPTypes.h" Name="GetAllDNSServers.dRC"/>
		END_VAR;
				//! <Function Comment="This method removes a given dns server from the system list. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;LasalOS Version 01.02.220 or higher _IP Class Version 1.5 or higher" Name="RemoveDNSServer"/>
	FUNCTION __CDECL VIRTUAL GLOBAL RemoveDNSServer
		VAR_INPUT
			DNSServer 	: ^UDINT;			//! <Variable Comment="Pointer to memory which holds the dns server address. This address will be removed from list if exist." Name="RemoveDNSServer.DNSServer"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="Returncode from function which is listed in IPTypes.h" Name="RemoveDNSServer.dRC"/>
		END_VAR;
				//! <Function Comment="This method clears the whole dns system list. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;LasalOS Version 01.02.220 or higher _IP Class Version 1.5 or higher" Name="RemoveAllDNSServers"/>
	FUNCTION __CDECL VIRTUAL GLOBAL RemoveAllDNSServers
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="Returncode from function which is listed in IPTypes.h" Name="RemoveAllDNSServers.dRC"/>
		END_VAR;
				//! <Function Comment="This method deletes a dns server specified by an index. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;LasalOS Version 01.02.220 or higher _IP Class Version 1.5 or higher" Name="DeleteDNSServerByIdx"/>
	FUNCTION __CDECL VIRTUAL GLOBAL DeleteDNSServerByIdx
		VAR_INPUT
			Idx 	: UDINT;			//! <Variable Comment="Specifies the index of a dns server to be deleted" Name="DeleteDNSServerByIdx.Idx"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="Returncode from function which is listed in IPTypes.h" Name="DeleteDNSServerByIdx.dRC"/>
		END_VAR;
				//! <Function Comment="This function clear the complete DNS hostcache. It is useful if you are working with Dynamic DNS domains (e.g. dyndns.org)." Name="ClearDNSHostCache"/>
	FUNCTION __CDECL VIRTUAL GLOBAL ClearDNSHostCache
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="129 - Not initialized&#13;&#10;0 - everything else" Name="ClearDNSHostCache.dRC"/>
		END_VAR;
				//! <Function Comment="This function clears only 1 entry from the DNS cache." Name="ClearDNSHostCacheTableEntry"/>
	FUNCTION __CDECL VIRTUAL GLOBAL ClearDNSHostCacheTableEntry
		VAR_INPUT
			TableEntry 	: ^CHAR;			//! <Variable Comment="Name of the Hosts, which shall be deleted" Name="ClearDNSHostCacheTableEntry.TableEntry"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="129 - Not initialized&#13;&#10;0 - everything else" Name="ClearDNSHostCacheTableEntry.dRC"/>
		END_VAR;
				//! <Function Comment="This function sends a ping request." Name="Ping"/>
	FUNCTION __CDECL VIRTUAL GLOBAL Ping
		VAR_INPUT
			ipaddr 	: ^CHAR;			//! <Variable Comment="IP-Address as String" Name="Ping.ipaddr"/>
			bytes 	: UDINT;			//! <Variable Comment="Count of additional data" Name="Ping.bytes"/>
			ttl 	: UDINT;			//! <Variable Comment="TTL - Time To Live of IPv4-Header" Name="Ping.ttl"/>
			wait 	: UDINT;			//! <Variable Comment="Timeout for Ping" Name="Ping.wait"/>
		END_VAR
		VAR_OUTPUT
			retval (EAX) 	: DINT;			//! <Variable Comment="TCP-User Return-Code" Name="Ping.retval"/>
		END_VAR;
				//! <Function Comment="This method can be used to set or change the current Hostname. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;CIL Version 7 or higher _IP Class Version 1.9 or higher" Name="SetHostname"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SetHostname
		VAR_INPUT
			hostname 	: ^CHAR;			//! <Variable Comment="Hostname as String" Name="SetHostname.hostname"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="returns:&#13;&#10;0 - finished correctly&#13;&#10;-1100 - invalid name&#13;&#10;-1101 - name too long&#13;&#10;-1102 - not enough capabilities&#13;&#10;-1103 - other" Name="SetHostname.dRC"/>
		END_VAR;
				//! <Function Comment="This method can be used to read properties of an ethernet interface. Return codes are defined in IPTypes.h&#13;&#10;&#13;&#10;Requirements:&#13;&#10;CIL Version 8 or higher _IP Class Version 1.10 or higher." Name="GetProperty"/>
	FUNCTION __CDECL VIRTUAL GLOBAL GetProperty
		VAR_INPUT
			dIfaceNum 	: DINT;			//! <Variable Comment="Interface number of the ethernet interface &#10;(1.. first, 2.. )." Name="GetProperty.dIfaceNum"/>
			property 	: LSLAPI_IP_PROPERTIES;			//! <Variable Comment="The property to be read." Name="GetProperty.property"/>
			pPropertyValue 	: ^void;			//! <Variable Comment="Pointer to a buffer in which the value of the property is written." Name="GetProperty.pPropertyValue"/>
			len 	: DINT;			//! <Variable Comment="The length of the buffer to which &lt;pPropertyValue&gt; points in Byte.&#13;&#10;All four properties above expect a buffer that can contain exactly one UINT64_t (8 bytes)." Name="GetProperty.len"/>
		END_VAR
		VAR_OUTPUT
			dRC (EAX) 	: DINT;			//! <Variable Comment="   0: no error.&#13;&#10;  -1: operating system too old, function not available.&#13;&#10;&lt;&gt; 0: other errors. See IPTypes.h." Name="GetProperty.dRC"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _IP::@CT_
0$UINT,
2#0100000000001000$UINT, //TY__IP
1$UINT, 10$UINT, (SIZEOF(::_IP))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3530626343), "_IP", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_IP.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
//Clients:
END_FUNCTION


#define USER_CNT__IP 18

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__IP] OF ^Void;
	END_STRUCT;
END_TYPE



//{{LSL_IMPLEMENTATION


//*********************Inserted from <.\OS Interface\code\_IP_00_00.st>*********************



 



#include <Rtos_interfaces.h> // we need this for the SysCIL functions
#include "..\..\Source\code\OsiBaseNew.h"

#pragma warning (disable:73)

FUNCTION __CDECL SetIPDummy
VAR_INPUT
  dIfNum      : DINT;
	cAddr       : ^CHAR;
	cSubnetMask	: ^CHAR;
	cGateway    : ^CHAR;
END_VAR
VAR_OUTPUT
	dRC				: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL SetIPAddressDummy
VAR_INPUT
	udIPAddress		: UDINT;
	udSubnetMask	: UDINT;
	dIfaceNum		: DINT;
	udOption		: UDINT;
END_VAR
VAR_OUTPUT
	dRC				: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL SetIPGatewayDummy
VAR_INPUT
	udGateayAddress	: UDINT;
	dIfaceNum		: DINT;
	udOption		: UDINT;
END_VAR
VAR_OUTPUT
	dRC				: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL ConvertStrToBinDummy
VAR_INPUT
	strAddress		: ^CHAR;
	pIPAddress		: ^UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL GetIPInfoDummy
VAR_INPUT
	dIface		: DINT;
	dOption		: DINT;
	pValue      :^UDINT;
	addOpt      : UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL ConvertBinToStrDummy
VAR_INPUT
	strAddress      :^CHAR;
	strAddressLen   : UDINT;
	IPAddress       : UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL InstallChgEventCallbackDummy
VAR_INPUT
	pfChgEventCallback		: pVoid;
	pThis		: pVoid;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION
FUNCTION __CDECL SetIPPortDummy
VAR_INPUT
	uiPort		: UINT;
	dIfaceNum		: DINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL AddDNSServerDummy
VAR_INPUT
	DNSServer		: ^UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL GetAllDNSServersDummy
VAR_INPUT
	DNSServers		: ^UDINT;
  BufferLen     : UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL RemoveDNSServerDummy
VAR_INPUT
	DNSServer		: ^UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL RemoveAllDNSServersDummy
VAR_INPUT

END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL DeleteDNSServerByIdxDummy
VAR_INPUT
	DNSServerIdx		: UDINT;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL ClearDNSHostCacheDummy
VAR_INPUT

END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL ClearDNSHostCacheTableEntryDummy
VAR_INPUT
  TableEntry  :^CHAR;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

// below LSL_TCP_USER version 6
FUNCTION GLOBAL __cdecl PingDummy
VAR_INPUT
    ipaddr      : ^CHAR;
    bytes       : UDINT;
    ttl         : UDINT;
    wait        : UDINT;
END_VAR
VAR_OUTPUT
    dRC         : DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

FUNCTION __CDECL SetHostnameDummy
VAR_INPUT
	hostname	: ^CHAR;
END_VAR
VAR_OUTPUT
	dRC		: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1
  
END_FUNCTION

FUNCTION __CDECL GetPropertyDummy
VAR_INPUT
  dIfaceNum       : DINT;
	property        : DINT;
	pPropertyValue  : ^void;
	len             : DINT;
END_VAR
VAR_OUTPUT
	dRC				: DINT;
END_VAR

	dRC := IPAPI_ERR_OSI_FNC; // -1

END_FUNCTION

#pragma warning (default:73)

FUNCTION  _IP::_IP
VAR_OUTPUT
  ret_code		: CONFSTATES;
END_VAR
VAR
  pCLI   			:^OS_CLI;
  pLSL_IP_API		:^LSL_IP_API;
  pLSL_TCP_USER :^LSL_TCP_USER;
  aMeths			: ARRAY[0..USER_CNT__IP] OF ^void;
  rc    			: SYS_ERROR;
END_VAR;

  // get the LSL_IP_API Interface
  rc := OS_CILGet("LSL_IP_API", #pLSL_IP_API);
  if (rc <> SYS_ERR_NONE) then

    // if not available, try to get the LSLCLI_4LASAL Interface to make the SetIP Method available
    rc := OS_CILGet("LSLCLI_4LASAL", #pCLI);
    if (rc <> SYS_ERR_NONE) then

    TRACE("ERROR: CLI-Interface not available with this version/platform!");
    ret_code	:= C_UNKNOWN_CONSTR;

    else

    aMeths[0] := pCLI^.Set;
    aMeths[1] := #SetIPAddressDummy();
    aMeths[2] := #SetIPGatewayDummy();
    aMeths[3] := #ConvertStrToBinDummy();

    // Bei neuer Version, hier die Dummy-Funktionen...
    aMeths[4] := #ConvertBinToStrDummy();
    aMeths[5] := #GetIPInfoDummy();

    ret_code  := InitOsiM_new(#aMeths[0]$void, USER_CNT__IP);

    end_if;

  else

    // LSL_IP_API Interface Version 1, if LSL_IP_API is available, the Version is at least 1
    
    if pLSL_IP_API^.SetIP then
      aMeths[0] := pLSL_IP_API^.SetIP;
    else
      aMeths[0] := #SetIPDummy();
    end_if;

    if pLSL_IP_API^.SetIPAddress then
      aMeths[1] := pLSL_IP_API^.SetIPAddress;  
    else
      aMeths[1] := #SetIPAddressDummy();    
    end_if;

    if pLSL_IP_API^.SetIPGateway then
      aMeths[2] := pLSL_IP_API^.SetIPGateway;  
    else
      aMeths[2] := #SetIPGatewayDummy();
    end_if;

    aMeths[3] := pLSL_IP_API^.ConvertStrToBin;

    // LSL_IP_API Interface Version 2, Operating system version >= 01.01.127
    if (pLSL_IP_API^.udVersion > 1) then
      aMeths[4] := pLSL_IP_API^.ConvertBinToStr;
      aMeths[5] := pLSL_IP_API^.GetIPInfo;
    else
      aMeths[4] := #ConvertBinToStrDummy();
      aMeths[5] := #GetIPInfoDummy();
    end_if;

    // LSL_IP_API Interface Version 3
    if (pLSL_IP_API^.udVersion > 2) then
      aMeths[6] := pLSL_IP_API^.InstallChgEventCallback;
    else
      aMeths[6] := #InstallChgEventCallbackDummy();
    end_if;

    // LSL_IP_API Interface Version 4
    if (pLSL_IP_API^.udVersion > 3) then
      aMeths[7] := pLSL_IP_API^.SetPort;
    else
      aMeths[7] := #SetIPPortDummy();
    end_if;

    // LSL_IP_API Interface Version 5
    if (pLSL_IP_API^.udVersion > 4 &
        pLSL_IP_API^.AddDNSServer &
        pLSL_IP_API^.GetAllDNSServers &
        pLSL_IP_API^.RemoveDNSServer &
        pLSL_IP_API^.RemoveAllDNSServers &
        pLSL_IP_API^.DeleteDNSServerByIdx ) then
      aMeths[8]     := pLSL_IP_API^.AddDNSServer;
      aMeths[9]     := pLSL_IP_API^.GetAllDNSServers;
      aMeths[10]    := pLSL_IP_API^.RemoveDNSServer;
      aMeths[11]    := pLSL_IP_API^.RemoveAllDNSServers;
      aMeths[12]    := pLSL_IP_API^.DeleteDNSServerByIdx;
    else
      aMeths[8]     := #AddDNSServerDummy();
      aMeths[9]     := #GetAllDNSServersDummy();
      aMeths[10]    := #RemoveDNSServerDummy();
      aMeths[11]    := #RemoveAllDNSServersDummy();
      aMeths[12]    := #DeleteDNSServerByIdxDummy();
    end_if;
    
    // LSL_IP_API Interface Version 6
    if (pLSL_IP_API^.udVersion > 5 &
        pLSL_IP_API^.ClearDNSHostCache &
        pLSL_IP_API^.ClearDNSHostCacheTableEntry ) then
      aMeths[13]     := pLSL_IP_API^.ClearDNSHostCache;
      aMeths[14]     := pLSL_IP_API^.ClearDNSHostCacheTableEntry;
    else
      aMeths[13]     := #ClearDNSHostCacheDummy();
      aMeths[14]     := #ClearDNSHostCacheTableEntryDummy();
    end_if;
    
      // get the LSL_TCP_User Interface
    rc := OS_CILGet("TCP_USER", #pLSL_TCP_USER);
    if (rc <> SYS_ERR_NONE) then
      aMeths[15]     := #PingDummy();
    else
      if pLSL_TCP_USER^.udVersion > 5 then
        aMeths[15]   := pLSL_TCP_USER^.tcp_user_ping;    
        
        
      else
        aMeths[15]   := #PingDummy();      
      end_if;
    end_if;
    
    // LSL_IP_API Interface Version 7
    if (pLSL_IP_API^.udVersion > 6 &
        _RtOSVersion >= 16#938D    &
        pLSL_IP_API^.SetHostname) then
      aMeths[16]     := pLSL_IP_API^.SetHostname;
    else
      aMeths[16]     := #SetHostnameDummy();
    end_if;

    // LSL_IP_API Interface Version 8
    if (pLSL_IP_API^.udVersion > 7 &
        pLSL_IP_API^.GetProperty) then
      aMeths[17]     := pLSL_IP_API^.GetProperty;
    else
      aMeths[17]     := #GetPropertyDummy();
    end_if;

    ret_code  := InitOsiM_new(#aMeths[0]$void, USER_CNT__IP);

  end_if;

END_FUNCTION //  _IP::_IP
