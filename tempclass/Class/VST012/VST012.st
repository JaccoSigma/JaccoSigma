//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define VST012_DEVICE_ID              1193
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "VST012"
	Revision           = "1.33"
	GUID               = "{10E03AE6-6417-470D-B2A2-DDEF9D72E1EB}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Varan_16x16.ico"
	SharedCommandTable = "true"
	Objectsize         = "(924,120)"
	Comment            = "The VST 012 is a VARAN module designed for the&#13;&#10;control of a stepper motor up to a maximum 10.0 A.&#13;&#10;The available operating modes are full step, half&#13;&#10;step and micro step. The maximum switching&#13;&#10;frequency of the output stage is 50 kHz.">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="LanSte"/>
		<Dokumentation Revision="1.33" Date="07.04.2020" Author="EisMic" Company="Sigmatek" Description="Changed comment of client &quot;UserAction&quot; in Varan_Base class."/>
		<Dokumentation Revision="1.32" Date="09.12.2019" Author="LanSte" Company="Sigmatek" Description="Added Server ProtocolVersion. InterframeGap is included in the resource calculation."/>
		<Dokumentation Revision="1.31" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated."/>
		<Dokumentation Revision="1.30" Date="16.01.2018" Author="LanSte" Company="Sigmatek" Description="Added PostInit Support."/>
		<Dokumentation Revision="1.29" Date="19.09.2017" Author="LanSte" Company="Sigmatek" Description="Fixed Access Exception when using PayloadFrame/DMA. Error only occurred in revision 1.28."/>
		<Dokumentation Revision="1.28" Date="13.12.2016" Author="PieSte" Company="Sigmatek" Description="Changed &quot;Online&quot; server behavior to set online first if cyclic data is valid due to SA35740."/>
		<Dokumentation Revision="1.27" Date="10.05.2016" Author="RamAnd" Company="Sigmatek" Description="Suppressed warning that would occur with target ARM on compiler version 30 or higher."/>
		<Dokumentation Revision="1.26" Date="15.05.2015" Author="EisMic" Company="Sigmatek" Description="Added ifdef IsTransparent_IS_AVAILABLE at call of IsTransparent in initialisation method."/>
		<Dokumentation Revision="1.25" Date="16.04.2015" Author="PieSte&#13;&#10;LanSte" Company="Sigmatek" Description="Added support for visualisation in graphical hardware editor.&#13;&#10;Added support for calculating resources for graphical hardware editor."/>
		<Dokumentation Revision="1.24" Date="24.03.2015" Author="EisMic" Company="Sigmatek" Description="Check pointer p_NodeInfo for validity in method GetRetryTimeout due to access exception error if method Varan_HWDisconnect is called and no hardware was available."/>
		<Dokumentation Revision="1.23" Date="25.07.2014" Author="LanSte" Company="Sigmatek" Description="Added Support for reading hardware diagnose and hardwaretree entry."/>
		<Dokumentation Revision="1.22" Date="06.05.2014" Author="LanSte" Company="Sigmatek" Description="Improved Transparent property description in HW-Tree and activated greying out of the object in the HW-Tree.&#13;&#10;Minimized the interface request via CILGET by useing private pointers to reduce time in init."/>
		<Dokumentation Revision="1.21" Date="07.04.2014" Author="EisMic" Company="Sigmatek" Description="Called SetDOsOff in method Varan_HWInterrupt."/>
		<Dokumentation Revision="1.20" Date="12.02.2014" Author="PieSte" Company="Sigmatek" Description="Add Required client in HWEditor"/>
		<Dokumentation Revision="1.10" Date="04.12.2013" Author="ObeChr&#13;&#10;LanSte" Company="Sigmatek" Description="Following Server are now retentive in File: MaxCurrent, StallCurrentReduction&#13;&#10;Added Payload Support"/>
		<Dokumentation Revision="1.0" Date="15.02.2013" Author="LanSte" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="VST012">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A169B35B-E88C-471E-8114-20F0B7587E4B}"
				Class      = "VST011"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ActPosition"/>
					<Server Name="BlankingTime" Value="10"/>
					<Server Name="ChopperOffTime" Value="200"/>
					<Server Name="ControlWord"/>
					<Server Name="CurrentIncrease" Value="1"/>
					<Server Name="DeviceAddress"/>
					<Server Name="DeviceID"/>
					<Server Name="Enable"/>
					<Server Name="EncoderPosition"/>
					<Server Name="Error"/>
					<Server Name="ErrorQuit"/>
					<Server Name="ExternalEnable"/>
					<Server Name="FastDecayTime" Value="120"/>
					<Server Name="FrequencyBandwidth" Value="0"/>
					<Server Name="FrequencyLimit1" Value="140000"/>
					<Server Name="FrequencyLimit16" Value="16#FFFF_FFFF"/>
					<Server Name="FrequencyLimit2" Value="80000"/>
					<Server Name="FrequencyLimit32" Value="0"/>
					<Server Name="FrequencyLimit4" Value="16#FFFF_FFFF"/>
					<Server Name="FrequencyLimit8" Value="30000"/>
					<Server Name="HWEnableSoftwareRampdown"/>
					<Server Name="HWError"/>
					<Server Name="HWRampdownDeltaFrequency" Value="40"/>
					<Server Name="HWRampdownDeltaTime" Value="1"/>
					<Server Name="Input1"/>
					<Server Name="Input1LatchedFalling"/>
					<Server Name="Input1LatchedRising"/>
					<Server Name="Input2"/>
					<Server Name="Input2LatchedFalling"/>
					<Server Name="Input2LatchedRising"/>
					<Server Name="Input3"/>
					<Server Name="Input4"/>
					<Server Name="LatchPositionEncoderZeroPulse"/>
					<Server Name="LatchPositionInput1Falling"/>
					<Server Name="LatchPositionInput1Rising"/>
					<Server Name="LatchPositionInput2Falling"/>
					<Server Name="LatchPositionInput2Rising"/>
					<Server Name="MaxCurrent"/>
					<Server Name="Online"/>
					<Server Name="Output1"/>
					<Server Name="Output2"/>
					<Server Name="Output3"/>
					<Server Name="Output4"/>
					<Server Name="ProtocolVersion"/>
					<Server Name="Release"/>
					<Server Name="RetryCounter"/>
					<Server Name="SerialNo"/>
					<Server Name="SetFreqOut"/>
					<Server Name="StallCurrentReduction" Value="0"/>
					<Server Name="State"/>
					<Server Name="StateWord"/>
					<Server Name="ValidateSerNo"/>
					<Server Name="VaranOut_1"/>
					<Server Name="VendorID"/>
					<Server Name="ZeroPulse_latched"/>
					<Client Name="EncoderSampling" Value="3"/>
					<Client Name="InvertEncoder" Value="0"/>
					<Client Name="InvertZeroPosition" Value="0"/>
					<Client Name="LatchedValueInput1Falling"/>
					<Client Name="LatchedValueInput1Rising"/>
					<Client Name="LatchedValueInput2Falling"/>
					<Client Name="LatchedValueInput2Rising"/>
					<Client Name="LatchedValueZeroPosition"/>
					<Client Name="LatchType" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SerNoValidation"/>
					<Client Name="Transparent" Value="0"/>
					<Client Name="UserAction"/>
					<Client Name="VaranIn"/>
					<Parameter KeyName="CableLength"/>
				</Channels>
				<AdditionalData>
					<Entry Name="DeviceType" Value="VST011"/>
				</AdditionalData>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.State" Destination="_base.State" Vertices="(1330,210),(1158,210),"/>
			<Connection Source="this.Online" Destination="_base.Online" Vertices="(1330,270),(1158,270),"/>
			<Connection Source="this.Release" Destination="_base.Release" Vertices="(1330,330),(1158,330),"/>
			<Connection Source="this.DeviceAddress" Destination="_base.DeviceAddress" Vertices="(1330,390),(1158,390),"/>
			<Connection Source="this.VendorID" Destination="_base.VendorID" Vertices="(1330,450),(1158,450),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(1330,510),(1158,510),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(1330,570),(1158,570),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(1330,630),(1158,630),"/>
			<Connection Source="this.ValidateSerNo" Destination="_base.ValidateSerNo" Vertices="(1330,690),(1158,690),"/>
			<Connection Source="this.ActPosition" Destination="_base.ActPosition" Vertices="(1330,810),(1158,810),"/>
			<Connection Source="this.SetFreqOut" Destination="_base.SetFreqOut" Vertices="(1330,870),(1158,870),"/>
			<Connection Source="this.MaxCurrent" Destination="_base.MaxCurrent" Vertices="(1330,930),(1158,930),"/>
			<Connection Source="this.StallCurrentReduction" Destination="_base.StallCurrentReduction" Vertices="(1330,990),(1158,990),"/>
			<Connection Source="this.StateWord" Destination="_base.StateWord" Vertices="(1330,1050),(1158,1050),"/>
			<Connection Source="this.ControlWord" Destination="_base.ControlWord" Vertices="(1330,1110),(1158,1110),"/>
			<Connection Source="this.Enable" Destination="_base.Enable" Vertices="(1330,1170),(1158,1170),"/>
			<Connection Source="this.CurrentIncrease" Destination="_base.CurrentIncrease" Vertices="(1330,1230),(1158,1230),"/>
			<Connection Source="this.Error" Destination="_base.Error" Vertices="(1330,1290),(1158,1290),"/>
			<Connection Source="this.ErrorQuit" Destination="_base.ErrorQuit" Vertices="(1330,1350),(1158,1350),"/>
			<Connection Source="this.ZeroPulse_latched" Destination="_base.ZeroPulse_latched" Vertices="(1330,1410),(1158,1410),"/>
			<Connection Source="this.ExternalEnable" Destination="_base.ExternalEnable" Vertices="(1330,1470),(1158,1470),"/>
			<Connection Source="this.HWError" Destination="_base.HWError" Vertices="(1330,1530),(1158,1530),"/>
			<Connection Source="this.HWEnableSoftwareRampdown" Destination="_base.HWEnableSoftwareRampdown" Vertices="(1330,1590),(1158,1590),"/>
			<Connection Source="this.Input1" Destination="_base.Input1" Vertices="(1330,1650),(1158,1650),"/>
			<Connection Source="this.Input1LatchedRising" Destination="_base.Input1LatchedRising" Vertices="(1330,1710),(1158,1710),"/>
			<Connection Source="this.Input1LatchedFalling" Destination="_base.Input1LatchedFalling" Vertices="(1330,1770),(1158,1770),"/>
			<Connection Source="this.Input2" Destination="_base.Input2" Vertices="(1330,1830),(1158,1830),"/>
			<Connection Source="this.Input2LatchedRising" Destination="_base.Input2LatchedRising" Vertices="(1330,1890),(1158,1890),"/>
			<Connection Source="this.Input2LatchedFalling" Destination="_base.Input2LatchedFalling" Vertices="(1330,1950),(1158,1950),"/>
			<Connection Source="this.Input3" Destination="_base.Input3" Vertices="(1330,2010),(1158,2010),"/>
			<Connection Source="this.Input4" Destination="_base.Input4" Vertices="(1330,2070),(1158,2070),"/>
			<Connection Source="this.Output1" Destination="_base.Output1" Vertices="(1330,2130),(1158,2130),"/>
			<Connection Source="this.Output2" Destination="_base.Output2" Vertices="(1330,2190),(1158,2190),"/>
			<Connection Source="this.Output3" Destination="_base.Output3" Vertices="(1330,2250),(1158,2250),"/>
			<Connection Source="this.Output4" Destination="_base.Output4" Vertices="(1330,2310),(1158,2310),"/>
			<Connection Source="this.EncoderPosition" Destination="_base.EncoderPosition" Vertices="(1330,2370),(1158,2370),"/>
			<Connection Source="this.LatchPositionEncoderZeroPulse" Destination="_base.LatchPositionEncoderZeroPulse" Vertices="(1330,2430),(1158,2430),"/>
			<Connection Source="this.LatchPositionInput1Rising" Destination="_base.LatchPositionInput1Rising" Vertices="(1330,2490),(1158,2490),"/>
			<Connection Source="this.LatchPositionInput1Falling" Destination="_base.LatchPositionInput1Falling" Vertices="(1330,2550),(1158,2550),"/>
			<Connection Source="this.LatchPositionInput2Rising" Destination="_base.LatchPositionInput2Rising" Vertices="(1330,2610),(1158,2610),"/>
			<Connection Source="this.LatchPositionInput2Falling" Destination="_base.LatchPositionInput2Falling" Vertices="(1330,2670),(1158,2670),"/>
			<Connection Source="this.ChopperOffTime" Destination="_base.ChopperOffTime" Vertices="(1330,2730),(1158,2730),"/>
			<Connection Source="this.BlankingTime" Destination="_base.BlankingTime" Vertices="(1330,2790),(1158,2790),"/>
			<Connection Source="this.FastDecayTime" Destination="_base.FastDecayTime" Vertices="(1330,2850),(1158,2850),"/>
			<Connection Source="this.FrequencyLimit1" Destination="_base.FrequencyLimit1" Vertices="(1330,2910),(1158,2910),"/>
			<Connection Source="this.FrequencyLimit2" Destination="_base.FrequencyLimit2" Vertices="(1330,2970),(1158,2970),"/>
			<Connection Source="this.FrequencyLimit4" Destination="_base.FrequencyLimit4" Vertices="(1330,3030),(1158,3030),"/>
			<Connection Source="this.FrequencyLimit8" Destination="_base.FrequencyLimit8" Vertices="(1330,3090),(1158,3090),"/>
			<Connection Source="this.FrequencyLimit16" Destination="_base.FrequencyLimit16" Vertices="(1330,3150),(1158,3150),"/>
			<Connection Source="this.FrequencyLimit32" Destination="_base.FrequencyLimit32" Vertices="(1330,3210),(1158,3210),"/>
			<Connection Source="this.FrequencyBandwidth" Destination="_base.FrequencyBandwidth" Vertices="(1330,3270),(1158,3270),"/>
			<Connection Source="this.HWRampdownDeltaFrequency" Destination="_base.HWRampdownDeltaFrequency" Vertices="(1330,3330),(1158,3330),"/>
			<Connection Source="this.HWRampdownDeltaTime" Destination="_base.HWRampdownDeltaTime" Vertices="(1330,3390),(1158,3390),"/>
			<Connection Source="this.VaranOut_1" Destination="_base.VaranOut_1" Vertices="(1330,3450),(1158,3450),"/>
			<Connection Source="_base.VaranIn" Destination="this.VaranIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.UserAction" Destination="this.UserAction" Vertices="(218,330),(38,330),"/>
			<Connection Source="_base.SerNoValidation" Destination="this.SerNoValidation" Vertices="(218,390),(38,390),"/>
			<Connection Source="_base.Transparent" Destination="this.Transparent" Vertices="(218,450),(38,450),"/>
			<Connection Source="_base.InvertEncoder" Destination="this.InvertEncoder" Vertices="(218,510),(38,510),"/>
			<Connection Source="_base.InvertZeroPosition" Destination="this.InvertZeroPosition" Vertices="(218,570),(38,570),"/>
			<Connection Source="_base.EncoderSampling" Destination="this.EncoderSampling" Vertices="(218,630),(38,630),"/>
			<Connection Source="_base.LatchType" Destination="this.LatchType" Vertices="(218,690),(38,690),"/>
			<Connection Source="_base.LatchedValueZeroPosition" Destination="this.LatchedValueZeroPosition" Vertices="(218,750),(38,750),"/>
			<Connection Source="_base.LatchedValueInput1Rising" Destination="this.LatchedValueInput1Rising" Vertices="(218,810),(38,810),"/>
			<Connection Source="_base.LatchedValueInput1Falling" Destination="this.LatchedValueInput1Falling" Vertices="(218,870),(38,870),"/>
			<Connection Source="_base.LatchedValueInput2Rising" Destination="this.LatchedValueInput2Rising" Vertices="(218,930),(38,930),"/>
			<Connection Source="_base.LatchedValueInput2Falling" Destination="this.LatchedValueInput2Falling" Vertices="(218,990),(38,990),"/>
			<Connection Source="this.ProtocolVersion" Destination="_base.ProtocolVersion" Vertices="(1330,750),(1158,750),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using VST011

VST012 : CLASS
: VST011
  //Servers:
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="Check if DeviceID is supported by class" Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			ID2Check 	: UDINT;			//! <Variable Comment="VARAN DeviceID, which should be checked" Name="CheckDeviceID.ID2Check"/>
		END_VAR
		VAR_OUTPUT
			IsOK 	: BOOL;			//! <Variable Comment="TRUE...DeviceID is ok with this class&#13;&#10;FALSE..DeviceID is not ok with this class" Name="CheckDeviceID.IsOK"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB VST012::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_VST012
1$UINT, 33$UINT, (SIZEOF(::VST012))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2049496069), "VST012", //Class
TO_UDINT(3810624959), "VST011", 1$UINT, 53$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_VST012 48

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_VST012] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION VST012::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= VST011::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= Varan_Base::State.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, Varan_Base::State.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_VST012;
#pragma warning (disable : 74)
	vmt.UserFcts[27]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[43]		:= #GetDeviceID();

#pragma warning (default : 74)
	Varan_Base::State.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Varan_Base::State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL VST012::CheckDeviceID
  VAR_INPUT
    ID2Check  : UDINT;
  END_VAR
  VAR_OUTPUT
    IsOK  : BOOL;
  END_VAR
  
  //look if it is right hardware
  if ( ID2Check <> VST012_DEVICE_ID ) then
    IsOK := FALSE;
  else
    IsOK := TRUE;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL VST012::GetDeviceID
  VAR_OUTPUT
    output  : UDINT;
  END_VAR

  output := VST012_DEVICE_ID;
  
END_FUNCTION
