//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define SALAMANDEROS  16#00009000
//}}LSL_DEFINES

//{{LSL_DECLARATION
#include <.\lsl_st_sysinfo.h>

(*!
<Class
	Name               = "_MemoryInformation"
	Revision           = "1.1"
	GUID               = "{CD3486E8-6045-40EB-9255-A9E9C774E44E}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "2000 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(642,120)"
	Comment            = "Diese Klasse zeigt die aktuelle Speicherauslastung (SD-Card, RAM, SRAM, OS-Heap) der Steuerung an.">
	<Channels>
		<Server Name="ClassSvr" GUID="{D395A4BA-F049-4B47-A782-328325EBFA49}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="OSHeapFree" GUID="{670950D9-96C0-4321-9403-E2F161597626}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS-Heap: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx KBytes]"/>
		<Server Name="OSHeapFreePercent" GUID="{80FCC0D0-2BCA-49FF-ADDD-32B4BED46D64}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS-Heap: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="OSHeapTotal" GUID="{8066F968-4890-4F9F-B2D3-F97DD78D0A77}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS-Heap: Gesamtgröße Speicher&#13;&#10;&#13;&#10;[xxx KBytes]"/>
		<Server Name="OSHeapUsed" GUID="{17033B1C-4AC3-4F2B-AE65-F1F01FCBB18B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS-Heap: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx KBytes]"/>
		<Server Name="OSHeapUsedPercent" GUID="{F0D2D528-0752-4598-89AB-005A419BFB17}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="OS-Heap: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="RAMFree" GUID="{A8DC6480-AF58-4579-BA42-022E42C2D7D0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="RAM: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="RAMFreePercent" GUID="{C465BC41-0907-4DC3-A029-6B18CDAABDD9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="RAMTotal" GUID="{C69F9EAF-301F-4D81-A722-48434323DF8E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="RAM: Gesamtgröße Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="RAMUsed" GUID="{67A9E27C-8288-4B16-B4E8-EDB2E984BB65}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="RAM: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="RAMUsedPercent" GUID="{63C6CFEA-A881-4FBC-BDC0-12CEF1E76D3E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="RAM: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="SDCardFree" GUID="{2B48DFB7-3CA4-4E7C-B16C-91485C6622C1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SD-Karte: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SDCardFreePercent" GUID="{9FB5A67F-112F-460E-9476-FAAE917EE250}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SD-Karte: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="SDCardTotal" GUID="{822FE319-17BD-4DAE-9B0C-2FCABF41EA34}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SD-Karte: Gesamtgröße Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SDCardUsed" GUID="{D3BB693B-F57C-4304-9FC1-DC44CE0BCDD8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SD-Karte: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SDCardUsedPercent" GUID="{3E5FCD32-F75E-46C2-96AA-66F80BC0623D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SD-Karte: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="SRAMFree" GUID="{EC611044-DA66-469B-8C51-9132D7ADFA55}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SRAMFreePercent" GUID="{42B07655-EB50-42D1-A7B3-F7E50BA424BD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: verfügbarer Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Server Name="SRAMTotal" GUID="{269A2989-A0B7-44B3-8353-A9DBBEF68343}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: Gesamtgröße Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SRAMUsed" GUID="{0C80BC4F-4850-48DC-BA9C-474AA5D84216}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx Bytes]"/>
		<Server Name="SRAMUsedPercent" GUID="{0071F41F-E0FB-4258-A6AA-0D1A118C3424}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="SRAM: verwendeter Speicher&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Client Name="AlarmOSHeap" Required="false" Internal="false" Comment="Kann zu einen Alarmobjekt verbunden werden.&#13;&#10;0...Auslastung OSHeap ist unter dem eingestellten Limit&#13;&#10;1...Auslastung OSHeap ist über oder gleich dem eingestellten Limit"/>
		<Client Name="AlarmRAM" Required="false" Internal="false" Comment="Kann zu einen Alarmobjekt verbunden werden.&#13;&#10;0...Auslastung RAM ist unter dem eingestellten Limit&#13;&#10;1...Auslastung RAM ist über oder gleich dem eingestellten Limit"/>
		<Client Name="AlarmSDCard" Required="false" Internal="false" Comment="Kann zu einen Alarmobjekt verbunden werden.&#13;&#10;0...Auslastung SDCard ist unter dem eingestellten Limit&#13;&#10;1...Auslastung SDCard ist über oder gleich dem eingestellten Limit"/>
		<Client Name="AlarmSRAM" Required="false" Internal="false" Comment="Kann zu einen Alarmobjekt verbunden werden.&#13;&#10;0...Auslastung SRAM ist unter dem eingestellten Limit&#13;&#10;1...Auslastung SRAM ist über oder gleich dem eingestellten Limit"/>
		<Client Name="ccSystemLogging" Required="false" Internal="false" Comment="Kommando-Kanal zur Klasse SystemLogging.&#13;&#10;Nur wenn dieser Client verbunden ist, werden Log Nachrichten generiert."/>
		<Client Name="coFileSys" Required="false" Internal="false" Comment="Objektkanal zur Klasse _FileSys. Muss nicht verbunden werden."/>
		<Client Name="LimitOSHeap" Required="true" Internal="false" DefValue="800" Comment="Grenze für Auslastung OS-Heap, ab welcher ein Alarm ausgelöst wird.&#13;&#10;&#13;&#10;[xxx.x %]&#13;&#10;&#13;&#10;Bei Steuerungen mit RTOS (OS- Version &lt; 09.00.000) muss hier das Limit des freien OS- Heap eingestellt werden [kB].&#13;&#10;Ist der Freie OS- Heap kleiner diesem Wert wird der Alarm ausgelöst"/>
		<Client Name="LimitRAM" Required="true" Internal="false" DefValue="800" Comment="Grenze für Auslastung RAM, ab welcher ein Alarm ausgelöst wird.&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Client Name="LimitSDCard" Required="true" Internal="false" DefValue="800" Comment="Grenze für Auslastung SD-Karte, ab welcher ein Alarm ausgelöst wird.&#13;&#10;&#13;&#10;[xxx.x %]"/>
		<Client Name="LimitSRAM" Required="true" Internal="false" DefValue="800" Comment="Grenze für Auslastung SRAM, ab welcher ein Alarm ausgelöst wird.&#13;&#10;&#13;&#10;[xxx.x %]"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\lsl_st_sysinfo.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.1" Date="2020-07-29" Author="BurSte" Company="Sigmatek" Description="Added posibility to get OS Heap from CPU´s with a RTOS OS &lt; 09.00.000 "/>
		<Dokumentation Revision="1.0" Date="2018-12-18" Author="WeiTho" Company="Sigmatek" Description="Copy from Class MemoryInformation&#13;&#10;- Embedded AlarmOP Class removed&#13;&#10;- Systemlogging with CommandChannel"/>
	</RevDoku>
</Class>
*)
_MemoryInformation : CLASS
	TYPE
	  t_e_InfoSteps :
	  (
	    Info_SDCardStart,
	    Info_SDCardWait,
	    Info_SRAM,
	    Info_RAM,
	    Info_ReadFreeOSHeap,
	    Info_OSHeap
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_SDCard : STRUCT
	    udBytesPerSector : UDINT;
	    udSectorsPerCluster : UDINT;
	    udTotalCluster : UDINT;
	    udFreeCluster : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	SRAMTotal 	: SvrCh_UDINT;
	SRAMUsed 	: SvrCh_UDINT;
	SRAMFree 	: SvrCh_UDINT;
	SRAMUsedPercent 	: SvrCh_UDINT;
	SRAMFreePercent 	: SvrCh_UDINT;
	RAMTotal 	: SvrCh_UDINT;
	RAMUsed 	: SvrCh_UDINT;
	RAMFree 	: SvrCh_UDINT;
	RAMUsedPercent 	: SvrCh_UDINT;
	RAMFreePercent 	: SvrCh_UDINT;
	SDCardTotal 	: SvrCh_REAL;
	SDCardUsed 	: SvrCh_REAL;
	SDCardFree 	: SvrCh_REAL;
	SDCardUsedPercent 	: SvrCh_UDINT;
	SDCardFreePercent 	: SvrCh_UDINT;
	OSHeapTotal 	: SvrCh_UDINT;
	OSHeapFree 	: SvrCh_UDINT;
	OSHeapUsed 	: SvrCh_UDINT;
	OSHeapUsedPercent 	: SvrCh_UDINT;
	OSHeapFreePercent 	: SvrCh_UDINT;
  //Clients:
	coFileSys 	: CltChCmd__FileSys;
	ccSystemLogging 	: CltChCmd_DINT;
	LimitSRAM 	: CltCh_UDINT;
	LimitRAM 	: CltCh_UDINT;
	LimitSDCard 	: CltCh_UDINT;
	LimitOSHeap 	: CltCh_UDINT;
	AlarmSRAM 	: CltCh_DINT;
	AlarmRAM 	: CltCh_DINT;
	AlarmSDCard 	: CltCh_DINT;
	AlarmOSHeap 	: CltCh_DINT;
  //Variables:
		dAsyncHandle 	: DINT;
		eInfoSteps 	: t_e_InfoSteps;
		sSDCard 	: t_s_SDCard;
		pLSLSysInfo 	: ^LSL_SYSINFO_TYPE;
		IsCon_ccSystemLogging 	: BOOL;
		bSalamanderOS 	: BOOL;
  //Functions:
				//! <Function Comment="Überprüft Client Verbindungen, holt Information vom CLI Interface, ermittelt totalen OS-Heap" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Hier wird zyklisch die aktuelle Speicherauslastung ermittelt." Name="Background"/>
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION SetMessage
		VAR_INPUT
			pText 	: ^CHAR;
		END_VAR;
	
	FUNCTION LogMyText
		VAR_INPUT
			pLogTxt 	: ^CHAR;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _FileSys


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _MemoryInformation::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__MEMORYINFORMATION
1$UINT, 1$UINT, (SIZEOF(::_MemoryInformation))$UINT, 
21$UINT, 10$UINT, 0$UINT, 
TO_UDINT(951335169), "_MemoryInformation", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_MemoryInformation.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::_MemoryInformation.SRAMTotal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(406203946), "SRAMTotal", 
(::_MemoryInformation.SRAMUsed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3196755), "SRAMUsed", 
(::_MemoryInformation.SRAMFree.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(878273923), "SRAMFree", 
(::_MemoryInformation.SRAMUsedPercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3775011715), "SRAMUsedPercent", 
(::_MemoryInformation.SRAMFreePercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4118729449), "SRAMFreePercent", 
(::_MemoryInformation.RAMTotal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3502413918), "RAMTotal", 
(::_MemoryInformation.RAMUsed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(601305953), "RAMUsed", 
(::_MemoryInformation.RAMFree.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(398365105), "RAMFree", 
(::_MemoryInformation.RAMUsedPercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2022633448), "RAMUsedPercent", 
(::_MemoryInformation.RAMFreePercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1827808898), "RAMFreePercent", 
(::_MemoryInformation.SDCardTotal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3430429877), "SDCardTotal", 
(::_MemoryInformation.SDCardUsed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4112169520), "SDCardUsed", 
(::_MemoryInformation.SDCardFree.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3245545696), "SDCardFree", 
(::_MemoryInformation.SDCardUsedPercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3593044692), "SDCardUsedPercent", 
(::_MemoryInformation.SDCardFreePercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3260369854), "SDCardFreePercent", 
(::_MemoryInformation.OSHeapTotal.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1703456465), "OSHeapTotal", 
(::_MemoryInformation.OSHeapFree.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2370252556), "OSHeapFree", 
(::_MemoryInformation.OSHeapUsed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3106835932), "OSHeapUsed", 
(::_MemoryInformation.OSHeapUsedPercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2385870945), "OSHeapUsedPercent", 
(::_MemoryInformation.OSHeapFreePercent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2588494091), "OSHeapFreePercent", 
//Clients:
(::_MemoryInformation.coFileSys.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(940542775), "coFileSys", TO_UDINT(545279513), "_FileSys", 1$UINT, 20$UINT, 
(::_MemoryInformation.ccSystemLogging.pCh)$UINT, _CH_CLT_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1000190998), "ccSystemLogging", 
(::_MemoryInformation.LimitSRAM.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2146042518), "LimitSRAM", 
(::_MemoryInformation.LimitRAM.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3875420841), "LimitRAM", 
(::_MemoryInformation.LimitSDCard.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1027852343), "LimitSDCard", 
(::_MemoryInformation.LimitOSHeap.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(816511863), "LimitOSHeap", 
(::_MemoryInformation.AlarmSRAM.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(84182650), "AlarmSRAM", 
(::_MemoryInformation.AlarmRAM.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1646296610), "AlarmRAM", 
(::_MemoryInformation.AlarmSDCard.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(626870528), "AlarmSDCard", 
(::_MemoryInformation.AlarmOSHeap.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(682916416), "AlarmOSHeap", 
END_FUNCTION


#define USER_CNT__MemoryInformation 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__MemoryInformation] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _MemoryInformation::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__MemoryInformation, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//BUrSte: V1.1 added Variables to get the OS Heap from CPU´s with RTOS
VAR_GLOBAL
    GetFreeOSHeap_RTOS  AT % M 0034       : UDINT;
    FreeOSHeap_RTOS     AT % M 0038       : UDINT;
END_VAR


FUNCTION VIRTUAL GLOBAL _MemoryInformation::Init

  //Einmaliges Bestimmen des Möglichen OS Heaps, der Totale OSHeap wird über die autoexec.lsl geändert.
  // sollte eine Änderung erfolgen, muss neu gestartet werden. --> Somit kommen wir wieder in die Init();

  if _FirstScan then
    
    if (IsClientConnected(#ccSystemLogging)) then
      IsCon_ccSystemLogging := TRUE;
    else
      IsCon_ccSystemLogging := FALSE;
    end_if;
    
    //BUrSte: V1.1 Check OS Version
    if _rtosversion >= SALAMANDEROS then
      bSalamanderOS := true;
    end_if;
    
    //BUrSte: V1.1 Only Salamander OS!
    if bSalamanderOS = true then
    
      //Cli Interface holen
      if OS_CILGET(INTERFACE_LSL_SYSINFO, #pLSLSysInfo) <> SYS_ERR_NONE then
        SetMessage("MemoryInfo_OSHeap::Init - Fehler beim Lesen des CLI Interfaces");
      end_if;
      //Pointer Prüfen  
      if pLSLSysInfo <> NIL then
        //Totalen OSHeap holen
        if OS_SYSINFO_GET_PROP(pLSLSysInfo, LSL_SYSINFO_MEM_OSHEAP_TOTAL, #OSHeapTotal, sizeof(udint)) <> 0 then
          SetMessage("MemoryInfo_OSHeap::Init - Fehler beim Lesen des Totalen OS- Heap");
        end_if;    
      else
        SetMessage("MemoryInfo_OSHeap::Init - Pointer auf Interface ist ungültig");  
      end_if;
      
    end_if;  
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _MemoryInformation::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	tmpRetcode            : DINT;
    tmpTotalCluster       : REAL ;
    tmpFreeCluster        : REAL ;
    tmpBytesPerSector     : REAL ;
    tmpSectorsPerCluster  : REAL ;
  END_VAR

  //*****************************************************************************
  //** SSW ZUM BESTIMMEN DER SPEICHERAUSLASTUNG                                **
  //*****************************************************************************
  
  case eInfoSteps of
  
    // Bestimmen Auslastung SD-Karte
    //*****************************************************************************
    Info_SDCardStart:
    
      // asynchrones Kommando zum Bestimmen der Speicherauslastung starten
      dAsyncHandle := coFileSys.GetDiskSpace_A( Async             := true, 
                                                Drive             := "C", 
                                                BytesPerSector    := #sSDCard.udBytesPerSector, 
                                                SectorsPerCluster := #sSDCard.udSectorsPerCluster, 
                                                TotalClusters     := #sSDCard.udTotalCluster, 
                                                FreeClusters      := #sSDCard.udFreeCluster);
      
      eInfoSteps := Info_SDCardWait;

    // Warten bis Auslastung bestimmt wurde
    //*****************************************************************************
    Info_SDCardWait:
    
      // Warten bis asynchrones Kommando fertig ist
      case coFileSys.GetAsyncState( ID  := dAsyncHandle$UDINT, 
                                    Erg := #tmpRetcode) of
        
        // Noch nicht fertig
        //----------------------------------------------------------
        RT_NOT_STARTED,
        RT_IN_PROGRESS:
        
        
        // Fehler ist aufgetreten
        //----------------------------------------------------------
        RT_INVALID_ID,
        RT_ERG_DELETED:
        
          SetMessage("MemoryInformation::Background(): asynchrones Kommando zum Bestimmen der Auslastung SD-Karte fehlgeschlagen");
          eInfoSteps := Info_SRAM;
          
        // alles in Ordnung
        //----------------------------------------------------------
        else
        
          // Rückgabewert prüfen
          if tmpRetcode >= 0 then
          
            tmpBytesPerSector     := to_real(sSDCard.udBytesPerSector);
            tmpSectorsPerCluster  := to_real(sSDCard.udSectorsPerCluster);
            tmpTotalCluster       := to_real(sSDCard.udTotalCluster);
            tmpFreeCluster        := to_real(sSDCard.udFreeCluster);
          
            // Speicherauslastung bestimmen
            SDCardTotal := tmpTotalCluster * tmpSectorsPerCluster * tmpBytesPerSector;
            SDCardFree  := tmpFreeCluster * tmpSectorsPerCluster * tmpBytesPerSector;
            SDCardUsed  := SDCardTotal - SDCardFree;
            
            // Anzeige in Prozen [xx.x %]
            SDCardFreePercent := to_udint(SDCardFree / SDCardTotal * 1000);
            SDCardUsedPercent := 1000 - SDCardFreePercent;
            
            // Prüfen ob Grenze für Alarm erreicht wurde
            if SDCardUsedPercent >= LimitSDCard then
              AlarmSDCard.Write(1);
            else
              AlarmSDCard.Write(0);
            end_if;
            
          else
            SetMessage("MemoryInformation::Background(): Bestimmen der Auslastung SD-Karte fehlgeschlagen");
          end_if;

          // als nächstes Auslastung SRAM bestimmen
          eInfoSteps := Info_SRAM;          
          
      end_case;

      
    // Auslastung SRAM bestimmen
    //*****************************************************************************
    Info_SRAM:
    
      // Speicherauslastung bestimmen
      SRAMTotal := _S_Ram_Hptr^.DataLength;
      SRAMUsed  := _S_Ram_Hptr^.UsedData;
      SRAMFree  := SRAMTotal - SRAMUsed;
      
      // Anzeige in Prozent [xx.x %]
      SRAMFreePercent := to_udint(to_real(SRAMFree) / to_real(SRAMTotal) * 1000);
      SRAMUsedPercent := 1000 - SRAMFreePercent;
      
      // Prüfen ob Grenze für Alarm erreicht wurde
      if SRAMUsedPercent >= LimitSRAM then
        AlarmSRAM.Write(1);
      else
        AlarmSRAM.Write(0);
      end_if;

      // als nächstes Auslastung RAM bestimmen
      eInfoSteps := Info_RAM;
      
      
    // Auslastung RAM bestimmen
    //*****************************************************************************
    Info_RAM:
    
      // Speicherauslastung bestimmen
      RAMTotal  := _UserHeapTotalSize;
      RAMFree   := _UserHeapFreeMem;
      RAMUsed   := RAMTotal - RAMFree;
      
      // Anzeige in Prozent [xx.x %]
      RAMFreePercent  := to_udint(to_real(RAMFree) / to_real(RAMTotal) * 1000);
      RAMUsedPercent  := 1000 - RAMFreePercent;

      // Prüfen ob Grenze für Alarm erreicht wurde
      if RAMUsedPercent >= LimitRAM then
        AlarmRAM.Write(1);
      else
        AlarmRAM.Write(0);
      end_if;
      
      //BUrSte: V1.1 Only Salamander OS!
      if bSalamanderOS = true then
      
        //BS1811190 Prüfen ob beim Bestimmen des totalen OS- Heap alles gut war
        if OSHeapTotal > 0 then
          // als nächstes Auslastung OS- Heap bestimmen
          eInfoSteps := Info_ReadFreeOSHeap;      
        else
          // als nächstes wieder Auslastung SD-Karte bestimmen
          eInfoSteps := Info_SDCardStart;
          SetMessage("MemoryInfo_OSHeap::Background - Totaler OS HEAP ist ungültig");     
        end_if;
        
      //BUrSte: V1.1 RTOS 
      else
        //request RTOS to get the free os heap
        GetFreeOSHeap_RTOS := 1;
        eInfoSteps := Info_OSHeap;     
      end_if;
    
    // Auslastung OS RAM bestimmen
    //*****************************************************************************
    Info_ReadFreeOSHeap:

      //Lesen des Freien OS Heap
      if pLSLSysInfo <> NIL then
        if OS_SYSINFO_GET_PROP(pLSLSysInfo, LSL_SYSINFO_MEM_OSHEAP_FREE, #OSHeapFree, sizeof(udint)) <> 0 then
          SetMessage("MemoryInfo_OSHeap::Background - Fehler beim Lesen des Freien OS- Heap");
          // als nächstes wieder Auslastung SD-Karte bestimmen
          eInfoSteps := Info_SDCardStart;          
        else
          // als nächstes OS-Heap berechnen, prüfen und anzeigen
          eInfoSteps := Info_OSHeap;
        end_if;
      else
        SetMessage("MemoryInfo_OSHeap::Init - Pointer auf Interface ist ungültig");
        // als nächstes wieder Auslastung SD-Karte bestimmen
        eInfoSteps := Info_SDCardStart;        
      end_if;

    // Auslastung OS RAM verarebiten und Anzeigen
    //*****************************************************************************
    Info_OSHeap:
      
      //BUrSte: V1.1 Only Salamander OS!
      if bSalamanderOS = true then 
      
        // Speicherauslastung bestimmen
        OSHeapUsed  := OSHeapTotal - OSHeapFree;
        
        // Anzeige in Prozent [xx.x %]
        OSHeapFreePercent  := to_udint(to_real(OSHeapFree) / to_real(OSHeapTotal) * 1000);
        OSHeapUsedPercent  := 1000 - OSHeapFreePercent;

        // Prüfen ob Grenze für Alarm erreicht wurde
        if OSHeapUsedPercent > LimitOSHeap then
          AlarmOSHeap.Write(1);
        else
          AlarmOSHeap.Write(0);
        end_if;

      //BUrSte: V1.1 RTOS 
      else
      
        //wait until RTOS is ready
        if GetFreeOSHeap_RTOS = 0 then
          
          OSHeapFree := FreeOSHeap_RTOS;
          
          //OS Heap Byte --> Kbyte
          if OSHeapFree <> 0 then
            OSHeapFree /= (1 kb);
          end_if;
          
          //Check OS heap Limit
          if OSHeapFree < LimitOSHeap then
            AlarmOSHeap.Write(1);
          else
            AlarmOSHeap.Write(0);
          end_if;
          
        end_if;

      end_if;
      // als nächstes wieder Auslastung SD-Karte bestimmen
      eInfoSteps := Info_SDCardStart;
      
  end_case;

	state := READY;

END_FUNCTION



FUNCTION _MemoryInformation::SetMessage
	VAR_INPUT
		pText 	: ^CHAR;
	END_VAR
  
  if IsCon_ccSystemLogging = TRUE then
    if (pText <> NIL) then
      LogMyText(pText);
    else
      LogMyText("_OsciConfig::SetMessage(): Nil pointer pText");
    end_if;
  end_if;

END_FUNCTION


FUNCTION _MemoryInformation::LogMyText
	VAR_INPUT
		pLogTxt 	: ^CHAR;
	END_VAR
  VAR
    NiGive	  : CmdStruct;
    NiGet     : Results;
  END_VAR

  if ((IsCon_ccSystemLogging = True) & (pLogTxt <> NIL)) then

    NiGive.uiCmd    := 0;               // Command
    NiGive.aPara[0] := (pLogTxt)$DINT;  // pointer to text

    ccSystemLogging.NewInst(#NiGive, #NiGet);

  end_if;

END_FUNCTION
